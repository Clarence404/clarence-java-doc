import{_ as r,c as a,a as t,o as l}from"./app-bQHBJnAp.js";const i={};function n(o,e){return l(),a("div",null,e[0]||(e[0]=[t('<h1 id="软件设计架构" tabindex="-1"><a class="header-anchor" href="#软件设计架构"><span>软件设计架构</span></a></h1><div class="hint-container warning"><p class="hint-container-title">Todo</p><p>以下为初步大纲，后续将结合实际项目经验持续补充完善。</p></div><blockquote><p>本文聚焦 Java 后端开发，整理常见的架构思想、模式与风格，适合作为学习路线或架构笔记起点。</p></blockquote><hr><h2 id="核心架构思想-适用于-java-工程" tabindex="-1"><a class="header-anchor" href="#核心架构思想-适用于-java-工程"><span>核心架构思想（适用于 Java 工程）</span></a></h2><ul><li><p><strong>DDD（领域驱动设计）</strong><br> 以业务建模为核心，强调限界上下文、聚合、领域服务等。</p></li><li><p><strong>TDD（测试驱动开发）</strong><br> 通过先编写测试用例，驱动实现代码编写，提高可维护性。</p></li><li><p><strong>Clean Architecture / Onion Architecture</strong><br> 强调分层与依赖反转，业务逻辑与技术实现解耦。</p></li><li><p><strong>Hexagonal Architecture（六边形架构）</strong><br> 通过端口与适配器解耦内部逻辑与外部交互（例如 Web、数据库）。</p></li></ul><hr><h2 id="常见架构模式-java-项目常见" tabindex="-1"><a class="header-anchor" href="#常见架构模式-java-项目常见"><span>常见架构模式（Java 项目常见）</span></a></h2><ul><li><p><strong>MVC（Model-View-Controller）</strong><br> Java Web 应用最常见结构，Spring MVC 即基于该模式。</p></li><li><p><strong>CQRS（命令查询职责分离）</strong><br> 在复杂业务中拆分写操作和读操作，提升性能与扩展性。</p></li><li><p><strong>Event Sourcing（事件溯源）</strong><br> 用事件记录状态变化，适用于追溯和审计场景。</p></li><li><p><strong>Layered Architecture（三层/多层架构）</strong><br> 表现层（Controller）、服务层（Service）、持久层（Repository）是 Java 项目默认架构。</p></li><li><p><strong>Plugin Architecture（插件式架构）</strong><br> 常用于中间件、平台型系统，核心系统+插件动态加载。</p></li></ul><hr><h2 id="系统架构风格-后端系统选型参考" tabindex="-1"><a class="header-anchor" href="#系统架构风格-后端系统选型参考"><span>系统架构风格（后端系统选型参考）</span></a></h2><ul><li><p><strong>单体架构（Monolithic）</strong><br> 初期项目常用，部署简单，结构紧凑。</p></li><li><p><strong>微服务架构（Microservices）</strong><br> 以服务为单位独立开发、部署，Spring Cloud / Dubbo 是主流技术栈。</p></li><li><p><strong>事件驱动架构（EDA）</strong><br> 基于消息队列（如 Kafka、RocketMQ）进行服务间通信。</p></li><li><p><strong>Serverless 架构（可选）</strong><br> 适用于函数触发类任务，例如定时计算、图片处理（Java 可选用阿里云函数计算或 AWS Lambda）。</p></li></ul><hr><h2 id="实战组合建议" tabindex="-1"><a class="header-anchor" href="#实战组合建议"><span>实战组合建议</span></a></h2><ul><li><code>Spring Boot + DDD + MyBatis Plus</code></li><li><code>Spring Cloud + DDD + CQRS + Kafka</code></li><li><code>Spring Boot + Clean Architecture + Redis + RabbitMQ</code></li><li><code>单体 MVC + 分层架构（传统企业项目）</code></li></ul><hr><blockquote><p>🚧 持续更新中，如需某部分扩展为实践案例，可留言提出。</p></blockquote>',17)]))}const c=r(i,[["render",n],["__file","8_software_architecture.html.vue"]]),p=JSON.parse('{"path":"/architecture/8_software_architecture.html","title":"软件设计架构","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"核心架构思想（适用于 Java 工程）","slug":"核心架构思想-适用于-java-工程","link":"#核心架构思想-适用于-java-工程","children":[]},{"level":2,"title":"常见架构模式（Java 项目常见）","slug":"常见架构模式-java-项目常见","link":"#常见架构模式-java-项目常见","children":[]},{"level":2,"title":"系统架构风格（后端系统选型参考）","slug":"系统架构风格-后端系统选型参考","link":"#系统架构风格-后端系统选型参考","children":[]},{"level":2,"title":"实战组合建议","slug":"实战组合建议","link":"#实战组合建议","children":[]}],"git":{"updatedTime":1747057983000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":2,"url":"https://github.com/Clarence"}]},"filePathRelative":"architecture/8_software_architecture.md"}');export{c as comp,p as data};
