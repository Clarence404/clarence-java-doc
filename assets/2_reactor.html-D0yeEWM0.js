import{_ as s,c as a,a as t,o as e}from"./app-EPw-2r-W.js";const o={};function p(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="reactor-模型" tabindex="-1"><a class="header-anchor" href="#reactor-模型"><span>Reactor 模型</span></a></h1><div class="hint-container warning"><p class="hint-container-title">Todo 理解后优化</p></div><p>Reactor 模型是 <strong>基于 IO 多路复用的一种事件驱动模型</strong>，用于处理高并发网络请求。</p><h3 id="_1、reactor-核心原理" tabindex="-1"><a class="header-anchor" href="#_1、reactor-核心原理"><span><strong>1、Reactor 核心原理</strong></span></a></h3><ul><li><p><strong>Reactor（反应器）</strong> 负责监听多个 IO 事件，并分发给对应的 <strong>Handler（处理器）</strong> 进行处理。</p></li><li><p>适用于 <strong>高性能服务器（如 Netty、Tomcat、Redis、Kafka）</strong>。</p></li></ul><h3 id="_2、reactor-的三种实现模式" tabindex="-1"><a class="header-anchor" href="#_2、reactor-的三种实现模式"><span><strong>2、Reactor 的三种实现模式</strong></span></a></h3><h4 id="_1-单线程-reactor" tabindex="-1"><a class="header-anchor" href="#_1-单线程-reactor"><span><strong>① 单线程 Reactor</strong></span></a></h4><ul><li><p><strong>特点</strong>：单个 <code>Reactor</code> 线程负责监听连接、读写数据，并执行业务逻辑。</p></li><li><p><strong>缺点</strong>：在高并发下容易阻塞。</p></li><li><p><strong>适用场景</strong>：小规模并发，如 GUI 事件驱动。</p><p><strong>示例（伪代码）：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听所有事件</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key <span class="token operator">:</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理新连接</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 读取数据</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 发送数据</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-多线程-reactor" tabindex="-1"><a class="header-anchor" href="#_2-多线程-reactor"><span><strong>② 多线程 Reactor</strong></span></a></h4><ul><li><p><strong>特点</strong>：</p><ul><li><p><code>Reactor</code> 线程只负责监听事件，并将任务分发给 <strong>线程池</strong> 处理。</p></li><li><p><strong>避免单线程阻塞问题</strong>，提高吞吐量。</p></li></ul></li><li><p><strong>适用场景</strong>：一般的高并发服务器（如 Nginx、Netty）。</p></li></ul><h4 id="_3-主从-reactor-master-slave-reactor" tabindex="-1"><a class="header-anchor" href="#_3-主从-reactor-master-slave-reactor"><span><strong>③ 主从 Reactor（Master-Slave Reactor）</strong></span></a></h4><ul><li><p><strong>特点</strong>：</p><ul><li><p><strong>主 Reactor</strong> 负责监听连接请求，并将任务交给 <strong>从 Reactor 线程池</strong> 处理读写事件。</p></li><li><p><strong>从 Reactor</strong> 负责真正的数据处理，减少主线程负担。</p></li></ul></li><li><p><strong>适用场景</strong>：<strong>超高并发场景</strong>（如 Kafka、Redis、Netty）。</p><p><strong>示例（Netty 使用的主从 Reactor）：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理连接</span></span>
<span class="line"><span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理业务</span></span>
<span class="line"><span class="token class-name">ServerBootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加业务处理器</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_3、io-模型与-reactor-的关系" tabindex="-1"><a class="header-anchor" href="#_3、io-模型与-reactor-的关系"><span><strong>3、IO 模型与 Reactor 的关系</strong></span></a></h2><table><thead><tr><th>方案</th><th>IO 模型</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>BIO</strong></td><td>阻塞 IO</td><td>低并发</td></tr><tr><td><strong>NIO</strong></td><td>多路复用（Reactor 单线程）</td><td>一般并发</td></tr><tr><td><strong>Netty</strong></td><td>多路复用（Reactor 多线程）</td><td>高并发</td></tr><tr><td><strong>AIO</strong></td><td>异步 IO（Reactor 线程池）</td><td>超高并发</td></tr></tbody></table><hr><h2 id="_4、io和reactor-总结" tabindex="-1"><a class="header-anchor" href="#_4、io和reactor-总结"><span><strong>4、IO和Reactor 总结</strong></span></a></h2><ul><li><p><strong>IO 模型</strong> 主要描述 <strong>数据传输方式</strong>（阻塞/非阻塞、同步/异步）。</p></li><li><p><strong>Reactor 模型</strong> 是基于 <strong>IO 多路复用的事件驱动架构</strong>，用于<strong>高并发</strong>网络服务器。</p></li><li><p><strong>BIO、NIO、AIO</strong> 对应不同的并发需求：</p><ul><li><p><strong>BIO</strong>：简单，但性能差。</p></li><li><p><strong>NIO（Reactor）</strong>：主流方案，如 <strong>Netty、Tomcat</strong>。</p></li><li><p><strong>AIO（Proactor）</strong>：适合超高并发（但 Java AIO 实际应用少）。</p></li></ul></li></ul>`,18)]))}const r=s(o,[["render",p],["__file","2_reactor.html.vue"]]),i=JSON.parse('{"path":"/netty/2_reactor.html","title":"Reactor 模型","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1、Reactor 核心原理","slug":"_1、reactor-核心原理","link":"#_1、reactor-核心原理","children":[]},{"level":3,"title":"2、Reactor 的三种实现模式","slug":"_2、reactor-的三种实现模式","link":"#_2、reactor-的三种实现模式","children":[]},{"level":2,"title":"3、IO 模型与 Reactor 的关系","slug":"_3、io-模型与-reactor-的关系","link":"#_3、io-模型与-reactor-的关系","children":[]},{"level":2,"title":"4、IO和Reactor 总结","slug":"_4、io和reactor-总结","link":"#_4、io和reactor-总结","children":[]}],"git":{"updatedTime":1742735410000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":5,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":1,"url":"https://github.com/Clarence"}]},"filePathRelative":"netty/2_reactor.md"}');export{r as comp,i as data};
