import{_ as r,c as s,a as e,o as l}from"./app-B1wM3nBs.js";const n={};function a(i,t){return l(),s("div",null,t[0]||(t[0]=[e('<h1 id="vm-概述" tabindex="-1"><a class="header-anchor" href="#vm-概述"><span>VM 概述</span></a></h1><h2 id="一、虚拟机的发展" tabindex="-1"><a class="header-anchor" href="#一、虚拟机的发展"><span>一、虚拟机的发展</span></a></h2><p>虚拟机的发展经历了从最初在大型机上实现资源隔离，到现代云计算时代作为基础设施核心支撑的演进过程。大致可分为以下几个阶段：</p><h3 id="_1-初始阶段-1960s-1970s-大型机虚拟化" tabindex="-1"><a class="header-anchor" href="#_1-初始阶段-1960s-1970s-大型机虚拟化"><span>1. <strong>初始阶段（1960s-1970s）：大型机虚拟化</strong></span></a></h3><p>虚拟化最早起源于 IBM 在 1960 年代开发的 CP/CMS 系统，用于在大型机上运行多个用户会话。它的目的是提高计算资源的利用率和多任务处理能力。</p><ul><li><strong>代表技术</strong>：IBM VM/370</li><li><strong>核心目标</strong>：资源隔离、多任务处理</li><li><strong>主要特点</strong>：硬件模拟、时间分片、用户空间隔离</li></ul><h3 id="_2-停滞与过渡阶段-1980s-1990s-微机兴起-虚拟化冷淡" tabindex="-1"><a class="header-anchor" href="#_2-停滞与过渡阶段-1980s-1990s-微机兴起-虚拟化冷淡"><span>2. <strong>停滞与过渡阶段（1980s-1990s）：微机兴起，虚拟化冷淡</strong></span></a></h3><p>随着微型计算机和个人电脑的普及，硬件成本下降，虚拟化技术一度热度降低。这一时期，更多关注操作系统本身的发展，如 UNIX、Windows 等。</p><ul><li><strong>主要趋势</strong>：硬件廉价导致“一机一系统”模式流行</li><li><strong>虚拟化应用</strong>：主要用于软件调试（如 DOSBox、Bochs）</li></ul><h3 id="_3-复兴阶段-2000s-x86-虚拟化崛起" tabindex="-1"><a class="header-anchor" href="#_3-复兴阶段-2000s-x86-虚拟化崛起"><span>3. <strong>复兴阶段（2000s）：x86 虚拟化崛起</strong></span></a></h3><p>2000 年后，随着服务器数量激增与资源浪费问题加剧，x86 架构虚拟化成为研究和商业热点。VMware、Microsoft、Xen 等相继推出虚拟化方案。</p><ul><li><p><strong>代表产品</strong>：VMware Workstation/ESX、Xen、VirtualBox</p></li><li><p><strong>核心技术突破</strong>：</p><ul><li>二进制翻译（Binary Translation）</li><li>半虚拟化（Paravirtualization）</li><li>硬件辅助虚拟化（Intel VT-x、AMD-V）</li></ul></li></ul><h3 id="_4-成熟阶段-2010s-云计算与容器化共存" tabindex="-1"><a class="header-anchor" href="#_4-成熟阶段-2010s-云计算与容器化共存"><span>4. <strong>成熟阶段（2010s）：云计算与容器化共存</strong></span></a></h3><p>虚拟机技术已广泛应用于数据中心和云计算平台，成为 IaaS 层的基础。而与此同时，容器（如 Docker）的轻量级隔离方式也逐渐兴起， 与虚拟机并行发展。</p><ul><li><p><strong>云平台依赖</strong>：AWS EC2、Microsoft Azure、阿里云 ECS 等</p></li><li><p><strong>关键趋势</strong>：</p><ul><li>虚拟化与容器化融合（Kata Containers）</li><li>虚拟化性能优化（如 SR-IOV、NUMA 支持）</li></ul></li></ul><h3 id="_5-现代阶段-2020s-至今-轻量虚拟化与边缘计算" tabindex="-1"><a class="header-anchor" href="#_5-现代阶段-2020s-至今-轻量虚拟化与边缘计算"><span>5. <strong>现代阶段（2020s 至今）：轻量虚拟化与边缘计算</strong></span></a></h3><p>随着边缘计算、物联网的发展，对启动速度快、资源占用小的轻量虚拟机（如 Firecracker、Wasmtime）需求提升。同时，WebAssembly 等技术也提供了更细粒度的沙箱化运行环境。</p><ul><li><p><strong>代表技术</strong>：Firecracker（用于 AWS Lambda）、gVisor、WebAssembly VM</p></li><li><p><strong>发展方向</strong>：</p><ul><li>微服务化架构支持</li><li>更强的安全隔离</li><li>快速启动与冷启动优化</li></ul></li></ul><hr><h2 id="二、虚拟机的分类" tabindex="-1"><a class="header-anchor" href="#二、虚拟机的分类"><span>二、虚拟机的分类</span></a></h2><p>虚拟机（Virtual Machine，VM）是一种对计算机系统资源的抽象和模拟，根据不同的维度可以将虚拟机分为多种类型，主要包括以下几类：</p><h3 id="_1-系统虚拟机-system-virtual-machine" tabindex="-1"><a class="header-anchor" href="#_1-系统虚拟机-system-virtual-machine"><span>1. <strong>系统虚拟机（System Virtual Machine）</strong></span></a></h3><p>系统虚拟机模拟的是一整套完整的计算机硬件系统，它允许在其上运行完整的操作系统。其主要用途是提供多个独立的操作系统环境。</p><ul><li><strong>代表产品</strong>：VMware ESXi、Microsoft Hyper-V、KVM、Xen</li><li><strong>特点</strong>：每个虚拟机都可以运行不同的操作系统；高度隔离；资源开销较大。</li><li><strong>使用场景</strong>：服务器虚拟化、云计算基础设施。</li></ul><h3 id="_2-进程虚拟机-process-virtual-machine" tabindex="-1"><a class="header-anchor" href="#_2-进程虚拟机-process-virtual-machine"><span>2. <strong>进程虚拟机（Process Virtual Machine）</strong></span></a></h3><p>进程虚拟机是为了支持单个进程的运行而设计的，它为该进程提供一个运行时的抽象平台，屏蔽底层操作系统的差异。</p><ul><li><strong>代表产品</strong>：Java 虚拟机（JVM）、.NET CLR、Python 虚拟机（PVM）</li><li><strong>特点</strong>：跨平台；启动快；通常用于语言运行时。</li><li><strong>使用场景</strong>：软件开发与跨平台运行。</li></ul><hr><h3 id="_3-全虚拟化-vs-半虚拟化" tabindex="-1"><a class="header-anchor" href="#_3-全虚拟化-vs-半虚拟化"><span>3. <strong>全虚拟化 vs 半虚拟化</strong></span></a></h3><ul><li><p><strong>全虚拟化（Full Virtualization）</strong> 客户操作系统无需修改，虚拟机完全模拟底层硬件。 代表：VMware Workstation、QEMU（带硬件支持）</p></li><li><p><strong>半虚拟化（Paravirtualization）</strong> 客户操作系统需做一定修改，以便与虚拟机监控器更高效地通信。 代表：Xen（早期版本）</p></li></ul><hr><h3 id="_4-宿主式-vs-裸金属式" tabindex="-1"><a class="header-anchor" href="#_4-宿主式-vs-裸金属式"><span>4. <strong>宿主式 vs 裸金属式</strong></span></a></h3><ul><li><p><strong>宿主式虚拟机（Hosted VM）</strong> 依赖已有的主操作系统，在其上运行虚拟机软件（如 VMware Workstation、VirtualBox）。</p></li><li><p><strong>裸金属虚拟机（Bare-metal VM）</strong> 虚拟机监控器直接运行在硬件之上，不依赖宿主操作系统（如 VMware ESXi、KVM）。</p></li></ul><hr><h3 id="_5-高性能虚拟机-vs-轻量级虚拟机" tabindex="-1"><a class="header-anchor" href="#_5-高性能虚拟机-vs-轻量级虚拟机"><span>5. <strong>高性能虚拟机 vs 轻量级虚拟机</strong></span></a></h3><ul><li><strong>高性能虚拟机</strong>：追求接近原生性能的模拟，如用于大型服务器或数据库环境。</li><li><strong>轻量级虚拟机</strong>：如 WebAssembly VM、GraalVM，用于快速、安全地运行嵌入式或浏览器代码。</li></ul><h2 id="三、常用的虚拟机介绍" tabindex="-1"><a class="header-anchor" href="#三、常用的虚拟机介绍"><span>三、常用的虚拟机介绍</span></a></h2><h3 id="_1、基本概念与关系" tabindex="-1"><a class="header-anchor" href="#_1、基本概念与关系"><span>1、基本概念与关系</span></a></h3><table><thead><tr><th>技术</th><th>全称</th><th>类型</th><th>简介</th></tr></thead><tbody><tr><td><strong>WSL</strong></td><td>Windows Subsystem for Linux</td><td>子系统 / 轻量虚拟机</td><td>Windows 上运行 Linux 的兼容层（WSL 2 底层基于 Hyper-V）</td></tr><tr><td><strong>Hyper-V</strong></td><td>无缩写，全称就是 Hyper-V</td><td>裸金属虚拟化</td><td>微软原生的 Type 1 虚拟机监控器（Hypervisor），运行完整虚拟机</td></tr><tr><td><strong>VMware</strong></td><td>如 VMware Workstation / ESXi</td><td>虚拟机平台</td><td>非微软公司开发的虚拟化方案，主流商用虚拟化工具之一</td></tr></tbody></table><ul><li><strong>WSL 2 的内核虚拟化底层依赖 Hyper-V 技术</strong>。</li><li>Hyper-V 和 VMware 都是系统级虚拟机管理器，二者具有相似功能但彼此<strong>不兼容</strong>。</li></ul><hr><h3 id="_2、架构对比" tabindex="-1"><a class="header-anchor" href="#_2、架构对比"><span>2、架构对比</span></a></h3><table><thead><tr><th>项目</th><th>WSL 1</th><th>WSL 2</th><th>Hyper-V</th><th>VMware</th></tr></thead><tbody><tr><td>虚拟化方式</td><td>系统调用转发（非虚拟机）</td><td>基于轻量 Hyper-V 虚拟机</td><td>Type 1 虚拟化（裸金属）</td><td>Hosted 或 Type 1（取决于产品）</td></tr><tr><td>是否真正虚拟机</td><td>否</td><td>是（轻量）</td><td>是</td><td>是</td></tr><tr><td>是否使用 Hypervisor</td><td>否</td><td>是（Hyper-V）</td><td>是</td><td>否（自己实现）</td></tr><tr><td>启动速度</td><td>极快</td><td>快</td><td>慢（完整启动）</td><td>慢（完整启动）</td></tr><tr><td>文件访问</td><td>与 Windows 共用文件系统</td><td>虚拟磁盘 + 可挂载</td><td>独立虚拟硬盘</td><td>独立虚拟硬盘</td></tr><tr><td>Linux 支持</td><td>非完整（无内核）</td><td>完整 Linux 内核</td><td>完整系统</td><td>完整系统</td></tr></tbody></table><hr><h3 id="_3、使用场景对比" tabindex="-1"><a class="header-anchor" href="#_3、使用场景对比"><span>3、使用场景对比</span></a></h3><table><thead><tr><th>场景</th><th>推荐技术</th><th>原因</th></tr></thead><tbody><tr><td><strong>开发者想在 Windows 下运行 Linux 命令/工具</strong></td><td><strong>WSL 2</strong></td><td>启动快、集成好、支持原生 Linux</td></tr><tr><td><strong>部署测试多系统环境（如 Windows + Linux）</strong></td><td><strong>Hyper-V / VMware</strong></td><td>完整虚拟机，更接近真实环境</td></tr><tr><td><strong>需要高性能服务器虚拟化</strong></td><td><strong>Hyper-V（Server）或 VMware ESXi</strong></td><td>提供企业级稳定性与性能</td></tr><tr><td><strong>在个人电脑上跑多个操作系统并行使用</strong></td><td><strong>VMware Workstation / Hyper-V</strong></td><td>桌面级多系统测试环境</td></tr></tbody></table><hr><h3 id="_4、兼容性与冲突问题" tabindex="-1"><a class="header-anchor" href="#_4、兼容性与冲突问题"><span>4、兼容性与冲突问题</span></a></h3><ul><li><p><strong>VMware 和 Hyper-V 有冲突</strong>： 因为 VMware 需要自己管理硬件虚拟化，但如果 Hyper-V 已启动，会占用 VT-x / AMD-V 资源，VMware 可能启动失败。</p></li><li><p><strong>WSL 2 依赖 Hyper-V</strong>： 开启 WSL 2 时，其实就是运行一个轻量 Hyper-V 虚拟机。</p></li><li><p><strong>解决办法</strong>： 如果你想同时使用 VMware 和 WSL，可以选择：</p><ul><li>使用 WSL 1（但功能受限）</li><li>使用 VMware 的兼容 Hyper-V 模式（较新版本支持）</li><li>或者在 BIOS 中切换开启 / 关闭虚拟化功能（麻烦）</li></ul></li></ul><hr><h3 id="_5、总结一句话" tabindex="-1"><a class="header-anchor" href="#_5、总结一句话"><span>5、总结一句话：</span></a></h3><blockquote><p><strong>WSL 是为开发者服务的轻量 Linux 环境，底层基于 Hyper-V；</strong><br><strong>Hyper-V 是微软官方的企业级虚拟化平台；</strong><br><strong>VMware 是跨平台、高兼容性的第三方虚拟化解决方案。</strong></p></blockquote>',52)]))}const o=r(n,[["render",a],["__file","2_virtual.html.vue"]]),h=JSON.parse('{"path":"/cloud-native/2_virtual.html","title":"VM 概述","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、虚拟机的发展","slug":"一、虚拟机的发展","link":"#一、虚拟机的发展","children":[{"level":3,"title":"1. 初始阶段（1960s-1970s）：大型机虚拟化","slug":"_1-初始阶段-1960s-1970s-大型机虚拟化","link":"#_1-初始阶段-1960s-1970s-大型机虚拟化","children":[]},{"level":3,"title":"2. 停滞与过渡阶段（1980s-1990s）：微机兴起，虚拟化冷淡","slug":"_2-停滞与过渡阶段-1980s-1990s-微机兴起-虚拟化冷淡","link":"#_2-停滞与过渡阶段-1980s-1990s-微机兴起-虚拟化冷淡","children":[]},{"level":3,"title":"3. 复兴阶段（2000s）：x86 虚拟化崛起","slug":"_3-复兴阶段-2000s-x86-虚拟化崛起","link":"#_3-复兴阶段-2000s-x86-虚拟化崛起","children":[]},{"level":3,"title":"4. 成熟阶段（2010s）：云计算与容器化共存","slug":"_4-成熟阶段-2010s-云计算与容器化共存","link":"#_4-成熟阶段-2010s-云计算与容器化共存","children":[]},{"level":3,"title":"5. 现代阶段（2020s 至今）：轻量虚拟化与边缘计算","slug":"_5-现代阶段-2020s-至今-轻量虚拟化与边缘计算","link":"#_5-现代阶段-2020s-至今-轻量虚拟化与边缘计算","children":[]}]},{"level":2,"title":"二、虚拟机的分类","slug":"二、虚拟机的分类","link":"#二、虚拟机的分类","children":[{"level":3,"title":"1. 系统虚拟机（System Virtual Machine）","slug":"_1-系统虚拟机-system-virtual-machine","link":"#_1-系统虚拟机-system-virtual-machine","children":[]},{"level":3,"title":"2. 进程虚拟机（Process Virtual Machine）","slug":"_2-进程虚拟机-process-virtual-machine","link":"#_2-进程虚拟机-process-virtual-machine","children":[]},{"level":3,"title":"3. 全虚拟化 vs 半虚拟化","slug":"_3-全虚拟化-vs-半虚拟化","link":"#_3-全虚拟化-vs-半虚拟化","children":[]},{"level":3,"title":"4. 宿主式 vs 裸金属式","slug":"_4-宿主式-vs-裸金属式","link":"#_4-宿主式-vs-裸金属式","children":[]},{"level":3,"title":"5. 高性能虚拟机 vs 轻量级虚拟机","slug":"_5-高性能虚拟机-vs-轻量级虚拟机","link":"#_5-高性能虚拟机-vs-轻量级虚拟机","children":[]}]},{"level":2,"title":"三、常用的虚拟机介绍","slug":"三、常用的虚拟机介绍","link":"#三、常用的虚拟机介绍","children":[{"level":3,"title":"1、基本概念与关系","slug":"_1、基本概念与关系","link":"#_1、基本概念与关系","children":[]},{"level":3,"title":"2、架构对比","slug":"_2、架构对比","link":"#_2、架构对比","children":[]},{"level":3,"title":"3、使用场景对比","slug":"_3、使用场景对比","link":"#_3、使用场景对比","children":[]},{"level":3,"title":"4、兼容性与冲突问题","slug":"_4、兼容性与冲突问题","link":"#_4、兼容性与冲突问题","children":[]},{"level":3,"title":"5、总结一句话：","slug":"_5、总结一句话","link":"#_5、总结一句话","children":[]}]}],"git":{"updatedTime":1752562536000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":5,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":5,"url":"https://github.com/hanchen"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hello0709"}]},"filePathRelative":"cloud-native/2_virtual.md"}');export{o as comp,h as data};
