import{_ as e,c as l,a as t,o as r}from"./app-CHZVlxEZ.js";const n={};function i(o,a){return r(),l("div",null,a[0]||(a[0]=[t('<h1 id="db-migration" tabindex="-1"><a class="header-anchor" href="#db-migration"><span>DB migration</span></a></h1><blockquote><p>参考博客：<a href="https://www.cnblogs.com/cndarren/p/12435787.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/cndarren/p/12435787.html</a></p></blockquote><h2 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面"><span>写在前面</span></a></h2><p>最近由于项目变更比较大，需要经常修改表结构，然后对应的测试，开发，生产环境数据库均要修改，有时候一不小心就忘记修改某个环境下的数据库了， 等出问题才发现表结构没有更新，如果项目还没上线，还可以把表删除了重新创建，但是如果项目已经上线了，就不能这样简单粗暴了，我们需要通过 SQL 脚本 在已有数据表的基础上进行升级。鉴于这种情况，于是决定寻找数据库版本控制工具。</p><p>在Java这部分，对数据库版本控制的主要有两个工具：</p><ul><li>Flyway</li><li>Liquibase</li></ul><p>两个工具各有千秋，但是核心功能都是数据库的版本管理，这里主要来看 Flyway。就像我们使用 Git 来管理代码版本一样，Flyway 可以用来管理数据库版本。</p><p>Flyway官网地址：<a href="https://flywaydb.org" target="_blank" rel="noopener noreferrer">https://flywaydb.org</a></p><h2 id="flyway" tabindex="-1"><a class="header-anchor" href="#flyway"><span>Flyway</span></a></h2><p>todo</p><h2 id="liquibase" tabindex="-1"><a class="header-anchor" href="#liquibase"><span>Liquibase</span></a></h2><p>todo</p>',12)]))}const p=e(n,[["render",i],["__file","z_spring_boot_flyway.html.vue"]]),h=JSON.parse('{"path":"/springboot/z_spring_boot_flyway.html","title":"DB migration","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"写在前面","slug":"写在前面","link":"#写在前面","children":[]},{"level":2,"title":"Flyway","slug":"flyway","link":"#flyway","children":[]},{"level":2,"title":"Liquibase","slug":"liquibase","link":"#liquibase","children":[]}],"git":{"updatedTime":1752226181000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":1,"url":"https://github.com/Clarence"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":3,"url":"https://github.com/hello0709"}]},"filePathRelative":"springboot/z_spring_boot_flyway.md"}');export{p as comp,h as data};
