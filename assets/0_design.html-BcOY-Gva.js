import{_ as t,c as r,a as n,b as a,d as l,e as s,f as o,r as h,o as p}from"./app-B4nd40cH.js";const d={};function c(g,e){const i=h("RouteLink");return p(),r("div",null,[e[2]||(e[2]=n('<h1 id="_23种设计模式" tabindex="-1"><a class="header-anchor" href="#_23种设计模式"><span>23种设计模式</span></a></h1><h2 id="设计模式简介" tabindex="-1"><a class="header-anchor" href="#设计模式简介"><span>设计模式简介</span></a></h2><h2 id="一、单例模式" tabindex="-1"><a class="header-anchor" href="#一、单例模式"><span>一、单例模式</span></a></h2><p><strong>作用</strong>：保证类在 JVM 中只有一个实例，避免重复创建对象，节省资源。</p><p><strong>应用场景</strong>：</p><ul><li>Spring Bean 默认是单例的</li><li>数据库连接池（HikariCP、Druid）</li><li>Redis、线程池、日志管理（Logback）</li></ul>',6)),a("blockquote",null,[a("p",null,[e[1]||(e[1]=l("参考代码：")),s(i,{to:"/interview/0_java#十二、写出几种单例模式实现"},{default:o(()=>e[0]||(e[0]=[l("单例模式的几种实现")])),_:1})])]),e[3]||(e[3]=n('<h2 id="二、工厂模式" tabindex="-1"><a class="header-anchor" href="#二、工厂模式"><span>二、工厂模式</span></a></h2><p><strong>作用</strong>：通过工厂创建对象，解耦实例化过程，便于扩展。</p><p><strong>应用场景</strong>：</p><ul><li>Spring BeanFactory / ApplicationContext（Spring IOC 容器）</li><li>JDBC DriverManager.getConnection()</li><li>日志框架（Logback/SLF4J）</li></ul><h2 id="三、策略模式" tabindex="-1"><a class="header-anchor" href="#三、策略模式"><span>三、策略模式</span></a></h2><p><strong>作用</strong>：定义一组算法，让它们可以相互替换，提高代码灵活性。</p><p><strong>应用场景</strong>：</p><ul><li>Spring Security 认证策略</li><li>支付方式选择（支付宝/微信支付）</li><li>日志格式化策略（JSON/XML）</li></ul><h2 id="四、责任链模式" tabindex="-1"><a class="header-anchor" href="#四、责任链模式"><span>四、责任链模式</span></a></h2><p><strong>作用</strong>：将请求沿着处理链传递，多个处理者可对其进行处理。</p><p><strong>应用场景</strong>：</p><ul><li>Spring Security 过滤器（FilterChain）</li><li>Netty 责任链（ChannelPipeline）</li><li>日志处理（不同级别日志）</li></ul><h2 id="未完待续" tabindex="-1"><a class="header-anchor" href="#未完待续"><span>未完待续</span></a></h2>',13))])}const m=t(d,[["render",c],["__file","0_design.html.vue"]]),f=JSON.parse('{"path":"/design-patterns/0_design.html","title":"23种设计模式","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"设计模式简介","slug":"设计模式简介","link":"#设计模式简介","children":[]},{"level":2,"title":"一、单例模式","slug":"一、单例模式","link":"#一、单例模式","children":[]},{"level":2,"title":"二、工厂模式","slug":"二、工厂模式","link":"#二、工厂模式","children":[]},{"level":2,"title":"三、策略模式","slug":"三、策略模式","link":"#三、策略模式","children":[]},{"level":2,"title":"四、责任链模式","slug":"四、责任链模式","link":"#四、责任链模式","children":[]},{"level":2,"title":"未完待续","slug":"未完待续","link":"#未完待续","children":[]}],"git":{"updatedTime":1745686292000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":4,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":3,"url":"https://github.com/hanchen"}]},"filePathRelative":"design-patterns/0_design.md"}');export{m as comp,f as data};
