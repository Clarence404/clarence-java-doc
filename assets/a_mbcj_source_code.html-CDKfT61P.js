import{_ as s,c as a,a as e,o as l}from"./app-JZtUM-Yo.js";const p={};function t(i,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="mysql-binlog-connect-java-源码" tabindex="-1"><a class="header-anchor" href="#mysql-binlog-connect-java-源码"><span>Mysql-binlog-connect-java 源码</span></a></h1><h2 id="一、核心类-binarylogclient" tabindex="-1"><a class="header-anchor" href="#一、核心类-binarylogclient"><span>一、核心类：BinaryLogClient</span></a></h2><p>BinaryLogClient 是一个功能完整的 MySQL 二进制日志客户端，主要特点包括：</p><h3 id="_1、核心功能" tabindex="-1"><a class="header-anchor" href="#_1、核心功能"><span>1、核心功能</span></a></h3><ul><li>实时数据同步：监听 MySQL binlog 事件，获取数据库变更</li><li>多数据库支持：支持 MySQL 和 MariaDB</li><li>GTID 支持：完整的全局事务标识符支持</li><li>SSL 安全连接：多种 SSL 模式支持</li><li>自动重连：内置保活和重连机制</li></ul><h3 id="_2、架构设计" tabindex="-1"><a class="header-anchor" href="#_2、架构设计"><span>2、架构设计</span></a></h3><ul><li>事件驱动：基于监听器模式处理事件</li><li>线程安全：使用 CopyOnWriteArrayList 和锁机制</li><li>资源管理：完善的连接和线程生命周期管理</li><li>错误处理：全面的异常处理和恢复机制</li></ul><h3 id="_3、使用场景" tabindex="-1"><a class="header-anchor" href="#_3、使用场景"><span>3、使用场景</span></a></h3><ul><li>数据同步和复制</li><li>实时数据变更监控</li><li>数据备份和恢复</li><li>数据分析和审计</li><li>这个客户端库为 Java 应用程序提供了与 MySQL 二进制日志交互的完整解决方案，是构建数据同步、实时监控等系统的重要基础组件。</li></ul><h2 id="二、核心方法-connect" tabindex="-1"><a class="header-anchor" href="#二、核心方法-connect"><span>二、核心方法 connect</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 获取连接锁，防止重复连接</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connectLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;BinaryLogClient is already connected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 2. 建立网络连接</span></span>
<span class="line">        channel <span class="token operator">=</span> <span class="token function">openChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 3. 接收服务器问候包</span></span>
<span class="line">        <span class="token class-name">GreetingPacket</span> greetingPacket <span class="token operator">=</span> <span class="token function">receiveGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 4. 解析数据库版本</span></span>
<span class="line">        <span class="token function">resolveDatabaseVersion</span><span class="token punctuation">(</span>greetingPacket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 5. 尝试升级到 SSL（如果需要）</span></span>
<span class="line">        <span class="token function">tryUpgradeToSSL</span><span class="token punctuation">(</span>greetingPacket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 6. 进行身份认证</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Authenticator</span><span class="token punctuation">(</span>greetingPacket<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> schema<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 7. 设置连接参数</span></span>
<span class="line">        <span class="token function">setupConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 8. 请求二进制日志流</span></span>
<span class="line">        <span class="token function">requestBinaryLogStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 9. 开始监听事件</span></span>
<span class="line">        <span class="token function">listenForEventPackets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        connectLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、完整流程图" tabindex="-1"><a class="header-anchor" href="#三、完整流程图"><span>三、完整流程图</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid" data-title="mermaid"><pre><code><span class="line"><span class="token keyword">graph</span> TD</span>
<span class="line">    A<span class="token text string">[客户端启动]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[注册监听器]</span></span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> C<span class="token text string">[调用 connect]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> D<span class="token text string">[建立网络连接]</span></span>
<span class="line">    D <span class="token arrow operator">--&gt;</span> E<span class="token text string">[身份认证]</span></span>
<span class="line">    E <span class="token arrow operator">--&gt;</span> F<span class="token text string">[触发 onConnect]</span></span>
<span class="line">    F <span class="token arrow operator">--&gt;</span> G<span class="token text string">[开始监听事件]</span></span>
<span class="line">    G <span class="token arrow operator">--&gt;</span> H<span class="token text string">[接收数据包]</span></span>
<span class="line">    H <span class="token arrow operator">--&gt;</span> I<span class="token text string">{解析事件}</span></span>
<span class="line">    I <span class="token arrow operator">--&gt;</span><span class="token label property">|成功|</span> J<span class="token text string">[触发 onEvent]</span></span>
<span class="line">    I <span class="token arrow operator">--&gt;</span><span class="token label property">|失败|</span> K<span class="token text string">[触发 onEventDeserializationFailure]</span></span>
<span class="line">    J <span class="token arrow operator">--&gt;</span> L<span class="token text string">[更新位置信息]</span></span>
<span class="line">    L <span class="token arrow operator">--&gt;</span> H</span>
<span class="line">    K <span class="token arrow operator">--&gt;</span> H</span>
<span class="line">    H <span class="token arrow operator">--&gt;</span> M<span class="token text string">{连接状态}</span></span>
<span class="line">    M <span class="token arrow operator">--&gt;</span><span class="token label property">|正常|</span> H</span>
<span class="line">    M <span class="token arrow operator">--&gt;</span><span class="token label property">|异常|</span> N<span class="token text string">[触发 onCommunicationFailure]</span></span>
<span class="line">    M <span class="token arrow operator">--&gt;</span><span class="token label property">|断开|</span> O<span class="token text string">[触发 onDisconnect]</span></span>
<span class="line">    N <span class="token arrow operator">--&gt;</span> P<span class="token text string">[尝试重连]</span></span>
<span class="line">    P <span class="token arrow operator">--&gt;</span> D</span>
<span class="line">    O <span class="token arrow operator">--&gt;</span> Q<span class="token text string">[结束]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="未完待续" tabindex="-1"><a class="header-anchor" href="#未完待续"><span>未完待续...</span></a></h2>`,14)]))}const o=s(p,[["render",t],["__file","a_mbcj_source_code.html.vue"]]),r=JSON.parse('{"path":"/database/a_mbcj_source_code.html","title":"Mysql-binlog-connect-java 源码","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、核心类：BinaryLogClient","slug":"一、核心类-binarylogclient","link":"#一、核心类-binarylogclient","children":[{"level":3,"title":"1、核心功能","slug":"_1、核心功能","link":"#_1、核心功能","children":[]},{"level":3,"title":"2、架构设计","slug":"_2、架构设计","link":"#_2、架构设计","children":[]},{"level":3,"title":"3、使用场景","slug":"_3、使用场景","link":"#_3、使用场景","children":[]}]},{"level":2,"title":"二、核心方法 connect","slug":"二、核心方法-connect","link":"#二、核心方法-connect","children":[]},{"level":2,"title":"三、完整流程图","slug":"三、完整流程图","link":"#三、完整流程图","children":[]},{"level":2,"title":"未完待续...","slug":"未完待续","link":"#未完待续","children":[]}],"git":{"updatedTime":1759197629000,"contributors":[{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hello0709"}]},"filePathRelative":"database/a_mbcj_source_code.md"}');export{o as comp,r as data};
