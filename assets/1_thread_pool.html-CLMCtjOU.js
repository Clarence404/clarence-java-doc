import{_ as p,c as t,b as s,d as a,e as l,f as o,a as c,r as i,o as u}from"./app-LqpmEyIr.js";const r="/clarence-java-doc/assets/ThreadPoolExecutor-DF2zDfJP.png",d="/clarence-java-doc/assets/work_process-CxEna_H_.png",k={};function m(v,n){const e=i("RouteLink");return u(),t("div",null,[n[3]||(n[3]=s("h1",{id:"threadpool",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#threadpool"},[s("span",null,"ThreadPool")])],-1)),s("p",null,[n[1]||(n[1]=a("关于Executor的介绍，在 ")),l(e,{to:"/java/1_base#八、线程池基础-executors"},{default:o(()=>n[0]||(n[0]=[a("Java基础-线程池基础（Executors）")])),_:1}),n[2]||(n[2]=a(" 已经讲述过，此处只着重介绍 ThreadPoolExecutor相关的处理方案，以下为参考文章："))]),n[4]||(n[4]=c('<blockquote><p><a href="https://mp.weixin.qq.com/s/xWbSPHJG_TztJpM4Pv9knw" target="_blank" rel="noopener noreferrer">程序员老猫-背会了常见的几个线程池用法，结果被问翻</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/7ub5RhxfuklzYsa84tGAzQ" target="_blank" rel="noopener noreferrer">程序员追风-面试官：线程池灵魂8连问，你挡的住吗？</a></p></blockquote><h2 id="一、什么是线程池" tabindex="-1"><a class="header-anchor" href="#一、什么是线程池"><span>一、什么是线程池？</span></a></h2><p>说到 <strong>线程池</strong>，其实我们要先聊到 <strong>池化技术</strong>。</p><p>池化技术：我们将资源或者任务放入池子，使用时从池中取，用完之后交给池子管理。通过优化资源分配的效率，达到性能的调优。</p><p><strong>池化技术优点</strong>：</p><ul><li>资源被重复使用，减少了资源在分配销毁过程中的系统的调度消耗。</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>比如，在IO密集型的服务器上，并发处理过程中的子线程或子进程的 创建和销毁过程，带来的系统开销将是难以接受的。 所以在业务实现上，通常把一些资源预先分配好，如线程池，数据库连接池，Redis连接池， HTTP连接池等，来减少系统消耗，提升系统性能。</p></div><ul><li><p>池化技术分配资源，会集中分配，这样有效避免了碎片化的问题。</p></li><li><p>可以对资源的整体使用做限制，相关资源预分配且只在预分配后生成，后续不再动态添加，从而限制了整个系统对资源的使用上限。</p></li></ul><p>所以我们说线程池是 <strong>提升线程可重复利用率、可控性的池化技术的一种。</strong></p><h2 id="二、线程池的底层原理" tabindex="-1"><a class="header-anchor" href="#二、线程池的底层原理"><span>二、线程池的底层原理</span></a></h2><h3 id="_1、类继承视图" tabindex="-1"><a class="header-anchor" href="#_1、类继承视图"><span>1、类继承视图</span></a></h3><p><img src="'+r+`" alt="img.png"></p><h3 id="_2、构造函数说明" tabindex="-1"><a class="header-anchor" href="#_2、构造函数说明"><span>2、构造函数说明</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span></span>
<span class="line">                              <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span></span>
<span class="line">        maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span></span>
<span class="line">        maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span></span>
<span class="line">        keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> threadFactory <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span></span>
<span class="line">            <span class="token keyword">null</span> <span class="token operator">:</span></span>
<span class="line">            <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们来解释一下几个参数的含义：</p><ul><li><p><strong>corePoolSize</strong>：核心线程数。</p></li><li><p><strong>maximumPoolSize</strong>：最大线程数。</p></li><li><p><strong>keepAliveTime</strong>：线程池中线程的最大闲置生命周期。</p></li><li><p><strong>unit</strong>：针对keepAliveTime的时间单位。</p></li><li><p><strong>workQueue</strong>：阻塞队列。</p></li><li><p><strong>threadFactory</strong>：创建线程的线程工厂。</p></li><li><p><strong>handler</strong>：拒绝策略。</p></li></ul><h3 id="_3、工作流程概述" tabindex="-1"><a class="header-anchor" href="#_3、工作流程概述"><span>3、工作流程概述</span></a></h3><p><img src="`+d+`" alt="img.png"></p><div class="hint-container tip"><p class="hint-container-title">流程解析</p><ol><li><p>当发起任务时候，会计算线程池中存在的线程数量与核心线程数量（corePoolSize）进行比较，如果小于，则在线程池中创建线程，否则，进行下一步判断。</p></li><li><p>如果不满足条件1，则会将任务添加到阻塞队列中。等待线程池中的线程空闲下来后，获取队列中的任务进行执行。</p></li><li><p>但是条件2中如果阻塞队列满了之后，此时又会重新获取当前线程的数量和最大线程数(maximumPoolSize)进行比较，如果发现小于最大线程数，那么继续添加到线程池中即可。</p></li></ol><p>4.如果都不满足上述条件，那么此时会放到拒绝策略中。</p></div><h3 id="_4、execute核心流程" tabindex="-1"><a class="header-anchor" href="#_4、execute核心流程"><span>4、execute核心流程</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Executes the given task sometime in the future.  The task</span>
<span class="line"> * may execute in a new thread or in an existing pooled thread.</span>
<span class="line"> *</span>
<span class="line"> * If the task cannot be submitted for execution, either because this</span>
<span class="line"> * executor has been shutdown or because its capacity has been reached,</span>
<span class="line"> * the task is handled by the current <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">RejectedExecutionHandler</span></span></span><span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">command</span> the task to execute</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> at discretion of</span>
<span class="line"> *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">RejectedExecutionHandler</span></span></span><span class="token punctuation">}</span>, if the task</span>
<span class="line"> *         cannot be accepted for execution</span>
<span class="line"> * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">command</span></span><span class="token punctuation">}</span> is null</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Proceed in 3 steps:</span>
<span class="line">     *</span>
<span class="line">     * 1. If fewer than corePoolSize threads are running, try to</span>
<span class="line">     * start a new thread with the given command as its first</span>
<span class="line">     * task.  The call to addWorker atomically checks runState and</span>
<span class="line">     * workerCount, and so prevents false alarms that would add</span>
<span class="line">     * threads when it shouldn&#39;t, by returning false.</span>
<span class="line">     *</span>
<span class="line">     * 2. If a task can be successfully queued, then we still need</span>
<span class="line">     * to double-check whether we should have added a thread</span>
<span class="line">     * (because existing ones died since last checking) or that</span>
<span class="line">     * the pool shut down since entry into this method. So we</span>
<span class="line">     * recheck state and if necessary roll back the enqueuing if</span>
<span class="line">     * stopped, or start a new thread if there are none.</span>
<span class="line">     *</span>
<span class="line">     * 3. If we cannot queue task, then we try to add a new</span>
<span class="line">     * thread.  If it fails, we know we are shut down or saturated</span>
<span class="line">     * and so reject the task.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、blockingqueue" tabindex="-1"><a class="header-anchor" href="#_5、blockingqueue"><span>5、BlockingQueue</span></a></h3><h3 id="_6、拒绝策略说明" tabindex="-1"><a class="header-anchor" href="#_6、拒绝策略说明"><span>6、拒绝策略说明</span></a></h3><h3 id="_7、线程池最优参数" tabindex="-1"><a class="header-anchor" href="#_7、线程池最优参数"><span>7、线程池最优参数</span></a></h3><ul><li><p>常见的区分cpu和io密集型</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/116426107" target="_blank" rel="noopener noreferrer">计算线程池场景分析</a></p></li></ul><h2 id="三、动态线程池" tabindex="-1"><a class="header-anchor" href="#三、动态线程池"><span>三、动态线程池</span></a></h2><p>此处查看详情：<a href="https://dynamictp.cn/" target="_blank" rel="noopener noreferrer">dynamictp</a></p>`,28))])}const b=p(k,[["render",m],["__file","1_thread_pool.html.vue"]]),g=JSON.parse('{"path":"/high-con/1_thread_pool.html","title":"ThreadPool","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、什么是线程池？","slug":"一、什么是线程池","link":"#一、什么是线程池","children":[]},{"level":2,"title":"二、线程池的底层原理","slug":"二、线程池的底层原理","link":"#二、线程池的底层原理","children":[{"level":3,"title":"1、类继承视图","slug":"_1、类继承视图","link":"#_1、类继承视图","children":[]},{"level":3,"title":"2、构造函数说明","slug":"_2、构造函数说明","link":"#_2、构造函数说明","children":[]},{"level":3,"title":"3、工作流程概述","slug":"_3、工作流程概述","link":"#_3、工作流程概述","children":[]},{"level":3,"title":"4、execute核心流程","slug":"_4、execute核心流程","link":"#_4、execute核心流程","children":[]},{"level":3,"title":"5、BlockingQueue","slug":"_5、blockingqueue","link":"#_5、blockingqueue","children":[]},{"level":3,"title":"6、拒绝策略说明","slug":"_6、拒绝策略说明","link":"#_6、拒绝策略说明","children":[]},{"level":3,"title":"7、线程池最优参数","slug":"_7、线程池最优参数","link":"#_7、线程池最优参数","children":[]}]},{"level":2,"title":"三、动态线程池","slug":"三、动态线程池","link":"#三、动态线程池","children":[]}],"git":{"updatedTime":1752557729000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":6,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":8,"url":"https://github.com/Clarence"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hello0709"}]},"filePathRelative":"high-con/1_thread_pool.md"}');export{b as comp,g as data};
