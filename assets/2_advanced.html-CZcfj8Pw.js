import{_ as o,c,b as s,d as a,e as p,f as e,a as l,r as i,o as u}from"./app-CukF5kVo.js";const r={};function k(d,n){const t=i("RouteLink");return u(),c("div",null,[n[12]||(n[12]=s("h1",{id:"java-高级",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#java-高级"},[s("span",null,"Java 高级")])],-1)),n[13]||(n[13]=s("h2",{id:"一、泛型-generics",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一、泛型-generics"},[s("span",null,"一、泛型（Generics）")])],-1)),s("p",null,[n[1]||(n[1]=a("详见：")),p(t,{to:"/interview/0_java#十四、说说你对泛型的理解"},{default:e(()=>n[0]||(n[0]=[a("Java总结-Java：十四、说说你对泛型的理解")])),_:1})]),n[14]||(n[14]=s("h2",{id:"二、lambda与函数式编程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二、lambda与函数式编程"},[s("span",null,"二、Lambda与函数式编程")])],-1)),n[15]||(n[15]=s("h3",{id:"_1、lambda-底层原理与-函数式接口",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1、lambda-底层原理与-函数式接口"},[s("span",null,"1、Lambda 底层原理与 函数式接口")])],-1)),s("p",null,[n[3]||(n[3]=a("详见：")),p(t,{to:"/interview/0_java#十五、说说-lambda-表达式的底层原理"},{default:e(()=>n[2]||(n[2]=[a(" Java总结-Java：十五、说说lambda表达式的底层原理")])),_:1})]),n[16]||(n[16]=l('<h3 id="_2、流式-api-stream-api-与集合框架" tabindex="-1"><a class="header-anchor" href="#_2、流式-api-stream-api-与集合框架"><span>2、流式 API（Stream API）与集合框架</span></a></h3><p>Java 8 引入的 <strong>Stream API</strong> 提供了一种 <strong>声明式、函数式风格</strong> 来处理集合数据的方式，使得对集合的操作更加简洁、清晰和易于并行处理。</p><p>Stream 支持丰富的链式操作，例如：<strong><code>map</code>、<code>filter</code>、<code>reduce</code>、<code>sorted</code>、<code>limit</code></strong> 等，通过对数据源的流水线处理，简化复杂逻辑的实现。</p><h4 id="✅-流的类型及其分类" tabindex="-1"><a class="header-anchor" href="#✅-流的类型及其分类"><span>✅ 流的类型及其分类</span></a></h4>',4)),s("p",null,[n[5]||(n[5]=a("详见：")),p(t,{to:"/interview/0_java#十六、说说java的stream"},{default:e(()=>n[4]||(n[4]=[a("Java总结-Java：说说Java的stream")])),_:1})]),n[17]||(n[17]=l(`<h4 id="✅-集合框架与-stream-的常见结合用法" tabindex="-1"><a class="header-anchor" href="#✅-集合框架与-stream-的常见结合用法"><span>✅ 集合框架与 Stream 的常见结合用法</span></a></h4><table><thead><tr><th>操作</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>创建流</td><td><code>list.stream()</code></td><td>从集合创建顺序流</td></tr><tr><td>遍历操作</td><td><code>stream.forEach(System.out::println)</code></td><td>对每个元素执行指定操作</td></tr><tr><td>过滤</td><td><code>stream.filter(x -&gt; x &gt; 10)</code></td><td>过滤符合条件的元素</td></tr><tr><td>映射转换</td><td><code>stream.map(String::toUpperCase)</code></td><td>元素转换成另一种形式</td></tr><tr><td>收集结果</td><td><code>stream.collect(Collectors.toList())</code></td><td>将流结果收集成列表、集合或 Map</td></tr><tr><td>聚合统计</td><td><code>stream.count()</code>, <code>stream.max()</code></td><td>聚合数据，如求和、计数、最大值等</td></tr></tbody></table><h4 id="✅-示例代码片段" tabindex="-1"><a class="header-anchor" href="#✅-示例代码片段"><span>✅ 示例代码片段</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> upperNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="✅-小结" tabindex="-1"><a class="header-anchor" href="#✅-小结"><span>✅ 小结</span></a></h4><ul><li>Stream 不存储数据，只是对数据的<strong>操作视图</strong>。</li><li>Stream 操作分为<strong>中间操作（lazy）<strong>与</strong>终结操作（eager）</strong>。</li><li>利用 Stream 可有效提升集合处理代码的<strong>可读性、可维护性</strong>，同时方便实现<strong>并行化</strong>操作。</li></ul><p>这是对你原始内容的<strong>优化版</strong>，增强了结构性、专业性和表达完整度，并补充了关键点说明与建议阅读路线：</p><h2 id="三、多线程与并发编程" tabindex="-1"><a class="header-anchor" href="#三、多线程与并发编程"><span>三、多线程与并发编程</span></a></h2><h3 id="_1、aqs-原理-多线程基础" tabindex="-1"><a class="header-anchor" href="#_1、aqs-原理-多线程基础"><span>1、AQS 原理 - 多线程基础</span></a></h3><p>AQS（AbstractQueuedSynchronizer）是 JUC 包中多种同步器（如 ReentrantLock、Semaphore、CountDownLatch 等）的基础框架，底层通过一个 FIFO 的等待队列管理线程竞争资源。</p><ul><li>推荐阅读：<a href="https://mp.weixin.qq.com/s/kvmX6-Iz38mG5907itEb2w" target="_blank" rel="noopener noreferrer">30 张图彻底掌握 AQS - 苏三说技术</a></li></ul><h3 id="_2、线程池与-executor-框架" tabindex="-1"><a class="header-anchor" href="#_2、线程池与-executor-框架"><span>2、线程池与 Executor 框架</span></a></h3>`,12)),s("blockquote",null,[s("p",null,[n[7]||(n[7]=a("📚 详见：")),p(t,{to:"/high-concurrency/1_thread_pool.html"},{default:e(()=>n[6]||(n[6]=[a("ThreadPool")])),_:1})])]),n[18]||(n[18]=l('<h3 id="_3、synchronized-与锁机制" tabindex="-1"><a class="header-anchor" href="#_3、synchronized-与锁机制"><span>3、<code>synchronized</code> 与锁机制</span></a></h3><p><code>synchronized</code> 是 Java 提供的内置同步机制，用于实现对共享资源的互斥访问。其底层依赖 JVM 实现，随着 JDK 的优化已具备较好的性能。</p><p>锁的种类：</p><ul><li><strong>悲观锁/乐观锁</strong>（如 <code>StampedLock</code>）</li><li><strong>可重入锁</strong>（<code>ReentrantLock</code>）</li><li><strong>读写锁</strong>（<code>ReentrantReadWriteLock</code>）</li><li><strong>自旋锁、偏向锁、轻量级锁</strong>（JVM 优化策略）</li></ul>',4)),s("blockquote",null,[s("p",null,[n[9]||(n[9]=a("📚 详见：")),p(t,{to:"/high-concurrency/0_concurrent#二、juc-lock"},{default:e(()=>n[8]||(n[8]=[a("Java并发：二、JUC Lock")])),_:1})])]),n[19]||(n[19]=l(`<h3 id="_4、volatile-与内存可见性" tabindex="-1"><a class="header-anchor" href="#_4、volatile-与内存可见性"><span>4、<code>volatile</code> 与内存可见性</span></a></h3><ul><li><code>volatile</code> 关键字保证变量在多个线程间的<strong>可见性</strong>，即一个线程修改了变量，其他线程立即可见。</li><li>同时 <code>volatile</code> 禁止指令重排序，保证读写顺序的有序性。</li><li><strong>不保证原子性</strong>，比如 <code>volatile int count; count++</code> 不是线程安全操作。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">VolatileExample</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 其他线程立即看到 flag 变化</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Flag is true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5、final-与对象安全发布" tabindex="-1"><a class="header-anchor" href="#_5、final-与对象安全发布"><span>5、<code>final</code> 与对象安全发布</span></a></h3><ul><li><code>final</code> 修饰的字段在构造函数执行完成后，其值对其他线程<strong>是可见且不可变的</strong>。</li><li>避免构造过程中出现<strong>指令重排序</strong>带来的对象未初始化完毕即被引用的问题。</li><li>是实现线程安全不可变对象的重要保证。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">FinalExample</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">FinalExample</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 其他线程能看到构造完成后的最终值</span></span>
<span class="line">        <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5、completablefuture" tabindex="-1"><a class="header-anchor" href="#_5、completablefuture"><span>5、<code>CompletableFuture</code></span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s <span class="token operator">+</span> <span class="token string">&quot; World&quot;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">              <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上例演示异步获取字符串，链式调用转换并消费结果，支持异常处理。</li></ul><hr><h3 id="_6、futuretask-示例" tabindex="-1"><a class="header-anchor" href="#_6、futuretask-示例"><span>6、<code>FutureTask</code> 示例</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string">&quot;Task Result&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Waiting for result...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 阻塞等待结果</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Result: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7、jdk-21-虚拟线程示例" tabindex="-1"><a class="header-anchor" href="#_7、jdk-21-虚拟线程示例"><span>7、JDK 21 虚拟线程示例</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VirtualThreadDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Thread</span> vt <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">startVirtualThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from virtual thread: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            vt<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>虚拟线程更轻量，适合大量并发 IO 任务。</li></ul><hr><h3 id="_8、并发调优与问题排查示例" tabindex="-1"><a class="header-anchor" href="#_8、并发调优与问题排查示例"><span>8、并发调优与问题排查示例</span></a></h3><ul><li><strong>死锁</strong>示例（要避免的典型代码）：</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadlockDemo</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createDeadlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread 1 acquired both locks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread 2 acquired both locks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">DeadlockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createDeadlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>工具使用建议</strong>：</p><ul><li><strong>JVisualVM</strong>：可视化线程和堆信息监控</li><li><strong>Java Flight Recorder (JFR)</strong>：轻量级性能监控分析</li><li><strong>Arthas</strong>：在线诊断，查看线程栈、锁信息</li></ul></li></ul><p>当然，以下是对你“反射机制”与“注解与元编程”两个章节的补充，涵盖概念、使用方式、示例与常见应用，结构清晰、实用性强：</p><hr><h2 id="四、反射机制-reflection" tabindex="-1"><a class="header-anchor" href="#四、反射机制-reflection"><span>四、反射机制（Reflection）</span></a></h2>`,26)),s("ul",null,[s("li",null,[n[11]||(n[11]=a("详见： ")),p(t,{to:"/interview/0_java.html#十、反射的基本原理"},{default:e(()=>n[10]||(n[10]=[a("反射的基本原理")])),_:1})])]),n[20]||(n[20]=l(`<h2 id="五、注解与元编程" tabindex="-1"><a class="header-anchor" href="#五、注解与元编程"><span>五、注解与元编程</span></a></h2><h3 id="_1、注解的定义与使用" tabindex="-1"><a class="header-anchor" href="#_1、注解的定义与使用"><span>1、注解的定义与使用</span></a></h3><p>注解是 Java 5 引入的一种元数据机制，用于修饰类、方法、字段等，常用于配置和标记。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、自定义注解与反射结合" tabindex="-1"><a class="header-anchor" href="#_2、自定义注解与反射结合"><span>2、自定义注解与反射结合</span></a></h3><p>结合反射获取注解信息，实现动态行为：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;doSomething&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">MyAnnotation</span> annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;注解值: &quot;</span> <span class="token operator">+</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、注解处理器-annotation-processor" tabindex="-1"><a class="header-anchor" href="#_3、注解处理器-annotation-processor"><span>3、注解处理器（Annotation Processor）</span></a></h3><p>用于在编译期处理注解，生成代码或校验逻辑，广泛应用于 <strong>Lombok、Dagger、AutoValue</strong> 等库。</p><ul><li>基于 <code>javax.annotation.processing.AbstractProcessor</code></li><li>通过 <code>@SupportedAnnotationTypes</code>、<code>@SupportedSourceVersion</code> 指定处理器信息</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SupportedAnnotationTypes</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.MyAnnotation&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SupportedSourceVersion</span><span class="token punctuation">(</span><span class="token class-name">SourceVersion</span><span class="token punctuation">.</span><span class="token constant">RELEASE_17</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnotationProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProcessor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token punctuation">&gt;</span></span> annotations<span class="token punctuation">,</span> <span class="token class-name">RoundEnvironment</span> roundEnv<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> element <span class="token operator">:</span> roundEnv<span class="token punctuation">.</span><span class="token function">getElementsAnnotatedWith</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            processingEnv<span class="token punctuation">.</span><span class="token function">getMessager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">NOTE</span><span class="token punctuation">,</span> <span class="token string">&quot;处理了: &quot;</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用工具</strong>：JavaPoet 可用于生成类、方法、字段等源码结构。</p>`,14))])}const m=o(r,[["render",k],["__file","2_advanced.html.vue"]]),b=JSON.parse('{"path":"/java/2_advanced.html","title":"Java 高级","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、泛型（Generics）","slug":"一、泛型-generics","link":"#一、泛型-generics","children":[]},{"level":2,"title":"二、Lambda与函数式编程","slug":"二、lambda与函数式编程","link":"#二、lambda与函数式编程","children":[{"level":3,"title":"1、Lambda 底层原理与 函数式接口","slug":"_1、lambda-底层原理与-函数式接口","link":"#_1、lambda-底层原理与-函数式接口","children":[]},{"level":3,"title":"2、流式 API（Stream API）与集合框架","slug":"_2、流式-api-stream-api-与集合框架","link":"#_2、流式-api-stream-api-与集合框架","children":[]}]},{"level":2,"title":"三、多线程与并发编程","slug":"三、多线程与并发编程","link":"#三、多线程与并发编程","children":[{"level":3,"title":"1、AQS 原理 - 多线程基础","slug":"_1、aqs-原理-多线程基础","link":"#_1、aqs-原理-多线程基础","children":[]},{"level":3,"title":"2、线程池与 Executor 框架","slug":"_2、线程池与-executor-框架","link":"#_2、线程池与-executor-框架","children":[]},{"level":3,"title":"3、synchronized 与锁机制","slug":"_3、synchronized-与锁机制","link":"#_3、synchronized-与锁机制","children":[]},{"level":3,"title":"4、volatile 与内存可见性","slug":"_4、volatile-与内存可见性","link":"#_4、volatile-与内存可见性","children":[]},{"level":3,"title":"5、final 与对象安全发布","slug":"_5、final-与对象安全发布","link":"#_5、final-与对象安全发布","children":[]},{"level":3,"title":"5、CompletableFuture","slug":"_5、completablefuture","link":"#_5、completablefuture","children":[]},{"level":3,"title":"6、FutureTask 示例","slug":"_6、futuretask-示例","link":"#_6、futuretask-示例","children":[]},{"level":3,"title":"7、JDK 21 虚拟线程示例","slug":"_7、jdk-21-虚拟线程示例","link":"#_7、jdk-21-虚拟线程示例","children":[]},{"level":3,"title":"8、并发调优与问题排查示例","slug":"_8、并发调优与问题排查示例","link":"#_8、并发调优与问题排查示例","children":[]}]},{"level":2,"title":"四、反射机制（Reflection）","slug":"四、反射机制-reflection","link":"#四、反射机制-reflection","children":[]},{"level":2,"title":"五、注解与元编程","slug":"五、注解与元编程","link":"#五、注解与元编程","children":[{"level":3,"title":"1、注解的定义与使用","slug":"_1、注解的定义与使用","link":"#_1、注解的定义与使用","children":[]},{"level":3,"title":"2、自定义注解与反射结合","slug":"_2、自定义注解与反射结合","link":"#_2、自定义注解与反射结合","children":[]},{"level":3,"title":"3、注解处理器（Annotation Processor）","slug":"_3、注解处理器-annotation-processor","link":"#_3、注解处理器-annotation-processor","children":[]}]}],"git":{"updatedTime":1748267492000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":16,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":6,"url":"https://github.com/hanchen"}]},"filePathRelative":"java/2_advanced.md"}');export{m as comp,b as data};
