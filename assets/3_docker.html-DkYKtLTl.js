import{_ as s,c as a,a as e,o as l}from"./app-DKWraIBo.js";const i="/clarence-java-doc/assets/clash_config-CwfpHvCj.png",c="/clarence-java-doc/assets/bridge-B03reanc.png",p="/clarence-java-doc/assets/host-CkGhpnHK.png",o="/clarence-java-doc/assets/container-BEMtEPlk.png",t="/clarence-java-doc/assets/container_warning-DhX3PrEY.png",r={};function d(m,n){return l(),a("div",null,n[0]||(n[0]=[e('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><h2 id="一、docker-镜像问题" tabindex="-1"><a class="header-anchor" href="#一、docker-镜像问题"><span>一、Docker 镜像问题</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>2024年6月开始，国内的常用 daemon.json 地址失效</p></div><h3 id="_1、可用网址汇总" tabindex="-1"><a class="header-anchor" href="#_1、可用网址汇总"><span>1、可用网址汇总</span></a></h3><p>点击下方地址查看教程：</p><p><a href="https://1ms.run" target="_blank" rel="noopener noreferrer">https://1ms.run</a></p><p><a href="https://xuanyuan.me/" target="_blank" rel="noopener noreferrer">https://xuanyuan.me/</a></p><h3 id="_2、常用解决方案" tabindex="-1"><a class="header-anchor" href="#_2、常用解决方案"><span>2、常用解决方案</span></a></h3><h4 id="_2-1、魔法下载后-手动上传-最笨方案" tabindex="-1"><a class="header-anchor" href="#_2-1、魔法下载后-手动上传-最笨方案"><span>2.1、魔法下载后，手动上传（最笨方案）</span></a></h4><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>这是本人开始的思路，最终发现docker hub 并不支持此方案，除非使用 <strong>Docker Registry</strong> 进行交互来获得镜像层的内容并手动下载，但这种方法复杂且不常用</p></div><h4 id="_2-2、基于基线环境重新导入" tabindex="-1"><a class="header-anchor" href="#_2-2、基于基线环境重新导入"><span>2.2、基于基线环境重新导入</span></a></h4><p>文如其意，直接使用正式环境中已经存在的镜像，随后将 docker image 导出，再次导入即可；</p><h4 id="_2-3、魔法代理方式" tabindex="-1"><a class="header-anchor" href="#_2-3、魔法代理方式"><span>2.3、魔法代理方式</span></a></h4><ul><li>VMware 中的 Docker 使用魔法方式</li></ul><div class="hint-container tip"><p class="hint-container-title">必要前提条件</p><p>Vmware使用NAT模式，保证主机和虚拟机在一个局域网下</p></div><p><a href="https://clashcn.com/" target="_blank" rel="noopener noreferrer">Clash</a> 的配置如下：</p><p><img src="'+i+'" alt="img.png"></p><div class="hint-container tip"><p class="hint-container-title">建议</p><p>设置完成后，建议清空 daemon.json 内容，当然也可以保留（不过会使得Docker去所有的daemon地址搜索，降低 pull 速度）</p></div><ul><li>Hyper-V 中的Docker使用魔法方式</li></ul><p>使用clash，保证和 Hyper-V 宿主机在同个局域网即可，原理与 <strong>VMware</strong> 相同</p><ul><li>Docker直接使用代理方式实现</li></ul><div class="hint-container tip"><p class="hint-container-title">Todo</p><p>使用指定地址的代理实现，目前只是构思阶段，未完待续</p></div><h2 id="二、docker-网络详解" tabindex="-1"><a class="header-anchor" href="#二、docker-网络详解"><span>二、Docker 网络详解</span></a></h2><p>默认情况下，<strong>Docker0</strong>为默认新增的<strong>Bridge</strong>网络，<strong>Docker0</strong>就是桥，将其所有的container链接起来，Docker的container可以直接访问外部网络， 内部之间的网络也是可以ping通的（默认不能ping主机名）；</p><h3 id="_1、bridge" tabindex="-1"><a class="header-anchor" href="#_1、bridge"><span>1、Bridge</span></a></h3><p><img src="'+c+'" alt="img.png"></p><h3 id="_2、host" tabindex="-1"><a class="header-anchor" href="#_2、host"><span>2、Host</span></a></h3><p>注意：此模式下，各个容器不存在IP地址，只能通过端口或其他机制进行通信；</p><p><img src="'+p+'" alt="img_1.png"></p><h3 id="_3、none" tabindex="-1"><a class="header-anchor" href="#_3、none"><span>3、None</span></a></h3><p>内部容器，没有网卡、路由、防火墙、IP、网关，端口等</p><h3 id="_4、container" tabindex="-1"><a class="header-anchor" href="#_4、container"><span>4、Container</span></a></h3><p>bridge和Host模式的结合体，存在Docker0网络，后续指定其网关；</p><p><img src="'+o+'" alt="img_2.png"></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这种方式官方已不推荐使用，并且在未来版本可能会被移除，所以这里不作为重点讲解，感兴趣可自行了解。</p><p>官网警告信息：<a href="https://docs.docker.com/network" target="_blank" rel="noopener noreferrer">https://docs.docker.com/network</a></p></div><p><img src="'+t+`" alt="img_3.png"></p><p>好的，下面是对你博客大纲中“<strong>三、Docker 常用命令</strong>” 和 “<strong>四、Docker Compose</strong>” 两节内容的详细补充：</p><h2 id="三、docker-常用命令" tabindex="-1"><a class="header-anchor" href="#三、docker-常用命令"><span>三、Docker 常用命令</span></a></h2><h3 id="_1-镜像相关" tabindex="-1"><a class="header-anchor" href="#_1-镜像相关"><span>1. 镜像相关</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看本地镜像</span></span>
<span class="line"><span class="token function">docker</span> images</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 搜索镜像</span></span>
<span class="line"><span class="token function">docker</span> search nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 拉取镜像</span></span>
<span class="line"><span class="token function">docker</span> pull nginx:latest</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除镜像</span></span>
<span class="line"><span class="token function">docker</span> rmi nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-容器相关" tabindex="-1"><a class="header-anchor" href="#_2-容器相关"><span>2. 容器相关</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看正在运行的容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">ps</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看所有容器（包括已停止）</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建并启动容器（后台运行）</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> my-nginx <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建并进入交互式容器</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> my-centos centos /bin/bash</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 停止容器</span></span>
<span class="line"><span class="token function">docker</span> stop my-nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启动已停止的容器</span></span>
<span class="line"><span class="token function">docker</span> start my-nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">rm</span> my-nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看容器日志</span></span>
<span class="line"><span class="token function">docker</span> logs my-nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看容器内的进程</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">top</span> my-nginx</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 进入运行中的容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-nginx /bin/bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-网络命令" tabindex="-1"><a class="header-anchor" href="#_3-网络命令"><span>3. 网络命令</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看网络</span></span>
<span class="line"><span class="token function">docker</span> network <span class="token function">ls</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看容器所属网络详情</span></span>
<span class="line"><span class="token function">docker</span> network inspect bridge</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-数据卷命令" tabindex="-1"><a class="header-anchor" href="#_4-数据卷命令"><span>4. 数据卷命令</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 创建数据卷</span></span>
<span class="line"><span class="token function">docker</span> volume create mydata</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看数据卷</span></span>
<span class="line"><span class="token function">docker</span> volume <span class="token function">ls</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除数据卷</span></span>
<span class="line"><span class="token function">docker</span> volume <span class="token function">rm</span> mydata</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、docker-compose-简介与使用" tabindex="-1"><a class="header-anchor" href="#四、docker-compose-简介与使用"><span>四、Docker Compose 简介与使用</span></a></h2><h3 id="_1-什么是-docker-compose" tabindex="-1"><a class="header-anchor" href="#_1-什么是-docker-compose"><span>1. 什么是 Docker Compose？</span></a></h3><p>Docker Compose 是一个用于<strong>定义和运行多个容器应用</strong>的工具，通过一个 <code>docker-compose.yml</code> 文件来配置服务、网络、数据卷等。</p><p>适用于微服务、多容器应用场景。</p><h3 id="_2-安装-docker-compose" tabindex="-1"><a class="header-anchor" href="#_2-安装-docker-compose"><span>2. 安装 Docker Compose</span></a></h3><p>如果你使用 Docker Desktop，则 Compose 已自带； Linux 可使用如下命令安装（以最新版本为例）：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-示例-docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#_3-示例-docker-compose-yml"><span>3. 示例 <code>docker-compose.yml</code></span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">web</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;8080:80&quot;</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> ./html<span class="token punctuation">:</span>/usr/share/nginx/html</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>alpine</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行命令：</p><ul><li><strong>重要前提</strong>：当前目录 存在 docker-compose.yml</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 构建 全部服务 并启动服务</span></span>
<span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 构建 指定多个服务 并启动服务</span></span>
<span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> 服务名1 服务名2</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 停止服务</span></span>
<span class="line"><span class="token function">docker-compose</span> down</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看服务状态</span></span>
<span class="line"><span class="token function">docker-compose</span> <span class="token function">ps</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看服务日志</span></span>
<span class="line"><span class="token function">docker-compose</span> logs</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-常用参数总结" tabindex="-1"><a class="header-anchor" href="#_4-常用参数总结"><span>4. 常用参数总结</span></a></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose up -d</code></td><td>后台启动所有服务</td></tr><tr><td><code>docker-compose down</code></td><td>停止并删除所有服务容器</td></tr><tr><td><code>docker-compose ps</code></td><td>查看服务状态</td></tr><tr><td><code>docker-compose logs</code></td><td>查看服务日志</td></tr><tr><td><code>docker-compose exec 服务名 /bin/bash</code></td><td>进入容器</td></tr><tr><td><code>docker-compose build</code></td><td>手动构建镜像（配合 Dockerfile 使用）</td></tr><tr><td><code>docker-compose -f yml文件名</code></td><td>运行指定的，非名为docker-compose.yml文件</td></tr></tbody></table><hr><h3 id="_5-docker-compose-应用场景" tabindex="-1"><a class="header-anchor" href="#_5-docker-compose-应用场景"><span>5. Docker Compose 应用场景</span></a></h3><ul><li>微服务系统（如 Web + DB + 缓存）</li><li>多环境部署（dev/test/prod）</li><li>一键本地开发环境搭建</li><li>GitLab CI/CD 中作为服务依赖</li></ul>`,63)]))}const k=s(r,[["render",d],["__file","3_docker.html.vue"]]),v=JSON.parse('{"path":"/cloud-native/3_docker.html","title":"Docker","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、Docker 镜像问题","slug":"一、docker-镜像问题","link":"#一、docker-镜像问题","children":[{"level":3,"title":"1、可用网址汇总","slug":"_1、可用网址汇总","link":"#_1、可用网址汇总","children":[]},{"level":3,"title":"2、常用解决方案","slug":"_2、常用解决方案","link":"#_2、常用解决方案","children":[]}]},{"level":2,"title":"二、Docker 网络详解","slug":"二、docker-网络详解","link":"#二、docker-网络详解","children":[{"level":3,"title":"1、Bridge","slug":"_1、bridge","link":"#_1、bridge","children":[]},{"level":3,"title":"2、Host","slug":"_2、host","link":"#_2、host","children":[]},{"level":3,"title":"3、None","slug":"_3、none","link":"#_3、none","children":[]},{"level":3,"title":"4、Container","slug":"_4、container","link":"#_4、container","children":[]}]},{"level":2,"title":"三、Docker 常用命令","slug":"三、docker-常用命令","link":"#三、docker-常用命令","children":[{"level":3,"title":"1. 镜像相关","slug":"_1-镜像相关","link":"#_1-镜像相关","children":[]},{"level":3,"title":"2. 容器相关","slug":"_2-容器相关","link":"#_2-容器相关","children":[]},{"level":3,"title":"3. 网络命令","slug":"_3-网络命令","link":"#_3-网络命令","children":[]},{"level":3,"title":"4. 数据卷命令","slug":"_4-数据卷命令","link":"#_4-数据卷命令","children":[]}]},{"level":2,"title":"四、Docker Compose 简介与使用","slug":"四、docker-compose-简介与使用","link":"#四、docker-compose-简介与使用","children":[{"level":3,"title":"1. 什么是 Docker Compose？","slug":"_1-什么是-docker-compose","link":"#_1-什么是-docker-compose","children":[]},{"level":3,"title":"2. 安装 Docker Compose","slug":"_2-安装-docker-compose","link":"#_2-安装-docker-compose","children":[]},{"level":3,"title":"3. 示例 docker-compose.yml","slug":"_3-示例-docker-compose-yml","link":"#_3-示例-docker-compose-yml","children":[]},{"level":3,"title":"4. 常用参数总结","slug":"_4-常用参数总结","link":"#_4-常用参数总结","children":[]},{"level":3,"title":"5. Docker Compose 应用场景","slug":"_5-docker-compose-应用场景","link":"#_5-docker-compose-应用场景","children":[]}]}],"git":{"updatedTime":1748089648000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":13,"url":"https://github.com/Clarence"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hello0709"}]},"filePathRelative":"cloud-native/3_docker.md"}');export{k as comp,v as data};
