import{_ as n,c as e,a as l,o as a}from"./app-B4nd40cH.js";const i={};function s(r,t){return a(),e("div",null,t[0]||(t[0]=[l('<h1 id="粘包与拆包" tabindex="-1"><a class="header-anchor" href="#粘包与拆包"><span>粘包与拆包</span></a></h1><p>在网络编程和数据传输中，“粘包”和“拆包”是两个常见的问题，尤其在TCP协议中。它们通常与数据的边界识别、数据包的接收和分割有关。</p><h3 id="_1、粘包-sticky-packet" tabindex="-1"><a class="header-anchor" href="#_1、粘包-sticky-packet"><span>1、<strong>粘包（Sticky Packet）</strong></span></a></h3><p><strong>概念</strong>：粘包问题发生在发送方连续发送多个数据包时，接收方无法正确区分每个数据包的边界，导致多个数据包被“粘”在一起一起接收。</p><p><strong>原因</strong>：</p><ul><li>TCP是流式协议，不保证消息边界。它只是保证数据的顺序和可靠性，不关心数据是如何被分割的。</li><li>发送方可能将多个小的数据包合并成一个大的数据包发送，而接收方在读取时把这些数据合并成一个单独的数据包处理，从而导致多个数据包“粘”在一起。</li></ul><p><strong>例子</strong>：</p><ul><li>发送方连续发送了两个数据包，A包和B包。</li><li>在网络传输过程中，两个数据包被合并成一个大的数据包传输。</li><li>接收方读取时，不能区分出A包和B包的边界，只会读取一个大的数据包，导致“粘包”现象。</li></ul><h3 id="_2、-拆包-packet-fragmentation" tabindex="-1"><a class="header-anchor" href="#_2、-拆包-packet-fragmentation"><span>2、 <strong>拆包（Packet Fragmentation）</strong></span></a></h3><p><strong>概念</strong>：拆包问题发生在一个较大的数据包被分割成多个小包进行传输，接收方在读取时将这些小包重新组装起来，但有时拆包的处理不当，可能导致数据被错误地分割或丢失。</p><p><strong>原因</strong>：</p><ul><li>发送方发送的数据包过大，超出了网络传输的最大包大小。TCP协议会自动将大数据包拆分为多个小包传输。</li><li>接收方在接收数据时，可能会因为读取不及时或读取不完整而导致无法正确地将拆开的数据包重新组装。</li></ul><p><strong>例子</strong>：</p><ul><li>发送方发送了一个大的数据包，超过了网络传输的最大允许大小（例如，MTU值）。</li><li>该数据包会被拆成多个小包发送。</li><li>接收方需要将这些小包按照正确的顺序进行组装，才能还原出完整的原始数据包。</li></ul><h3 id="_3、解决方案" tabindex="-1"><a class="header-anchor" href="#_3、解决方案"><span>3、解决方案</span></a></h3><p>由于TCP协议不保证消息边界，因此粘包和拆包是必须解决的问题。常见的解决方法有：</p><ol><li><p><strong>定长消息</strong>：发送方和接收方约定每个数据包的固定长度，接收方按固定长度读取数据。虽然这种方式简单，但不灵活，无法处理数据长度不固定的情况。</p></li><li><p><strong>分隔符</strong>：在每个数据包之间添加一个特殊的分隔符（如<code>\\n</code>、<code>\\0</code>等），接收方通过该分隔符来判断消息边界。例如HTTP协议中，使用特定的标识符（如 <code>\\r\\n\\r\\n</code>）来分隔不同的请求或响应。</p></li><li><p><strong>消息头+消息体</strong> ：在发送的数据包前加上一个固定长度的消息头，消息头中包含数据包的长度信息，接收方根据这个长度信息来判断数据包的边界。例如，常见的协议如HTTP、FTP、SMTP都使用这种方法，发送的数据包含一个消息头（比如包含数据长度），接收方首先读取消息头，再根据消息头中的长度信息来读取后续的数据。</p></li><li><p><strong>长度字段</strong>：在数据包的开始部分附加一个长度字段，表示接下来的数据长度。接收方首先读取这个长度字段，然后根据字段值读取后续的数据内容。</p></li></ol><h3 id="_4、知识总结" tabindex="-1"><a class="header-anchor" href="#_4、知识总结"><span>4、知识总结</span></a></h3><ul><li><strong>粘包</strong>：多个数据包合并成一个包，接收方无法区分每个数据包的边界。</li><li><strong>拆包</strong>：一个大的数据包被分割成多个小包，接收方需要正确重组这些小包。</li></ul><p>通过合理的协议设计和数据包边界的标识，可以有效避免粘包和拆包的问题。</p>',20)]))}const c=n(i,[["render",s],["__file","0_stick_split.html.vue"]]),p=JSON.parse('{"path":"/netty/0_stick_split.html","title":"粘包与拆包","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1、粘包（Sticky Packet）","slug":"_1、粘包-sticky-packet","link":"#_1、粘包-sticky-packet","children":[]},{"level":3,"title":"2、 拆包（Packet Fragmentation）","slug":"_2、-拆包-packet-fragmentation","link":"#_2、-拆包-packet-fragmentation","children":[]},{"level":3,"title":"3、解决方案","slug":"_3、解决方案","link":"#_3、解决方案","children":[]},{"level":3,"title":"4、知识总结","slug":"_4、知识总结","link":"#_4、知识总结","children":[]}],"git":{"updatedTime":1740997474000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":3,"url":"https://github.com/hanchen"}]},"filePathRelative":"netty/0_stick_split.md"}');export{c as comp,p as data};
