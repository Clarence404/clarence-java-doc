import{_ as s,c as a,a as t,o as e}from"./app-CL6quLEm.js";const p={};function i(o,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="redisson" tabindex="-1"><a class="header-anchor" href="#redisson"><span>Redisson</span></a></h1><h2 id="🧩-redisson-是什么" tabindex="-1"><a class="header-anchor" href="#🧩-redisson-是什么"><span>🧩 Redisson 是什么？</span></a></h2><blockquote><p><strong>Redisson</strong> 是一个基于 <strong>Redis</strong> 的 <strong>Java 驻内存分布式框架（Redis client + distributed toolkit）</strong>。</p><p>它不仅仅是一个 Redis 客户端（像 Jedis、Lettuce）， 更是一个帮助你 <strong>轻松实现分布式锁、分布式集合、分布式执行、缓存、限流等功能</strong> 的框架。</p></blockquote><hr><h2 id="⚙️-redisson-的主要作用" tabindex="-1"><a class="header-anchor" href="#⚙️-redisson-的主要作用"><span>⚙️ Redisson 的主要作用</span></a></h2><table><thead><tr><th>领域</th><th>功能</th><th>举例</th></tr></thead><tbody><tr><td>🔐 分布式同步</td><td>分布式锁、读写锁、公平锁、信号量、CountDownLatch</td><td><code>RLock</code>, <code>RReadWriteLock</code>, <code>RSemaphore</code></td></tr><tr><td>💾 分布式数据结构</td><td>提供与 Java 同步的 Redis 数据结构</td><td><code>RMap</code>, <code>RList</code>, <code>RSet</code>, <code>RQueue</code>, <code>RBucket</code></td></tr><tr><td>🧠 分布式缓存</td><td>提供本地缓存 + Redis 缓存的二级缓存机制</td><td><code>RLocalCachedMap</code></td></tr><tr><td>📡 分布式服务</td><td>远程执行（RRemoteService）、分布式任务调度（RExecutorService）</td><td>分布式执行任务</td></tr><tr><td>⏱ 限流与过期</td><td>分布式限流器、过期监听</td><td><code>RRateLimiter</code>, <code>RExpirable</code></td></tr><tr><td>☁️ 集群支持</td><td>自动支持 Redis Cluster、Sentinel、Master-Slave 等</td><td>无需修改代码</td></tr></tbody></table><hr><h2 id="🧱-redisson-vs-其他-redis-客户端" tabindex="-1"><a class="header-anchor" href="#🧱-redisson-vs-其他-redis-客户端"><span>🧱 Redisson vs 其他 Redis 客户端</span></a></h2><table><thead><tr><th>对比项</th><th><strong>Redisson</strong></th><th><strong>Jedis</strong></th><th><strong>Lettuce</strong></th></tr></thead><tbody><tr><td>基础操作</td><td>✅ 支持</td><td>✅ 支持</td><td>✅ 支持</td></tr><tr><td>异步操作</td><td>✅ 支持 (Reactive + Async)</td><td>❌</td><td>✅</td></tr><tr><td>分布式锁</td><td>✅ 内置</td><td>❌</td><td>❌</td></tr><tr><td>集合封装</td><td>✅ 高级数据结构</td><td>❌</td><td>❌</td></tr><tr><td>缓存功能</td><td>✅ 二级缓存、注解支持</td><td>❌</td><td>❌</td></tr><tr><td>Cluster 支持</td><td>✅ 自动</td><td>✅</td><td>✅</td></tr><tr><td>使用复杂度</td><td>中</td><td>简单</td><td>中</td></tr><tr><td>适合场景</td><td>企业分布式系统</td><td>简单 Redis 读写</td><td>响应式场景</td></tr></tbody></table><hr><h2 id="💡-常见用法示例" tabindex="-1"><a class="header-anchor" href="#💡-常见用法示例"><span>💡 常见用法示例</span></a></h2><h3 id="_1️⃣-分布式锁" tabindex="-1"><a class="header-anchor" href="#_1️⃣-分布式锁"><span>1️⃣ 分布式锁</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;order:lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 执行业务逻辑</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2️⃣-分布式-map" tabindex="-1"><a class="header-anchor" href="#_2️⃣-分布式-map"><span>2️⃣ 分布式 Map</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">RMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getMap</span><span class="token punctuation">(</span><span class="token string">&quot;user:info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Clarence&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3️⃣-限流器" tabindex="-1"><a class="header-anchor" href="#_3️⃣-限流器"><span>3️⃣ 限流器</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">RRateLimiter</span> rateLimiter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getRateLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;api:limit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">rateLimiter<span class="token punctuation">.</span><span class="token function">trySetRate</span><span class="token punctuation">(</span><span class="token class-name">RateType</span><span class="token punctuation">.</span><span class="token constant">OVERALL</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">RateIntervalUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>rateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;允许访问&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;被限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧠-底层原理简述" tabindex="-1"><a class="header-anchor" href="#🧠-底层原理简述"><span>🧠 底层原理简述</span></a></h2><ul><li>通过 Redis 的命令（如 <code>SETNX</code>, <code>EXPIRE</code>, <code>EVAL</code>）实现分布式锁；</li><li>使用 Lua 脚本保证操作原子性；</li><li>内置看门狗机制，防止锁过期释放导致的“锁丢失”；</li><li>提供异步（Async）、反应式（Reactive）、RxJava 模式；</li><li>自动处理 Redis 集群、主从切换等复杂拓扑。</li></ul><hr><h2 id="🚀-常用场景" tabindex="-1"><a class="header-anchor" href="#🚀-常用场景"><span>🚀 常用场景</span></a></h2><ul><li>分布式锁（订单扣减、防重复下单）</li><li>分布式限流（接口防刷）</li><li>延迟任务（Redisson DelayQueue）</li><li>二级缓存（本地 + Redis）</li><li>分布式执行器（任务调度）</li></ul><hr><h2 id="✅-总结一句话" tabindex="-1"><a class="header-anchor" href="#✅-总结一句话"><span>✅ 总结一句话：</span></a></h2><blockquote><p><strong>Redisson 是一个在 Java 中基于 Redis 的分布式工具包，能让你像用本地对象一样使用分布式锁、集合、缓存、限流等高级功能。</strong></p></blockquote>`,26)]))}const c=s(p,[["render",i],["__file","1_redis_redisson.html.vue"]]),d=JSON.parse('{"path":"/cache/1_redis_redisson.html","title":"Redisson","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"🧩 Redisson 是什么？","slug":"🧩-redisson-是什么","link":"#🧩-redisson-是什么","children":[]},{"level":2,"title":"⚙️ Redisson 的主要作用","slug":"⚙️-redisson-的主要作用","link":"#⚙️-redisson-的主要作用","children":[]},{"level":2,"title":"🧱 Redisson vs 其他 Redis 客户端","slug":"🧱-redisson-vs-其他-redis-客户端","link":"#🧱-redisson-vs-其他-redis-客户端","children":[]},{"level":2,"title":"💡 常见用法示例","slug":"💡-常见用法示例","link":"#💡-常见用法示例","children":[{"level":3,"title":"1️⃣ 分布式锁","slug":"_1️⃣-分布式锁","link":"#_1️⃣-分布式锁","children":[]},{"level":3,"title":"2️⃣ 分布式 Map","slug":"_2️⃣-分布式-map","link":"#_2️⃣-分布式-map","children":[]},{"level":3,"title":"3️⃣ 限流器","slug":"_3️⃣-限流器","link":"#_3️⃣-限流器","children":[]}]},{"level":2,"title":"🧠 底层原理简述","slug":"🧠-底层原理简述","link":"#🧠-底层原理简述","children":[]},{"level":2,"title":"🚀 常用场景","slug":"🚀-常用场景","link":"#🚀-常用场景","children":[]},{"level":2,"title":"✅ 总结一句话：","slug":"✅-总结一句话","link":"#✅-总结一句话","children":[]}],"git":{"updatedTime":1760341384000,"contributors":[{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hello0709"}]},"filePathRelative":"cache/1_redis_redisson.md"}');export{c as comp,d as data};
