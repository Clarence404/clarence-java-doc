import{_ as l,c as t,b as s,d as a,e as p,f as i,a as c,r as o,o as u}from"./app-BxUS_Ei4.js";const d={};function r(k,n){const e=o("RouteLink");return u(),t("div",null,[n[2]||(n[2]=s("h1",{id:"单例模式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#单例模式"},[s("span",null,"单例模式")])],-1)),n[3]||(n[3]=s("p",null,[s("strong",null,"作用"),a("：保证类在 JVM 中只有一个实例，避免重复创建对象，节省资源。")],-1)),n[4]||(n[4]=s("p",null,[s("strong",null,"应用场景"),a("：")],-1)),n[5]||(n[5]=s("ul",null,[s("li",null,"Spring Bean 默认是单例的"),s("li",null,"数据库连接池（HikariCP、Druid）"),s("li",null,"Redis、线程池、日志管理（Logback）")],-1)),s("blockquote",null,[s("p",null,[n[1]||(n[1]=a("参考代码：")),p(e,{to:"/interview/0_java#十二、写出几种单例模式实现"},{default:i(()=>n[0]||(n[0]=[a("单例模式的几种实现")])),_:1})])]),n[6]||(n[6]=c(`<h2 id="_1、懒汉式-线程不安全" tabindex="-1"><a class="header-anchor" href="#_1、懒汉式-线程不安全"><span>1、懒汉式（线程不安全）</span></a></h2><ul><li>特点： 延迟初始化，调用 getInstance() 时才创建实例，但线程不安全。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 静态实例变量，初始为 null</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazy</span> instance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 私有构造方法，防止外部实例化</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazy</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 只有在需要时才创建</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>缺点： 多线程环境下，可能会出现多个线程同时进入 if (instance == null)，导致创建多个实例，线程不安全。</li></ul><h2 id="_2、饿汉式-线程安全" tabindex="-1"><a class="header-anchor" href="#_2、饿汉式-线程安全"><span>2、饿汉式（线程安全）</span></a></h2><ul><li>特点： 类加载时就创建实例，线程安全，但可能造成资源浪费。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonEager</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 直接初始化</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SingletonEager</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonEager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 私有构造方法</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SingletonEager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonEager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 直接返回实例</span></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>缺点： 类加载时即创建实例，即使从未使用，也会占用内存。</li></ul><h2 id="_3、双重检查锁-dcl-推荐" tabindex="-1"><a class="header-anchor" href="#_3、双重检查锁-dcl-推荐"><span>3、双重检查锁（DCL，推荐）</span></a></h2><ul><li>特点： 线程安全，且避免了资源浪费，是常见的最佳实践。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonDCL</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// \`volatile\` 防止指令重排序</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">SingletonDCL</span> instance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SingletonDCL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonDCL</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 先检查实例是否存在</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 线程同步</span></span>
<span class="line">            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingletonDCL</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 二次检查</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonDCL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点： <ul><li>线程安全，只在第一次创建实例时加锁，提高性能。</li><li>使用 volatile 防止指令重排，确保 instance 被正确初始化。</li></ul></li></ul><h2 id="_4、单例实现对比总结" tabindex="-1"><a class="header-anchor" href="#_4、单例实现对比总结"><span>4、单例实现对比总结</span></a></h2><table><thead><tr><th>方式</th><th>线程安全</th><th>是否懒加载</th><th>性能</th><th>适用场景</th></tr></thead><tbody><tr><td>懒汉式</td><td>❌ 否</td><td>✅ 是</td><td>⭐⭐⭐⭐（快但线程不安全）</td><td>单线程环境</td></tr><tr><td>饿汉式</td><td>✅ 是</td><td>❌ 否</td><td>⭐⭐⭐（加载即创建，资源浪费）</td><td>类加载后立即使用</td></tr><tr><td>双重检查锁（DCL）</td><td>✅ 是</td><td>✅ 是</td><td>⭐⭐⭐⭐⭐（高效安全）</td><td>推荐，通用方案</td></tr></tbody></table><p>如果你在实际开发中使用单例，DCL（双重检查锁）是最推荐的方式，因为它既保证了线程安全，又避免了资源浪费。</p>`,15))])}const m=l(d,[["render",r],["__file","1_singleton.html.vue"]]),b=JSON.parse('{"path":"/patterns/1_singleton.html","title":"单例模式","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1、懒汉式（线程不安全）","slug":"_1、懒汉式-线程不安全","link":"#_1、懒汉式-线程不安全","children":[]},{"level":2,"title":"2、饿汉式（线程安全）","slug":"_2、饿汉式-线程安全","link":"#_2、饿汉式-线程安全","children":[]},{"level":2,"title":"3、双重检查锁（DCL，推荐）","slug":"_3、双重检查锁-dcl-推荐","link":"#_3、双重检查锁-dcl-推荐","children":[]},{"level":2,"title":"4、单例实现对比总结","slug":"_4、单例实现对比总结","link":"#_4、单例实现对比总结","children":[]}],"git":{"updatedTime":1753772313000,"contributors":[{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":3,"url":"https://github.com/hello0709"}]},"filePathRelative":"patterns/1_singleton.md"}');export{m as comp,b as data};
