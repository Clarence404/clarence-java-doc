import{_ as s,c as a,a as p,o as t}from"./app-B1wM3nBs.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="orm-frameworks" tabindex="-1"><a class="header-anchor" href="#orm-frameworks"><span>Orm Frameworks</span></a></h1><h2 id="一、mybatis" tabindex="-1"><a class="header-anchor" href="#一、mybatis"><span>一、Mybatis</span></a></h2><h3 id="_1、mybatis的缓存机制" tabindex="-1"><a class="header-anchor" href="#_1、mybatis的缓存机制"><span>1、Mybatis的缓存机制</span></a></h3><h3 id="_2、mybatis分页原理" tabindex="-1"><a class="header-anchor" href="#_2、mybatis分页原理"><span>2、Mybatis分页原理</span></a></h3><h3 id="_3、mybatis工作原理" tabindex="-1"><a class="header-anchor" href="#_3、mybatis工作原理"><span>3、Mybatis工作原理</span></a></h3><h3 id="_4、mapper-接口的实现原理" tabindex="-1"><a class="header-anchor" href="#_4、mapper-接口的实现原理"><span>4、Mapper 接口的实现原理</span></a></h3><h3 id="_5、mybatis-执行器" tabindex="-1"><a class="header-anchor" href="#_5、mybatis-执行器"><span>5、MyBatis 执行器</span></a></h3><h3 id="_6、自定义的-typehandler" tabindex="-1"><a class="header-anchor" href="#_6、自定义的-typehandler"><span>6、自定义的 TypeHandler</span></a></h3><p>在实际开发中，我们常常需要将数据库中的某些类型与 Java 对象之间进行复杂转换，例如：</p><ul><li>JSON 转 List 或 Map；</li><li>数据库存储枚举的 code 值，而 Java 中使用枚举类型；</li><li>特殊格式的字符串映射为 Java Bean 等。</li></ul><p>MyBatis 提供了 <code>TypeHandler</code> 接口来支持自定义类型转换。</p><h4 id="核心接口" tabindex="-1"><a class="header-anchor" href="#核心接口"><span>核心接口</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-json-list-的转换" tabindex="-1"><a class="header-anchor" href="#示例-json-list-的转换"><span>示例：JSON -&gt; List 的转换</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"></span>
<span class="line"><span class="token annotation punctuation">@MappedTypes</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonListTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> elementType<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">JacksonListTypeHandler</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> elementType<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>elementType <span class="token operator">=</span> elementType<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span></span>
<span class="line">        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> json <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">parseJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> json <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">parseJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> json <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">parseJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseJson</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">JavaType</span> javaType <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">getTypeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constructCollectionType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> elementType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> javaType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to convert JSON to List&lt;&quot;</span> <span class="token operator">+</span> elementType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注册方式" tabindex="-1"><a class="header-anchor" href="#注册方式"><span>注册方式</span></a></h4><ol><li><strong>XML 配置注册</strong></li></ol><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.handler.JacksonListTypeHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>注解注册</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">class</span> configuration <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">JacksonListTypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token constant">JAVA</span><span class="token operator">-</span><span class="token constant">OBJECT</span><span class="token operator">&gt;</span>failureReason<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="进阶源码" tabindex="-1"><a class="header-anchor" href="#进阶源码"><span>进阶源码</span></a></h4><p>Mybatis-plus的处理方案：<a href="https://baomidou.com/guides/type-handler/" target="_blank" rel="noopener noreferrer">https://baomidou.com/guides/type-handler/</a></p><h3 id="_7、拦截器和过滤器" tabindex="-1"><a class="header-anchor" href="#_7、拦截器和过滤器"><span>7、拦截器和过滤器</span></a></h3><p>MyBatis 拦截器是一种插件机制，可以在四大对象的方法执行前后进行拦截，常用于实现通用逻辑（如 SQL 日志、加密解密、多租户等）。</p><h4 id="四大拦截目标对象" tabindex="-1"><a class="header-anchor" href="#四大拦截目标对象"><span>四大拦截目标对象</span></a></h4><ul><li>Executor（执行器）：增删改查执行逻辑；</li><li>ParameterHandler：参数处理逻辑；</li><li>ResultSetHandler：结果集处理；</li><li>StatementHandler：SQL 预处理逻辑。</li></ul><h4 id="自定义拦截器示例-打印执行-sql-和耗时" tabindex="-1"><a class="header-anchor" href="#自定义拦截器示例-打印执行-sql-和耗时"><span>自定义拦截器示例：打印执行 SQL 和耗时</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlLogInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Object</span> param <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> sqlId <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">long</span> cost <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SQL ID: &quot;</span> <span class="token operator">+</span> sqlId <span class="token operator">+</span> <span class="token string">&quot;, Time: &quot;</span> <span class="token operator">+</span> cost <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SQL: &quot;</span> <span class="token operator">+</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 包装目标对象</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 可配置属性</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注册方式-1" tabindex="-1"><a class="header-anchor" href="#注册方式-1"><span>注册方式</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.interceptor.SqlLogInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或 Spring Boot 中配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">configuration</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</span>
<span class="line">  <span class="token key atrule">plugins</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> com.example.interceptor.SqlLogInterceptor</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、mybatis-plus" tabindex="-1"><a class="header-anchor" href="#二、mybatis-plus"><span>二、Mybatis-plus</span></a></h2><p>详细配置见：<a href="https://baomidou.com/" target="_blank" rel="noopener noreferrer">Mybatis-官网</a>，此处不做赘述；</p><h3 id="_1、多租户方案" tabindex="-1"><a class="header-anchor" href="#_1、多租户方案"><span>1、多租户方案</span></a></h3><table><thead><tr><th>隔离级别</th><th>实现方式</th><th>说明</th><th>场景适配</th><th>优缺点</th></tr></thead><tbody><tr><td>字段级（逻辑隔离）</td><td>共表共库，加 tenant_id</td><td>一张表存多租户，靠 SQL 中拼接 tenant_id 区分</td><td>适合中小型 SaaS</td><td>实现简单，成本低，但易出现数据泄露（靠代码）</td></tr><tr><td>库级（数据库隔离）</td><td>每租户一个数据库</td><td>每个租户单独库，动态切换数据源</td><td>中大型 SaaS</td><td>数据更安全，隔离性好，运维复杂度中等</td></tr><tr><td>Schema 级隔离</td><td>同库不同 schema</td><td>每个租户用一个 schema，表结构一致</td><td>PostgreSQL 等支持 schema 的系统</td><td>结构清晰，适中隔离，MySQL 支持不佳</td></tr><tr><td>实例级（物理隔离）</td><td>每租户部署独立实例</td><td>每个租户单独部署服务 + 数据库</td><td>政企客户、私有部署场景</td><td>成本高、运维复杂，但隔离性最强，安全性最佳</td></tr></tbody></table><h4 id="✅-方案-1-字段级-逻辑隔离" tabindex="-1"><a class="header-anchor" href="#✅-方案-1-字段级-逻辑隔离"><span>✅ 方案 1：字段级（逻辑隔离）</span></a></h4><p><strong>核心做法：</strong></p><ul><li>所有业务表增加 <code>tenant_id</code> 字段；</li><li>用 MyBatis-Plus 的 <code>TenantLineInnerInterceptor</code> 拦截器自动拼接；</li><li>租户 ID 从 ThreadLocal、Token、Header 中动态获取。</li></ul><p><strong>优点：</strong></p><ul><li>实现简单；</li><li>不需要多个数据库或数据源；</li><li>单表结构复用，维护成本低。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>数据隔离依赖程序层控制</strong>，一旦控制失效，可能出现数据泄漏；</li><li>不支持租户间字段结构差异。</li></ul><hr><h4 id="✅-方案-2-库级隔离-多数据源-动态路由" tabindex="-1"><a class="header-anchor" href="#✅-方案-2-库级隔离-多数据源-动态路由"><span>✅ 方案 2：库级隔离（多数据源 + 动态路由）</span></a></h4><p><strong>核心做法：</strong></p><ul><li>每个租户对应一个数据库（如 <code>mdm_tenant_001</code>, <code>mdm_tenant_002</code>）；</li><li></li></ul><p>程序通过动态数据源切换（如使用 <a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter" target="_blank" rel="noopener noreferrer">DynamicDatasource</a>）；</p><ul><li>每次请求根据租户 ID 决定使用哪个 DataSource。</li></ul><p><strong>实现要点：</strong></p><ul><li>创建 <code>TenantContext</code> 保存当前租户；</li><li>创建一个数据源注册器管理所有租户的数据源；</li><li>使用 AOP 或拦截器动态切换。</li></ul><p><strong>优点：</strong></p><ul><li>每个租户独立数据库，隔离性强；</li><li>更容易扩展不同租户的数据结构、性能优化；</li><li>避免大表问题。</li></ul><p><strong>缺点：</strong></p><ul><li>数据源管理复杂；</li><li>每个租户都要配置一份数据库连接；</li><li>报表、跨租户统计麻烦。</li></ul><hr><h4 id="✅-方案-3-schema级隔离-postgresql-推荐" tabindex="-1"><a class="header-anchor" href="#✅-方案-3-schema级隔离-postgresql-推荐"><span>✅ 方案 3：Schema级隔离（PostgreSQL 推荐）</span></a></h4><p><strong>核心做法：</strong></p><ul><li>每个租户分配一个独立 schema；</li><li>程序中设置当前会话的 schema（如 <code>SET search_path TO tenant1</code>）；</li><li>使用统一的表结构。</li></ul><p><strong>优点：</strong></p><ul><li>SQL 可复用，数据隔离好；</li><li>Schema 切换比 DataSource 快；</li><li>PostgreSQL 支持最佳。</li></ul><p><strong>缺点：</strong></p><ul><li>MySQL 不支持 schema，难落地；</li><li>ORM 适配性略差；</li><li>跨租户操作同样麻烦。</li></ul><hr><h4 id="✅-方案-4-实例级隔离-物理隔离" tabindex="-1"><a class="header-anchor" href="#✅-方案-4-实例级隔离-物理隔离"><span>✅ 方案 4：实例级隔离（物理隔离）</span></a></h4><p><strong>核心做法：</strong></p><ul><li>每个租户部署一套完整系统：服务 + 数据库；</li><li>可用容器（Kubernetes）、自动化运维工具部署。</li></ul><p><strong>适用场景：</strong></p><ul><li>政企大客户；</li><li>要求私有化部署；</li><li>高安全隔离场景。</li></ul><p><strong>优点：</strong></p><ul><li>安全性最高；</li><li>性能独立；</li><li>支持差异化配置。</li></ul><p><strong>缺点：</strong></p><ul><li>成本最高；</li><li>自动化运维要求高；</li><li>版本升级难度大。</li></ul><h3 id="_2、多数据源方案" tabindex="-1"><a class="header-anchor" href="#_2、多数据源方案"><span>2、多数据源方案</span></a></h3><p>todo</p><h2 id="三、hibernate" tabindex="-1"><a class="header-anchor" href="#三、hibernate"><span>三、Hibernate</span></a></h2><p>详细配置见：<a href="https://hibernate.org/" target="_blank" rel="noopener noreferrer">Hibernate-官网</a>，此处不做赘述；</p>`,77)]))}const i=s(e,[["render",l],["__file","2_orm_framework.html.vue"]]),u=JSON.parse('{"path":"/database/2_orm_framework.html","title":"Orm Frameworks","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、Mybatis","slug":"一、mybatis","link":"#一、mybatis","children":[{"level":3,"title":"1、Mybatis的缓存机制","slug":"_1、mybatis的缓存机制","link":"#_1、mybatis的缓存机制","children":[]},{"level":3,"title":"2、Mybatis分页原理","slug":"_2、mybatis分页原理","link":"#_2、mybatis分页原理","children":[]},{"level":3,"title":"3、Mybatis工作原理","slug":"_3、mybatis工作原理","link":"#_3、mybatis工作原理","children":[]},{"level":3,"title":"4、Mapper 接口的实现原理","slug":"_4、mapper-接口的实现原理","link":"#_4、mapper-接口的实现原理","children":[]},{"level":3,"title":"5、MyBatis 执行器","slug":"_5、mybatis-执行器","link":"#_5、mybatis-执行器","children":[]},{"level":3,"title":"6、自定义的 TypeHandler","slug":"_6、自定义的-typehandler","link":"#_6、自定义的-typehandler","children":[]},{"level":3,"title":"7、拦截器和过滤器","slug":"_7、拦截器和过滤器","link":"#_7、拦截器和过滤器","children":[]}]},{"level":2,"title":"二、Mybatis-plus","slug":"二、mybatis-plus","link":"#二、mybatis-plus","children":[{"level":3,"title":"1、多租户方案","slug":"_1、多租户方案","link":"#_1、多租户方案","children":[]},{"level":3,"title":"2、多数据源方案","slug":"_2、多数据源方案","link":"#_2、多数据源方案","children":[]}]},{"level":2,"title":"三、Hibernate","slug":"三、hibernate","link":"#三、hibernate","children":[]}],"git":{"updatedTime":1752636542000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":4,"url":"https://github.com/Clarence"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":4,"url":"https://github.com/hello0709"}]},"filePathRelative":"database/2_orm_framework.md"}');export{i as comp,u as data};
