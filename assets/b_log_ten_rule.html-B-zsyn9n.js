import{_ as s,c as a,a as e,o as l}from"./app-DzvWHf_p.js";const t="/clarence-java-doc/assets/format-Dru071P1.png",i="/clarence-java-doc/assets/full_param-Kb69qkTi.png",p="/clarence-java-doc/assets/log_output-wpk29wpi.png",c="/clarence-java-doc/assets/chain_watch-C1IXlh66.png",r="/clarence-java-doc/assets/elk-BCAhFRWJ.png",d={};function o(u,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="打印日志最佳实践" tabindex="-1"><a class="header-anchor" href="#打印日志最佳实践"><span>打印日志最佳实践</span></a></h1><blockquote><p>参考链接： <a href="https://mp.weixin.qq.com/s/Jz3eC3p6tfE3QUPOkw4sTQ" target="_blank" rel="noopener noreferrer">打印优质日志的 10 条军规-苏三说技术</a></p></blockquote><h2 id="第1条-格式统一" tabindex="-1"><a class="header-anchor" href="#第1条-格式统一"><span>第1条：格式统一</span></a></h2><h3 id="反例-管理看到会扣钱" tabindex="-1"><a class="header-anchor" href="#反例-管理看到会扣钱"><span>反例（管理看到会扣钱）</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">log.info(&quot;start process&quot;);</span>
<span class="line">log.error(&quot;error happen&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>无时间戳，无上下文。</p><h3 id="正解代码" tabindex="-1"><a class="header-anchor" href="#正解代码"><span>正解代码：</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!-- logback.xml核心配置 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    %d{yy-MM-dd HH:mm:ss.SSS}</span>
<span class="line">    |%X{traceId:-NO_ID}</span>
<span class="line">    |%thread</span>
<span class="line">    |%-5level</span>
<span class="line">    |%logger{36}</span>
<span class="line">    |%msg%n</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在logback.xml中统一配置了日志的时间格式、tradeId，线程、等级、日志详情都信息。</p><p>日志的格式统一了，更方便点位问题。</p><p><img src="`+t+`" alt="img.png"></p><h2 id="第2条-异常必带堆栈" tabindex="-1"><a class="header-anchor" href="#第2条-异常必带堆栈"><span>第2条：异常必带堆栈</span></a></h2><h3 id="反例-同事看了想打人" tabindex="-1"><a class="header-anchor" href="#反例-同事看了想打人"><span>反例（同事看了想打人）：</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">try {</span>
<span class="line">    processOrder();</span>
<span class="line">} catch (Exception e) {</span>
<span class="line">    log.error(&quot;处理失败&quot;);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出现异常了，日志中没打印任何的异常堆栈信息。</p><p>相当于自己把异常吃掉了。 非常不好排查问题。</p><h3 id="正确姿势" tabindex="-1"><a class="header-anchor" href="#正确姿势"><span>正确姿势：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// e必须存在！</span></span>
<span class="line">log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;订单处理异常 orderId={}&quot;</span><span class="token punctuation">,</span>orderId<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>日志中记录了出现异常的订单号orderId和异常的堆栈信息e。</p><h2 id="第3条-级别合理" tabindex="-1"><a class="header-anchor" href="#第3条-级别合理"><span>第3条：级别合理</span></a></h2><h3 id="反面教材" tabindex="-1"><a class="header-anchor" href="#反面教材"><span>反面教材：</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">// 业务异常应属WARN</span>
<span class="line">log.debug(&quot;用户余额不足 userId={}&quot;, userId); </span>
<span class="line">// 普通超时属INFO</span>
<span class="line">log.error(&quot;接口响应稍慢&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口响应稍慢，打印了error级别的日志，显然不太合理。</p><p>正常情况下，普通超时属INFO级别。</p><h3 id="日志级别定义表" tabindex="-1"><a class="header-anchor" href="#日志级别定义表"><span>日志级别定义表</span></a></h3><table><thead><tr><th>级别</th><th>正确使用场景</th></tr></thead><tbody><tr><td>FATAL</td><td>系统即将崩溃（如 OOM、磁盘爆满）</td></tr><tr><td>ERROR</td><td>核心业务失败（如支付失败、订单创建异常）</td></tr><tr><td>WARN</td><td>可恢复异常（如重试成功、触发降级）</td></tr><tr><td>INFO</td><td>关键流程节点（如订单状态变更、接口响应稍慢）</td></tr><tr><td>DEBUG</td><td>调试信息（如参数流水、中间结果）</td></tr></tbody></table><h2 id="第4条-参数完整" tabindex="-1"><a class="header-anchor" href="#第4条-参数完整"><span>第4条：参数完整</span></a></h2><h3 id="反例-让运维骂娘" tabindex="-1"><a class="header-anchor" href="#反例-让运维骂娘"><span>反例（让运维骂娘）：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户登录失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面这个日志只打印了“用户登录失败”这个文案。</p><p>谁在哪登录失败？</p><h3 id="侦探式日志" tabindex="-1"><a class="header-anchor" href="#侦探式日志"><span>侦探式日志：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;用户登录失败 username={}, clientIP={}, failReason={}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">         username<span class="token punctuation">,</span> clientIP<span class="token punctuation">,</span> <span class="token string">&quot;密码错误次数超限&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>登录失败的业务场景，需要记录哪个用户，ip是多少，在什么时间，登录失败了，失败的原因是什么。</p><p>时间在logback.xml中统一配置了格式。</p><p>这样才方便快速定位问题：</p><p><img src="`+i+`" alt="img.png"></p><h2 id="第5条-数据脱敏" tabindex="-1"><a class="header-anchor" href="#第5条-数据脱敏"><span>第5条：数据脱敏</span></a></h2><h3 id="血泪案例" tabindex="-1"><a class="header-anchor" href="#血泪案例"><span>血泪案例：</span></a></h3><p>某同事打印日志泄露用户手机号被投诉。</p><p>我在记录的日志中，需要对一下用户的个人敏感数据做脱敏处理。</p><p>例如下面这样：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">// 脱敏工具类</span>
<span class="line">public class LogMasker {</span>
<span class="line">    public static String maskMobile(String mobile) {</span>
<span class="line">        return mobile.replaceAll(&quot;(\\\\d{3})\\\\d{4}(\\\\d{4})&quot;, &quot;$1****$2&quot;);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 使用示例</span>
<span class="line">log.info(&quot;用户注册 mobile={}&quot;, LogMasker.maskMobile(&quot;13812345678&quot;));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第6条-异步保性能" tabindex="-1"><a class="header-anchor" href="#第6条-异步保性能"><span>第6条：异步保性能</span></a></h2><h3 id="问题复现" tabindex="-1"><a class="header-anchor" href="#问题复现"><span>问题复现</span></a></h3><p>某次秒杀活动中直接同步写日志，导致大量线程阻塞：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀请求 userId={}, itemId={}&quot;</span><span class="token punctuation">,</span>userId<span class="token punctuation">,</span> itemId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>高并发下IO阻塞。</p><h3 id="致命伤害分析" tabindex="-1"><a class="header-anchor" href="#致命伤害分析"><span>致命伤害分析：</span></a></h3><ul><li>同步写日志导致线程上下文切换频繁</li><li>磁盘IO成为系统瓶颈</li><li>高峰期日志打印耗时占总RT的25%</li></ul><h3 id="正确示范-三步配置法" tabindex="-1"><a class="header-anchor" href="#正确示范-三步配置法"><span>正确示范（三步配置法）</span></a></h3><h4 id="步骤1-logback-xml配置异步通道" tabindex="-1"><a class="header-anchor" href="#步骤1-logback-xml配置异步通道"><span>步骤1：logback.xml配置异步通道</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!-- 异步Appender核心配置 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ASYNC<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- 不丢失日志的阈值：当队列剩余容量＜此值时，TRACE/DEBUG级别日志将被丢弃 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- 队列深度：建议设为 (最大并发线程数 × 2) --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">&gt;</span></span>4096<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- 关联真实Appender --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FILE<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤2-日志输出优化代码" tabindex="-1"><a class="header-anchor" href="#步骤2-日志输出优化代码"><span>步骤2：日志输出优化代码</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">// 无需前置判断，框架自动处理  </span>
<span class="line">// 自动异步写入队列</span>
<span class="line">log.debug(&quot;接收到MQ消息：{}&quot;, msg.toSimpleString());</span>
<span class="line"></span>
<span class="line">// 不应做复杂计算后再打印（异步前仍在业务线程执行）  </span>
<span class="line">// 错误做法：  </span>
<span class="line">log.debug(&quot;详细内容：{}&quot;, computeExpensiveLog());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程图如下： <img src="`+p+`" alt="img.png"></p><h4 id="步骤3-性能关键参数公式" tabindex="-1"><a class="header-anchor" href="#步骤3-性能关键参数公式"><span>步骤3：性能关键参数公式</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">最大内存占用 ≈ 队列长度 × 平均单条日志大小  </span>
<span class="line">推荐队列深度 = 峰值TPS × 容忍最大延迟(秒)  </span>
<span class="line">例如：10000 TPS × 0.5s容忍 ⇒ 5000队列大小 </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="风险规避策略" tabindex="-1"><a class="header-anchor" href="#风险规避策略"><span>风险规避策略</span></a></h3><ul><li>防队列堆积：监控队列使用率，达80%触发告警</li><li>防OOM：严格约束大对象toString()的调用</li><li>紧急逃生：预设JMX接口用于快速切换同步模式</li></ul><h2 id="第7条-链路追踪" tabindex="-1"><a class="header-anchor" href="#第7条-链路追踪"><span>第7条：链路追踪</span></a></h2><h3 id="混沌场景" tabindex="-1"><a class="header-anchor" href="#混沌场景"><span>混沌场景：</span></a></h3><p>跨服务调用无法关联日志。</p><p>我们需要有链路追踪方案。</p><h3 id="全链路方案" tabindex="-1"><a class="header-anchor" href="#全链路方案"><span>全链路方案：</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">// 拦截器注入traceId</span>
<span class="line">MDC.put(&quot;traceId&quot;, UUID.randomUUID().toString().substring(0,8));</span>
<span class="line"></span>
<span class="line">// 日志格式包含traceId</span>
<span class="line">&lt;pattern&gt;%d{HH:mm:ss} |%X{traceId}| %msg%n&lt;/pattern&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在MDC中设置traceId。</p><p>后面可以通过traceId全链路追踪日志。</p><p>流程图如下：</p><p><img src="`+c+`" alt="img.png"></p><h2 id="第8条-动态调参" tabindex="-1"><a class="header-anchor" href="#第8条-动态调参"><span>第8条：动态调参</span></a></h2><h3 id="半夜重启的痛" tabindex="-1"><a class="header-anchor" href="#半夜重启的痛"><span>半夜重启的痛：</span></a></h3><p>线上问题需要临时开DEBUG日志，比如：查询用户的某次异常操作的日志。</p><h3 id="热更新方案" tabindex="-1"><a class="header-anchor" href="#热更新方案"><span>热更新方案：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"></span>
<span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/logLevel&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">changeLogLevel</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> loggerName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Logger</span><span class="token punctuation">)</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>loggerName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即生效</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有时候我们需要临时打印DEBUG日志，这就需要有个动态参数控制了。</p><p>否则每次调整打印日志级别都需要重启服务，可能会影响用户的正常使用。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">journey</span>
<span class="line">    title 日志级别动态调整</span>
<span class="line">    section 旧模式</span>
<span class="line">        发现问题 --&gt; 修改配置 --&gt; 重启应用 --&gt; 丢失现场</span>
<span class="line">    section 新模式</span>
<span class="line">        发现问题 --&gt; 动态调整 --&gt; 立即生效 --&gt; 保持现场</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第9条-结构化存储" tabindex="-1"><a class="header-anchor" href="#第9条-结构化存储"><span>第9条：结构化存储</span></a></h2><h3 id="混沌日志" tabindex="-1"><a class="header-anchor" href="#混沌日志"><span>混沌日志：</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">用户购买了苹果手机 订单号1001 金额8999</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的日志拼接成了一个字符串，虽说中间有空格分隔了，但哪些字段对应了哪些值，看起来不是很清楚。</p><p>我们在存储日志的时候，需要做结构化存储，方便快速的查询和搜索。</p><h3 id="机器友好式日志" tabindex="-1"><a class="header-anchor" href="#机器友好式日志"><span>机器友好式日志：</span></a></h3><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ORDER_CREATE&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;orderId&quot;</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;amount&quot;</span><span class="token operator">:</span> <span class="token number">8999</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;products&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;sku&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A123&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用了json格式存储日志。</p><p>日志中的数据一目了然。</p><h2 id="第10条-智能监控" tabindex="-1"><a class="header-anchor" href="#第10条-智能监控"><span>第10条：智能监控</span></a></h2><h3 id="最失败案例" tabindex="-1"><a class="header-anchor" href="#最失败案例"><span>最失败案例：</span></a></h3><p>某次用户开通会员操作，错误日志堆积3天才被发现，黄花菜都凉了。</p><p>我们需要在项目中引入智能监控。</p><h3 id="elk监控方案" tabindex="-1"><a class="header-anchor" href="#elk监控方案"><span>ELK监控方案：</span></a></h3><p><img src="`+r+`" alt="img.png"></p><h3 id="报警规则示例" tabindex="-1"><a class="header-anchor" href="#报警规则示例"><span>报警规则示例：</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">ERROR日志连续5分钟 &gt; 100条 → 电话告警  </span>
<span class="line">WARN日志持续1小时 → 邮件通知</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日志方案总结" tabindex="-1"><a class="header-anchor" href="#日志方案总结"><span>日志方案总结</span></a></h2><p>研发人员的三大境界：</p><p>青铜：System.out.println(&quot;error！&quot;)</p><p>钻石：标准化日志 + ELK监控</p><p>王者：</p><ul><li>日志驱动代码优化</li><li>异常预测系统</li><li>根因分析AI模型</li></ul><p>最后的灵魂拷问：</p><p><strong>下次线上故障时，你的日志能让新人5分钟定位问题吗？</strong></p>`,103)]))}const v=s(d,[["render",o],["__file","b_log_ten_rule.html.vue"]]),m=JSON.parse('{"path":"/architecture/b_log_ten_rule.html","title":"打印日志最佳实践","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"第1条：格式统一","slug":"第1条-格式统一","link":"#第1条-格式统一","children":[{"level":3,"title":"反例（管理看到会扣钱）","slug":"反例-管理看到会扣钱","link":"#反例-管理看到会扣钱","children":[]},{"level":3,"title":"正解代码：","slug":"正解代码","link":"#正解代码","children":[]}]},{"level":2,"title":"第2条：异常必带堆栈","slug":"第2条-异常必带堆栈","link":"#第2条-异常必带堆栈","children":[{"level":3,"title":"反例（同事看了想打人）：","slug":"反例-同事看了想打人","link":"#反例-同事看了想打人","children":[]},{"level":3,"title":"正确姿势：","slug":"正确姿势","link":"#正确姿势","children":[]}]},{"level":2,"title":"第3条：级别合理","slug":"第3条-级别合理","link":"#第3条-级别合理","children":[{"level":3,"title":"反面教材：","slug":"反面教材","link":"#反面教材","children":[]},{"level":3,"title":"日志级别定义表","slug":"日志级别定义表","link":"#日志级别定义表","children":[]}]},{"level":2,"title":"第4条：参数完整","slug":"第4条-参数完整","link":"#第4条-参数完整","children":[{"level":3,"title":"反例（让运维骂娘）：","slug":"反例-让运维骂娘","link":"#反例-让运维骂娘","children":[]},{"level":3,"title":"侦探式日志：","slug":"侦探式日志","link":"#侦探式日志","children":[]}]},{"level":2,"title":"第5条：数据脱敏","slug":"第5条-数据脱敏","link":"#第5条-数据脱敏","children":[{"level":3,"title":"血泪案例：","slug":"血泪案例","link":"#血泪案例","children":[]}]},{"level":2,"title":"第6条：异步保性能","slug":"第6条-异步保性能","link":"#第6条-异步保性能","children":[{"level":3,"title":"问题复现","slug":"问题复现","link":"#问题复现","children":[]},{"level":3,"title":"致命伤害分析：","slug":"致命伤害分析","link":"#致命伤害分析","children":[]},{"level":3,"title":"正确示范（三步配置法）","slug":"正确示范-三步配置法","link":"#正确示范-三步配置法","children":[]},{"level":3,"title":"风险规避策略","slug":"风险规避策略","link":"#风险规避策略","children":[]}]},{"level":2,"title":"第7条：链路追踪","slug":"第7条-链路追踪","link":"#第7条-链路追踪","children":[{"level":3,"title":"混沌场景：","slug":"混沌场景","link":"#混沌场景","children":[]},{"level":3,"title":"全链路方案：","slug":"全链路方案","link":"#全链路方案","children":[]}]},{"level":2,"title":"第8条：动态调参","slug":"第8条-动态调参","link":"#第8条-动态调参","children":[{"level":3,"title":"半夜重启的痛：","slug":"半夜重启的痛","link":"#半夜重启的痛","children":[]},{"level":3,"title":"热更新方案：","slug":"热更新方案","link":"#热更新方案","children":[]}]},{"level":2,"title":"第9条：结构化存储","slug":"第9条-结构化存储","link":"#第9条-结构化存储","children":[{"level":3,"title":"混沌日志：","slug":"混沌日志","link":"#混沌日志","children":[]},{"level":3,"title":"机器友好式日志：","slug":"机器友好式日志","link":"#机器友好式日志","children":[]}]},{"level":2,"title":"第10条：智能监控","slug":"第10条-智能监控","link":"#第10条-智能监控","children":[{"level":3,"title":"最失败案例：","slug":"最失败案例","link":"#最失败案例","children":[]},{"level":3,"title":"ELK监控方案：","slug":"elk监控方案","link":"#elk监控方案","children":[]},{"level":3,"title":"报警规则示例：","slug":"报警规则示例","link":"#报警规则示例","children":[]}]},{"level":2,"title":"日志方案总结","slug":"日志方案总结","link":"#日志方案总结","children":[]}],"git":{"updatedTime":1749210873000,"contributors":[{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hello0709"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":1,"url":"https://github.com/Clarence"}]},"filePathRelative":"architecture/b_log_ten_rule.md"}');export{v as comp,m as data};
