import{_ as n,c as a,a as e,o as t}from"./app-BzoVlX5F.js";const l={};function i(p,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="缓存一致性" tabindex="-1"><a class="header-anchor" href="#缓存一致性"><span>缓存一致性</span></a></h1><p>参考文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/idAReeR2Fqe6O6_ayq6AkA?scene=1" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/idAReeR2Fqe6O6_ayq6AkA?scene=1</a></li><li><a href="https://cloud.tencent.com/developer/article/1932934" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/1932934</a></li></ul><h2 id="一、经典场景对比" tabindex="-1"><a class="header-anchor" href="#一、经典场景对比"><span>一、经典场景对比</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid" data-title="mermaid"><pre><code><span class="line"><span class="token keyword">flowchart</span> TD</span>
<span class="line"><span class="token comment">%% 第一行：Cache Aside 居中</span></span>
<span class="line">    <span class="token keyword">subgraph</span> CA<span class="token text string">[&quot;Cache Aside（旁路缓存）&quot;]</span></span>
<span class="line">        <span class="token keyword">direction</span> TB</span>
<span class="line">        CA1<span class="token text string">[应用读取数据]</span> <span class="token arrow operator">--&gt;</span> CA2<span class="token text string">{缓存命中?}</span></span>
<span class="line">        CA2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">是</span> <span class="token arrow operator">--&gt;</span></span> CA3<span class="token text string">[返回缓存数据]</span></span>
<span class="line">        CA2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">否</span> <span class="token arrow operator">--&gt;</span></span> CA4<span class="token text string">[查询数据库]</span></span>
<span class="line">        CA4 <span class="token arrow operator">--&gt;</span> CA5<span class="token text string">[写入缓存]</span></span>
<span class="line">        CA5 <span class="token arrow operator">--&gt;</span> CA6<span class="token text string">[返回数据]</span></span>
<span class="line">        CA7<span class="token text string">[应用更新数据]</span> <span class="token arrow operator">--&gt;</span> CA8<span class="token text string">[更新数据库]</span></span>
<span class="line">        CA8 <span class="token arrow operator">--&gt;</span> CA9<span class="token text string">[删除缓存]</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">%% 第二行：Read/Write Through（读写穿透）</span></span>
<span class="line"><span class="token keyword">subgraph</span> RW<span class="token text string">[&quot;Read/Write Through（读写穿透）&quot;]</span></span>
<span class="line"><span class="token keyword">direction</span> TB</span>
<span class="line">RW1<span class="token text string">[应用读取数据]</span> <span class="token arrow operator">--&gt;</span> RW2<span class="token text string">{缓存命中?}</span></span>
<span class="line">RW2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">是</span> <span class="token arrow operator">--&gt;</span></span> RW3<span class="token text string">[返回缓存数据]</span></span>
<span class="line">RW2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">否</span> <span class="token arrow operator">--&gt;</span></span> RW4<span class="token text string">[缓存从数据库加载并写回]</span></span>
<span class="line">RW4 <span class="token arrow operator">--&gt;</span> RW5<span class="token text string">[返回数据]</span></span>
<span class="line">RW6<span class="token text string">[应用更新数据]</span> <span class="token arrow operator">--&gt;</span> RW7<span class="token text string">[更新缓存]</span></span>
<span class="line">RW7 <span class="token arrow operator">--&gt;</span> RW8<span class="token text string">[缓存自动写数据库（同步）]</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">%% 第二行：Write Behind（写回缓存）</span></span>
<span class="line"><span class="token keyword">subgraph</span> WB<span class="token text string">[&quot;Write Behind（写回缓存）&quot;]</span></span>
<span class="line"><span class="token keyword">direction</span> TB</span>
<span class="line">WB1<span class="token text string">[应用读取数据]</span> <span class="token arrow operator">--&gt;</span> WB2<span class="token text string">{缓存命中?}</span></span>
<span class="line">WB2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">是</span> <span class="token arrow operator">--&gt;</span></span> WB3<span class="token text string">[返回缓存数据]</span></span>
<span class="line">WB2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">否</span> <span class="token arrow operator">--&gt;</span></span> WB4<span class="token text string">[缓存从数据库加载并写回]</span></span>
<span class="line">WB4 <span class="token arrow operator">--&gt;</span> WB5<span class="token text string">[返回数据]</span></span>
<span class="line">WB6<span class="token text string">[应用更新数据]</span> <span class="token arrow operator">--&gt;</span> WB7<span class="token text string">[更新缓存]</span></span>
<span class="line">WB7 <span class="token arrow operator">--&gt;</span> WB8<span class="token text string">[异步批量写入数据库]</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">%% 布局关系</span></span>
<span class="line">CA <span class="token arrow operator">--&gt;</span> RW</span>
<span class="line">CA <span class="token arrow operator">--&gt;</span> WB</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、各方案优缺点对比" tabindex="-1"><a class="header-anchor" href="#二、各方案优缺点对比"><span>二、各方案优缺点对比</span></a></h2><h3 id="_1、三种方案核心区别" tabindex="-1"><a class="header-anchor" href="#_1、三种方案核心区别"><span>1、三种方案核心区别</span></a></h3><h4 id="读操作时" tabindex="-1"><a class="header-anchor" href="#读操作时"><span>读操作时：</span></a></h4><ul><li><p><strong>Cache Aside（旁路缓存）</strong></p><ul><li>由应用自己实现缓存回填逻辑；</li><li>典型流程：<strong>先查缓存，未命中则查DB并写入缓存</strong>；</li><li>读多写少的业务最适合，例如配置类数据、详情页、排行榜。</li></ul></li><li><p><strong>Read/Write Through（读写穿透）</strong></p><ul><li>缓存层（框架）封装了数据库的访问逻辑；</li><li>应用只操作缓存，缓存自己负责数据加载和回写；</li><li>Spring Cache、Caffeine、Guava 等均可实现这种模式。</li></ul></li><li><p><strong>Write Behind（写回缓存）</strong></p><ul><li>读时同上，但写入时是<strong>先写缓存，异步批量刷入数据库</strong>；</li><li>常用于高吞吐、低一致性场景（如日志、计数、推荐系统）。</li></ul></li></ul><hr><h4 id="写操作时" tabindex="-1"><a class="header-anchor" href="#写操作时"><span>写操作时：</span></a></h4><ul><li><p><strong>Cache Aside（旁路缓存）</strong></p><ul><li>一般流程：<strong>先更新数据库，再删除缓存</strong>（防止脏数据）。</li><li>优点是灵活、可控；缺点是要自己实现一致性控制。</li><li>延迟双删、MQ通知机制常用于此模式增强一致性。</li></ul></li><li><p><strong>Read/Write Through</strong></p><ul><li>写时先更新缓存，再由缓存同步写数据库；</li><li>应用无需关心数据库细节，适合中小规模系统；</li><li>一致性好，但写路径较长，性能略低。</li></ul></li><li><p><strong>Write Behind</strong></p><ul><li>写操作仅更新缓存，由异步线程批量落库；</li><li>适合对“实时一致性”要求不高的业务；</li><li>如果缓存宕机或写队列丢失，可能造成数据丢失。</li></ul></li></ul><hr><h3 id="_2、各方案优缺点-详细维度" tabindex="-1"><a class="header-anchor" href="#_2、各方案优缺点-详细维度"><span>2、各方案优缺点（详细维度）</span></a></h3><table><thead><tr><th>对比维度</th><th>Cache Aside（旁路缓存）</th><th>Read/Write Through（读写穿透）</th><th>Write Behind（写回缓存）</th></tr></thead><tbody><tr><td><strong>读性能</strong></td><td>高（缓存命中快）</td><td>高（同样命中缓存）</td><td>高</td></tr><tr><td><strong>写性能</strong></td><td>中（双操作：DB+缓存）</td><td>中（写DB同步）</td><td>✅ 高（异步写DB）</td></tr><tr><td><strong>一致性</strong></td><td>✅ 强一致（可控制）</td><td>✅ 强一致</td><td>⚠️ 弱一致（有延迟）</td></tr><tr><td><strong>实现复杂度</strong></td><td>⚠️ 高（应用维护缓存逻辑）</td><td>✅ 中（框架负责）</td><td>⚠️ 高（需异步队列保障）</td></tr><tr><td><strong>容错性</strong></td><td>✅ 好（应用可自定义补偿）</td><td>一般（受限于框架）</td><td>差（需防数据丢失）</td></tr><tr><td><strong>开发成本</strong></td><td>高</td><td>低</td><td>高</td></tr><tr><td><strong>适用业务场景</strong></td><td>Web系统、微服务读多写少</td><td>配置缓存、系统参数</td><td>日志、计数、埋点、统计</td></tr><tr><td><strong>典型实现</strong></td><td>Redis + 自定义代码</td><td>Spring Cache、Guava Cache</td><td>Kafka + Redis Buffer</td></tr><tr><td><strong>风险点</strong></td><td>并发更新时的脏缓存</td><td>框架抽象过深</td><td>异步丢失、批量写延迟</td></tr></tbody></table><hr><h3 id="_3、补充维度说明" tabindex="-1"><a class="header-anchor" href="#_3、补充维度说明"><span>3、补充维度说明</span></a></h3><h4 id="💡-缓存与数据库的强一致性保证" tabindex="-1"><a class="header-anchor" href="#💡-缓存与数据库的强一致性保证"><span>💡 缓存与数据库的强一致性保证</span></a></h4><ul><li><p><strong>Cache Aside</strong> 可通过“延迟双删 + MQ异步删除 + 分布式锁”达到最终一致。 典型实现方式最灵活，也是互联网架构的默认首选。</p></li><li><p><strong>Read/Write Through</strong> 由缓存层自动保证一致性（单体/小系统下可靠）； 但在分布式部署下，缓存与DB之间可能仍有延迟。</p></li><li><p><strong>Write Behind</strong> 为了保证可靠落库，通常会在缓存层维护</p><ul><li>异步队列（batch写入DB），</li><li>WAL日志（write-ahead log），</li><li>宕机恢复机制。</li></ul></li></ul><hr><h3 id="_4、补充-失效与更新策略" tabindex="-1"><a class="header-anchor" href="#_4、补充-失效与更新策略"><span>4、补充：失效与更新策略</span></a></h3><p>各模式对缓存失效的处理方式不同，也影响一致性与性能：</p><table><thead><tr><th>策略</th><th>Cache Aside</th><th>Read/Write Through</th><th>Write Behind</th></tr></thead><tbody><tr><td><strong>TTL（过期时间）</strong></td><td>可自定义，灵活</td><td>由框架控制</td><td>可选</td></tr><tr><td><strong>主动刷新</strong></td><td>应用可触发</td><td>框架触发</td><td>不常用</td></tr><tr><td><strong>被动淘汰</strong></td><td>支持（LRU/LFU）</td><td>支持</td><td>支持</td></tr><tr><td><strong>缓存重建来源</strong></td><td>DB</td><td>DB</td><td>缓存内部或DB</td></tr></tbody></table><hr><h3 id="_5、总结一句话-强化记忆" tabindex="-1"><a class="header-anchor" href="#_5、总结一句话-强化记忆"><span>5、总结一句话（强化记忆）</span></a></h3><table><thead><tr><th>模式</th><th>核心特征</th><th>一句话记忆</th></tr></thead><tbody><tr><td><strong>Cache Aside</strong></td><td>应用控制缓存逻辑</td><td>“查不到我再查DB”</td></tr><tr><td><strong>Read/Write Through</strong></td><td>缓存代理数据库操作</td><td>“你只找我，我帮你查DB”</td></tr><tr><td><strong>Write Behind</strong></td><td>缓存异步写回数据库</td><td>“我先记着，之后再写DB”</td></tr></tbody></table><hr><h3 id="_6、优缺点对比-小结" tabindex="-1"><a class="header-anchor" href="#_6、优缺点对比-小结"><span>6、优缺点对比 小结</span></a></h3><blockquote><ul><li>互联网系统 90% 使用 <strong>Cache Aside（旁路缓存）</strong>。</li><li>如果你使用 Spring Cache / Guava / Caffeine，这些其实是 <strong>Read/Write Through</strong> 的典型实现。</li><li>Write Behind 适合统计、日志、埋点等“可延迟一致性”的场景。</li></ul></blockquote><h2 id="三、cache-aside-模式下的一致性问题与优化策略" tabindex="-1"><a class="header-anchor" href="#三、cache-aside-模式下的一致性问题与优化策略"><span>三、Cache Aside 模式下的一致性问题与优化策略</span></a></h2><h3 id="_1、写操作的经典顺序问题" tabindex="-1"><a class="header-anchor" href="#_1、写操作的经典顺序问题"><span>1、写操作的经典顺序问题</span></a></h3><p>在 <strong>Cache Aside（旁路缓存）</strong> 模式中，最核心的问题是： <strong>更新数据库与缓存之间的顺序如何安排</strong>，否则容易导致缓存与数据库数据不一致。</p><p>常见的三种写入顺序如下：</p><table><thead><tr><th>顺序</th><th>操作流程</th><th>问题</th></tr></thead><tbody><tr><td>① 先更新数据库 → 再更新缓存</td><td>DB成功后立刻写缓存</td><td>若两次操作非原子，缓存可能被旧数据覆盖</td></tr><tr><td>② 先更新缓存 → 再更新数据库</td><td>DB失败时缓存脏数据</td><td>容易出现数据不一致</td></tr><tr><td>✅ ③ 先更新数据库 → 再删除缓存</td><td>最推荐方案，更新时不写缓存，而是删缓存</td><td>可确保下次读取时缓存重建</td></tr></tbody></table><p>因此，<strong>推荐的标准做法</strong>是：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">写数据：</span>
<span class="line">1️⃣ 更新数据库</span>
<span class="line">2️⃣ 删除缓存</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下次读请求时，再由 Cache Aside 逻辑自动从数据库加载数据写入缓存。</p><hr><h3 id="_2、延迟双删策略-解决并发问题" tabindex="-1"><a class="header-anchor" href="#_2、延迟双删策略-解决并发问题"><span>2、延迟双删策略（解决并发问题）</span></a></h3><p>在高并发场景中，仍可能出现以下时序问题:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">线程A更新数据库</span>
<span class="line">线程B读取旧缓存</span>
<span class="line">线程A删除缓存</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程B 可能刚好在缓存删除之前读取到了旧缓存，从而导致短暂的数据不一致。</p><p>解决办法是：<strong>延迟双删策略（Double Deletion Delay）</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateData</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 更新数据库</span></span>
<span class="line">    <span class="token function">updateDatabase</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2. 删除缓存</span></span>
<span class="line">    redis<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3. 延迟再删一次（保证旧缓存被删除）</span></span>
<span class="line">    executor<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> redis<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>延迟时间（如500ms）应略大于一次数据库更新 + 缓存重建的耗时。</p></blockquote><hr><h3 id="_3、异步删除方案-消息队列通知" tabindex="-1"><a class="header-anchor" href="#_3、异步删除方案-消息队列通知"><span>3、异步删除方案（消息队列通知）</span></a></h3><p>在分布式环境下，可以通过消息队列确保缓存删除的可靠性：</p><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid" data-title="mermaid"><pre><code><span class="line"><span class="token keyword">sequenceDiagram</span></span>
<span class="line">    <span class="token keyword">participant</span> ServiceA as 服务A（写操作）</span>
<span class="line">    <span class="token keyword">participant</span> DB as 数据库</span>
<span class="line">    <span class="token keyword">participant</span> MQ as 消息队列</span>
<span class="line">    <span class="token keyword">participant</span> ServiceB as 服务B（读操作）</span>
<span class="line">    <span class="token keyword">participant</span> Redis as 缓存</span>
<span class="line">    ServiceA <span class="token arrow operator">-&gt;&gt;</span> DB<span class="token operator">:</span> 更新数据库</span>
<span class="line">    ServiceA <span class="token arrow operator">-&gt;&gt;</span> MQ<span class="token operator">:</span> 发送删除缓存消息<span class="token text string">(key)</span></span>
<span class="line">    MQ <span class="token arrow operator">--&gt;&gt;</span> ServiceB<span class="token operator">:</span> 接收到消息</span>
<span class="line">    ServiceB <span class="token arrow operator">-&gt;&gt;</span> Redis<span class="token operator">:</span> 删除对应缓存</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式可以：</p><ul><li>确保缓存删除动作一定会执行；</li><li>支持多实例同步删除；</li><li>保证最终一致性。</li></ul><hr><h3 id="_4、订阅通知机制-redis-keyspace-notifications" tabindex="-1"><a class="header-anchor" href="#_4、订阅通知机制-redis-keyspace-notifications"><span>4、订阅通知机制（Redis Keyspace Notifications）</span></a></h3><p>Redis 自带订阅机制，也能辅助实现缓存一致性：</p><p>开启 Redis 通知功能：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">notify-keyspace-events Ex</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>应用中订阅事件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    redisMessageListenerContainer<span class="token punctuation">.</span><span class="token function">addMessageListener</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">KeyExpirationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">PatternTopic</span><span class="token punctuation">(</span><span class="token string">&quot;__keyevent@0__:expired&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可监听 key 过期、删除事件，用于触发业务刷新或日志记录。</p><hr><h3 id="_5、布隆过滤器防击穿-锁防并发重建" tabindex="-1"><a class="header-anchor" href="#_5、布隆过滤器防击穿-锁防并发重建"><span>5、布隆过滤器防击穿 + 锁防并发重建</span></a></h3><p>在高并发场景下，读写并发时容易造成：</p><ul><li><strong>缓存穿透</strong>：访问不存在的数据；</li><li><strong>缓存击穿</strong>：热点key失效瞬间，大量请求打DB；</li><li><strong>缓存雪崩</strong>：大量key同时过期。</li></ul><p>防护手段：</p><table><thead><tr><th>问题类型</th><th>解决方案</th></tr></thead><tbody><tr><td>缓存穿透</td><td>使用布隆过滤器（BloomFilter）预先判断key合法性</td></tr><tr><td>缓存击穿</td><td>使用分布式锁（如Redisson）防止并发重建</td></tr><tr><td>缓存雪崩</td><td>随机化过期时间，分散缓存失效点</td></tr></tbody></table><hr><h3 id="_6、完整示例流程-综合方案" tabindex="-1"><a class="header-anchor" href="#_6、完整示例流程-综合方案"><span>6、完整示例流程（综合方案）</span></a></h3><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid" data-title="mermaid"><pre><code><span class="line"><span class="token keyword">flowchart</span> TD</span>
<span class="line">    U<span class="token text string">[用户请求更新数据]</span> <span class="token arrow operator">--&gt;</span> DB1<span class="token text string">[更新数据库]</span></span>
<span class="line">    DB1 <span class="token arrow operator">--&gt;</span> DEL1<span class="token text string">[删除缓存]</span></span>
<span class="line">    DEL1 <span class="token arrow operator">--&gt;</span> MQ1<span class="token text string">[发送MQ消息通知其他节点删除缓存]</span></span>
<span class="line">    MQ1 <span class="token arrow operator">--&gt;</span> DEL2<span class="token text string">[其他节点删除缓存]</span></span>
<span class="line">    DEL2 <span class="token arrow operator">--&gt;</span> WAIT<span class="token text string">[延迟500ms再次删除缓存]</span></span>
<span class="line">    WAIT <span class="token arrow operator">--&gt;</span> END<span class="token text string">[最终一致性保证 ✅]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7-cache-aside-模式小结" tabindex="-1"><a class="header-anchor" href="#_7-cache-aside-模式小结"><span>7 Cache Aside 模式小结</span></a></h3><table><thead><tr><th>策略</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>先更新DB再删缓存</td><td>简单可靠</td><td>存在短暂不一致</td><td>大多数场景</td></tr><tr><td>延迟双删</td><td>减少并发读旧数据</td><td>实现稍复杂</td><td>高并发读多写少</td></tr><tr><td>消息队列异步删</td><td>多实例一致</td><td>引入MQ依赖</td><td>分布式系统</td></tr><tr><td>Redis通知</td><td>无需MQ</td><td>功能有限</td><td>小型系统或辅助通知</td></tr></tbody></table>`,71)]))}const d=n(l,[["render",i],["__file","4_cache_consistency.html.vue"]]),o=JSON.parse('{"path":"/cache/4_cache_consistency.html","title":"缓存一致性","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、经典场景对比","slug":"一、经典场景对比","link":"#一、经典场景对比","children":[]},{"level":2,"title":"二、各方案优缺点对比","slug":"二、各方案优缺点对比","link":"#二、各方案优缺点对比","children":[{"level":3,"title":"1、三种方案核心区别","slug":"_1、三种方案核心区别","link":"#_1、三种方案核心区别","children":[]},{"level":3,"title":"2、各方案优缺点（详细维度）","slug":"_2、各方案优缺点-详细维度","link":"#_2、各方案优缺点-详细维度","children":[]},{"level":3,"title":"3、补充维度说明","slug":"_3、补充维度说明","link":"#_3、补充维度说明","children":[]},{"level":3,"title":"4、补充：失效与更新策略","slug":"_4、补充-失效与更新策略","link":"#_4、补充-失效与更新策略","children":[]},{"level":3,"title":"5、总结一句话（强化记忆）","slug":"_5、总结一句话-强化记忆","link":"#_5、总结一句话-强化记忆","children":[]},{"level":3,"title":"6、优缺点对比 小结","slug":"_6、优缺点对比-小结","link":"#_6、优缺点对比-小结","children":[]}]},{"level":2,"title":"三、Cache Aside 模式下的一致性问题与优化策略","slug":"三、cache-aside-模式下的一致性问题与优化策略","link":"#三、cache-aside-模式下的一致性问题与优化策略","children":[{"level":3,"title":"1、写操作的经典顺序问题","slug":"_1、写操作的经典顺序问题","link":"#_1、写操作的经典顺序问题","children":[]},{"level":3,"title":"2、延迟双删策略（解决并发问题）","slug":"_2、延迟双删策略-解决并发问题","link":"#_2、延迟双删策略-解决并发问题","children":[]},{"level":3,"title":"3、异步删除方案（消息队列通知）","slug":"_3、异步删除方案-消息队列通知","link":"#_3、异步删除方案-消息队列通知","children":[]},{"level":3,"title":"4、订阅通知机制（Redis Keyspace Notifications）","slug":"_4、订阅通知机制-redis-keyspace-notifications","link":"#_4、订阅通知机制-redis-keyspace-notifications","children":[]},{"level":3,"title":"5、布隆过滤器防击穿 + 锁防并发重建","slug":"_5、布隆过滤器防击穿-锁防并发重建","link":"#_5、布隆过滤器防击穿-锁防并发重建","children":[]},{"level":3,"title":"6、完整示例流程（综合方案）","slug":"_6、完整示例流程-综合方案","link":"#_6、完整示例流程-综合方案","children":[]},{"level":3,"title":"7 Cache Aside 模式小结","slug":"_7-cache-aside-模式小结","link":"#_7-cache-aside-模式小结","children":[]}]}],"git":{"updatedTime":1761028385000,"contributors":[{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":4,"url":"https://github.com/hello0709"}]},"filePathRelative":"cache/4_cache_consistency.md"}');export{d as comp,o as data};
