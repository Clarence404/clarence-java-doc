import{_ as i,c as n,a as l,o}from"./app-CqmyyvGi.js";const r={};function c(a,e){return o(),n("div",null,e[0]||(e[0]=[l('<h1 id="spring-framework" tabindex="-1"><a class="header-anchor" href="#spring-framework"><span>Spring Framework</span></a></h1><div class="hint-container warning"><p class="hint-container-title">Todo</p><p>以下只是基础大纲，后续需要持续增加内容</p></div><p>结构参考地址：<a href="https://bugstack.cn/md/spring/develop-spring/2021-05-16-%E7%AC%AC1%E7%AB%A0%EF%BC%9A%E5%BC%80%E7%AF%87%E4%BB%8B%E7%BB%8D%EF%BC%8C%E6%89%8B%E5%86%99Spring%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%EF%BC%9F.html" target="_blank" rel="noopener noreferrer">深入理解Spring源码知识-小傅哥</a></p><h2 id="一、spring-ioc-控制反转与依赖注入" tabindex="-1"><a class="header-anchor" href="#一、spring-ioc-控制反转与依赖注入"><span>一、Spring IOC - 控制反转与依赖注入</span></a></h2><h3 id="_1、-spring-容器初始化流程" tabindex="-1"><a class="header-anchor" href="#_1、-spring-容器初始化流程"><span>1、 Spring 容器初始化流程</span></a></h3><ul><li><p><strong>Spring 容器概述</strong></p><ul><li><code>BeanFactory</code> vs <code>ApplicationContext</code> 区别与应用场景</li></ul></li><li><p><strong>核心初始化方法解析</strong></p><ul><li><code>refresh()</code> 全流程解析 <ul><li><code>prepareRefresh()</code> —— 容器启动准备</li><li><code>obtainFreshBeanFactory()</code> —— 创建 BeanFactory</li><li><code>registerBeanPostProcessors()</code> —— 注册扩展处理器</li><li><code>finishBeanFactoryInitialization()</code> —— 初始化单例 Bean</li><li><code>finishRefresh()</code> —— 发布事件</li></ul></li></ul></li><li><p><strong>Spring 和 Spring Boot 中加载的入口</strong></p><ul><li><p><strong>Spring</strong>：<code>ClassPathXmlApplicationContext</code> / <code>AnnotationConfigApplicationContext</code></p><ul><li>通过 <code>new</code> 创建 ApplicationContext，手动指定配置类或 XML 文件，调用 <code>refresh()</code> 启动容器。</li></ul></li><li><p><strong>Spring Boot</strong>：<code>SpringApplication.run()</code></p><ul><li>封装了创建上下文、自动加载配置、刷新容器等一系列步骤，最终也是调用 <code>context.refresh()</code> 完成启动。</li><li>支持 Web、Reactive、Servlet 等不同上下文类型，开箱即用的自动配置能力让启动更加简单。</li></ul></li></ul></li></ul><h3 id="_2、-bean-的生命周期解析" tabindex="-1"><a class="header-anchor" href="#_2、-bean-的生命周期解析"><span>2、 Bean 的生命周期解析</span></a></h3><ul><li><strong>Spring Bean 的完整生命周期</strong><ul><li>实例化前 —— <code>InstantiationAwareBeanPostProcessor</code></li><li>初始化阶段 —— <code>BeanPostProcessor</code></li><li>初始化后 —— <code>SmartInitializingSingleton</code>、<code>InitializingBean</code></li><li>销毁阶段 —— <code>DisposableBean</code>、<code>@PreDestroy</code></li></ul></li></ul><h3 id="_3、依赖注入原理" tabindex="-1"><a class="header-anchor" href="#_3、依赖注入原理"><span>3、依赖注入原理</span></a></h3><ul><li><strong>注入方式解析</strong><ul><li>构造函数注入 vs Setter 注入</li><li><code>@Autowired</code>、<code>@Resource</code>、<code>@Qualifier</code> 注解解析</li><li><code>AutowiredAnnotationBeanPostProcessor</code> 执行流程</li><li><code>@Lazy</code> 懒加载实现原理</li></ul></li></ul><h2 id="二、spring-aop-面向切面编程" tabindex="-1"><a class="header-anchor" href="#二、spring-aop-面向切面编程"><span>二、Spring AOP - 面向切面编程</span></a></h2><h3 id="_1、动态代理原理" tabindex="-1"><a class="header-anchor" href="#_1、动态代理原理"><span>1、动态代理原理</span></a></h3><ul><li><strong>JDK 动态代理 vs CGLIB 代理</strong> 区别与源码解析 <ul><li><code>ProxyFactory</code>、<code>AdvisedSupport</code> 核心类解析</li><li><strong>判断代理方式</strong>：<code>JdkDynamicAopProxy</code> vs <code>CglibAopProxy</code></li></ul></li></ul><h3 id="_2、切面注解解析" tabindex="-1"><a class="header-anchor" href="#_2、切面注解解析"><span>2、切面注解解析</span></a></h3><ul><li><code>@Aspect</code>、<code>@Pointcut</code>、<code>@Before</code>、<code>@After</code>、<code>@Around</code> 注解执行流程 <ul><li><code>AnnotationAwareAspectJAutoProxyCreator</code> 完整解析</li><li><code>AspectJExpressionPointcut</code> 切入点解析</li></ul></li></ul><h3 id="_3、拦截链执行流程" tabindex="-1"><a class="header-anchor" href="#_3、拦截链执行流程"><span>3、拦截链执行流程</span></a></h3><ul><li><code>ReflectiveMethodInvocation.proceed()</code> 拦截链执行原理</li><li><code>Advisor</code>、<code>Interceptor</code>、<code>Advice</code> 关键类解读</li><li><code>ExposeInvocationInterceptor</code> 解决嵌套代理问题</li></ul><h2 id="三、design-核心设计模式解析" tabindex="-1"><a class="header-anchor" href="#三、design-核心设计模式解析"><span>三、Design - 核心设计模式解析</span></a></h2><h3 id="_1、-spring-三级缓存原理" tabindex="-1"><a class="header-anchor" href="#_1、-spring-三级缓存原理"><span>1、 Spring 三级缓存原理</span></a></h3><ul><li><p><strong>为什么需要三级缓存？</strong></p><ul><li>解决循环依赖的问题</li></ul></li><li><p><strong>三级缓存结构解析</strong></p><ul><li>一级缓存：<code>singletonObjects</code>（存放完整单例对象）</li><li>二级缓存：<code>earlySingletonObjects</code>（半成品对象）</li><li>三级缓存：<code>singletonFactories</code>（工厂对象，用于创建代理）</li></ul></li><li><p><strong>getSingleton()` 执行流程</strong></p><ul><li>创建 Bean -&gt; 提前曝光 -&gt; 代理增强 -&gt; 完成实例化</li></ul></li></ul><h3 id="_2、数据类型转换工厂设计实现" tabindex="-1"><a class="header-anchor" href="#_2、数据类型转换工厂设计实现"><span>2、数据类型转换工厂设计实现</span></a></h3><ul><li><p><strong>Spring 类型转换机制解析</strong></p><ul><li><code>ConversionService</code>、<code>GenericConversionService</code> 核心类解析</li><li><code>Converter</code>、<code>ConverterFactory</code>、<code>GenericConverter</code> 区别</li></ul></li><li><p><strong>自定义数据转换工厂实现</strong></p><ul><li>手写 <code>String -&gt; LocalDateTime</code> 转换器</li><li>自定义 <code>@Component</code> 转换器注册到容器</li></ul></li></ul><h2 id="四、spring-高级特性解析" tabindex="-1"><a class="header-anchor" href="#四、spring-高级特性解析"><span>四、Spring 高级特性解析</span></a></h2><h3 id="_1、spring-事件机制" tabindex="-1"><a class="header-anchor" href="#_1、spring-事件机制"><span>1、Spring 事件机制</span></a></h3><ul><li><p><strong>Spring 内置事件</strong></p><ul><li><code>ContextRefreshedEvent</code>、<code>ContextClosedEvent</code>、<code>RequestHandledEvent</code></li></ul></li><li><p><strong>自定义事件与监听器</strong></p><ul><li><code>ApplicationEvent</code>、<code>ApplicationListener</code>、<code>EventMulticaster</code> 核心类解析</li></ul></li></ul><h3 id="_2、spring-事务管理" tabindex="-1"><a class="header-anchor" href="#_2、spring-事务管理"><span>2、Spring 事务管理</span></a></h3><ul><li><strong>事务管理实现原理</strong><ul><li><code>@Transactional</code> 注解解析</li><li><code>TransactionManager</code>、<code>TransactionInterceptor</code> 执行流程</li><li>事务传播机制、事务回滚实现细节</li></ul></li></ul><h3 id="_3、spring-扩展点解析" tabindex="-1"><a class="header-anchor" href="#_3、spring-扩展点解析"><span>3、Spring 扩展点解析</span></a></h3><ul><li><p><strong>BeanFactory 扩展点</strong></p><ul><li><code>BeanPostProcessor</code>、<code>BeanFactoryPostProcessor</code>、<code>InstantiationAwareBeanPostProcessor</code></li><li><code>FactoryBean</code>、<code>SmartInitializingSingleton</code></li></ul></li><li><p><strong>自定义 Starter 实现</strong></p><ul><li>自定义 <code>@EnableXXX</code> 注解</li><li><code>ImportSelector</code>、<code>ImportBeanDefinitionRegistrar</code> 实现原理</li></ul></li></ul>',29)]))}const s=i(r,[["render",c],["__file","1_spring_framework.html.vue"]]),d=JSON.parse('{"path":"/spring/1_spring_framework.html","title":"Spring Framework","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、Spring IOC - 控制反转与依赖注入","slug":"一、spring-ioc-控制反转与依赖注入","link":"#一、spring-ioc-控制反转与依赖注入","children":[{"level":3,"title":"1、 Spring 容器初始化流程","slug":"_1、-spring-容器初始化流程","link":"#_1、-spring-容器初始化流程","children":[]},{"level":3,"title":"2、 Bean 的生命周期解析","slug":"_2、-bean-的生命周期解析","link":"#_2、-bean-的生命周期解析","children":[]},{"level":3,"title":"3、依赖注入原理","slug":"_3、依赖注入原理","link":"#_3、依赖注入原理","children":[]}]},{"level":2,"title":"二、Spring AOP - 面向切面编程","slug":"二、spring-aop-面向切面编程","link":"#二、spring-aop-面向切面编程","children":[{"level":3,"title":"1、动态代理原理","slug":"_1、动态代理原理","link":"#_1、动态代理原理","children":[]},{"level":3,"title":"2、切面注解解析","slug":"_2、切面注解解析","link":"#_2、切面注解解析","children":[]},{"level":3,"title":"3、拦截链执行流程","slug":"_3、拦截链执行流程","link":"#_3、拦截链执行流程","children":[]}]},{"level":2,"title":"三、Design - 核心设计模式解析","slug":"三、design-核心设计模式解析","link":"#三、design-核心设计模式解析","children":[{"level":3,"title":"1、 Spring 三级缓存原理","slug":"_1、-spring-三级缓存原理","link":"#_1、-spring-三级缓存原理","children":[]},{"level":3,"title":"2、数据类型转换工厂设计实现","slug":"_2、数据类型转换工厂设计实现","link":"#_2、数据类型转换工厂设计实现","children":[]}]},{"level":2,"title":"四、Spring 高级特性解析","slug":"四、spring-高级特性解析","link":"#四、spring-高级特性解析","children":[{"level":3,"title":"1、Spring 事件机制","slug":"_1、spring-事件机制","link":"#_1、spring-事件机制","children":[]},{"level":3,"title":"2、Spring 事务管理","slug":"_2、spring-事务管理","link":"#_2、spring-事务管理","children":[]},{"level":3,"title":"3、Spring 扩展点解析","slug":"_3、spring-扩展点解析","link":"#_3、spring-扩展点解析","children":[]}]}],"git":{"updatedTime":1745328399000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":4,"url":"https://github.com/Clarence"}]},"filePathRelative":"spring/1_spring_framework.md"}');export{s as comp,d as data};
