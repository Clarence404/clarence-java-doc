import{_ as o,c as i,a as l,o as n}from"./app-CdoxrDqs.js";const t={};function r(a,e){return n(),i("div",null,e[0]||(e[0]=[l('<h1 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot"><span>Spring Boot</span></a></h1><div class="hint-container warning"><p class="hint-container-title">Todo</p><p>以下只是基础大纲，后续需要持续增加内容</p></div><h2 id="一、spring-boot-启动流程" tabindex="-1"><a class="header-anchor" href="#一、spring-boot-启动流程"><span>一、Spring Boot 启动流程</span></a></h2><h3 id="_1、springapplication-run-启动流程解析" tabindex="-1"><a class="header-anchor" href="#_1、springapplication-run-启动流程解析"><span>1、<code>SpringApplication.run()</code> 启动流程解析</span></a></h3><ul><li><strong>启动入口</strong> <code>SpringApplication.run()</code> 详解 <ul><li>创建 <code>SpringApplication</code> 对象</li><li>判断应用类型（<code>REACTIVE</code>、<code>SERVLET</code>）</li><li>加载 <code>ApplicationContext</code></li><li><strong>启动监听器</strong> 发布 <code>ApplicationStartingEvent</code></li><li><strong>加载 <code>ApplicationContext</code> 环境</strong>（<code>Environment</code>）</li><li><strong>执行初始化器</strong> <code>ApplicationContextInitializer</code></li><li><strong>执行 <code>Bean</code> 定义加载</strong></li><li><strong>执行 <code>CommandLineRunner</code>、<code>ApplicationRunner</code></strong></li></ul></li></ul><h3 id="_2、springfactoriesloader-自动装配机制" tabindex="-1"><a class="header-anchor" href="#_2、springfactoriesloader-自动装配机制"><span>2、<code>SpringFactoriesLoader</code> 自动装配机制</span></a></h3><ul><li><strong><code>META-INF/spring.factories</code> 文件加载原理</strong><ul><li><code>SpringFactoriesLoader.loadFactoryNames()</code> 源码分析</li><li><strong>加载自动配置类</strong>：<code>@EnableAutoConfiguration</code> 生效流程</li><li><strong>常见自动配置类源码解析</strong>（<code>DataSourceAutoConfiguration</code>、<code>RedisAutoConfiguration</code>）</li></ul></li></ul><h3 id="_3、核心注解解析" tabindex="-1"><a class="header-anchor" href="#_3、核心注解解析"><span>3、核心注解解析</span></a></h3><ul><li><p><strong><code>@SpringBootApplication</code></strong></p><ul><li><code>@Configuration</code> — 支持 <code>@Bean</code> 声明</li><li><code>@ComponentScan</code> — 扫描当前包路径及子包</li><li><code>@EnableAutoConfiguration</code> — 开启自动配置</li></ul></li><li><p><strong><code>@EnableAutoConfiguration</code></strong> 原理剖析</p><ul><li><code>AutoConfigurationImportSelector</code></li><li><code>@Conditional</code> 系列注解条件匹配</li></ul></li></ul><h2 id="二、-spring-boot-自动配置" tabindex="-1"><a class="header-anchor" href="#二、-spring-boot-自动配置"><span>二、 Spring Boot 自动配置</span></a></h2><h3 id="_1、条件注解原理" tabindex="-1"><a class="header-anchor" href="#_1、条件注解原理"><span>1、条件注解原理</span></a></h3><ul><li><strong>核心条件注解解析</strong><ul><li><code>@ConditionalOnClass</code> —— 判断 Class 是否存在</li><li><code>@ConditionalOnMissingBean</code> —— 判断 Bean 是否已存在</li><li><code>@ConditionalOnProperty</code> —— 判断配置文件中的属性值</li><li><code>@ConditionalOnWebApplication</code> —— 判断是否 Web 环境</li></ul></li></ul><h3 id="_2、-自定义-starter-模块实现" tabindex="-1"><a class="header-anchor" href="#_2、-自定义-starter-模块实现"><span>2、 自定义 Starter 模块实现</span></a></h3><ul><li><p><strong>创建 Starter 项目基本结构</strong></p><ul><li><code>spring-boot-starter-xxx</code>（提供依赖）</li><li><code>spring-boot-autoconfigure-xxx</code>（提供自动配置）</li></ul></li><li><p><strong>实现核心自动配置类</strong></p><ul><li>创建 <code>XXXAutoConfiguration</code> 配置类</li><li>配置 <code>spring.factories</code> 注册</li></ul></li><li><p><strong>实战案例</strong>：手写一个 <code>RedisCacheStarter</code> 自动配置 Starter</p></li></ul><h3 id="_3、-自定义配置绑定" tabindex="-1"><a class="header-anchor" href="#_3、-自定义配置绑定"><span>3、 自定义配置绑定</span></a></h3><ul><li><p><strong><code>@ConfigurationProperties</code></strong> 属性绑定原理</p><ul><li>支持对象层级绑定</li><li>支持松散绑定、List、Map、嵌套对象</li><li><strong>绑定校验</strong>（<code>@Validated</code>）</li></ul></li><li><p><strong>自定义属性绑定与注入</strong></p><ul><li>编写 <code>MyProperties</code></li><li><code>Binder</code> 手动绑定复杂属性</li></ul></li></ul><h2 id="三、spring-boot-actuator-监控" tabindex="-1"><a class="header-anchor" href="#三、spring-boot-actuator-监控"><span>三、Spring Boot Actuator 监控</span></a></h2><h3 id="_1、actuator-核心功能介绍" tabindex="-1"><a class="header-anchor" href="#_1、actuator-核心功能介绍"><span>1、Actuator 核心功能介绍</span></a></h3><ul><li><p><strong>启动 Actuator</strong></p><ul><li>引入 <code>spring-boot-starter-actuator</code></li><li>开启默认监控端点</li></ul></li><li><p><strong>默认提供的端点解析</strong></p><ul><li><code>health</code> — 健康检查</li><li><code>info</code> — 应用信息</li><li><code>metrics</code> — 运行指标（内存、CPU、线程）</li><li><code>env</code> — 环境变量</li><li><code>beans</code> — 查看 Bean 列表</li></ul></li></ul><h3 id="_2、自定义监控端点" tabindex="-1"><a class="header-anchor" href="#_2、自定义监控端点"><span>2、自定义监控端点</span></a></h3><ul><li><p><strong>创建自定义端点</strong></p><ul><li><code>@Endpoint</code> 自定义端点</li><li><code>@ReadOperation</code>、<code>@WriteOperation</code> 支持 GET / POST</li><li><code>@Selector</code> 动态路径参数</li></ul></li><li><p><strong>实战案例</strong>：创建 <code>systemStats</code> 自定义监控端点</p><ul><li>输出 CPU、内存、磁盘使用率</li></ul></li></ul><h3 id="_3、-健康检查扩展" tabindex="-1"><a class="header-anchor" href="#_3、-健康检查扩展"><span>3、 健康检查扩展</span></a></h3><ul><li><p><strong>自定义健康检查状态</strong></p><ul><li>实现 <code>HealthIndicator</code></li><li>扩展 <code>Health</code> 状态详情</li></ul></li><li><p><strong>实战案例</strong>：创建 <code>MySQLHealthIndicator</code> 检查数据库状态</p></li></ul><h3 id="_4、-prometheus-监控集成" tabindex="-1"><a class="header-anchor" href="#_4、-prometheus-监控集成"><span>4、 Prometheus 监控集成</span></a></h3><ul><li><strong>暴露 Prometheus 端点</strong><ul><li><code>management.endpoints.web.exposure.include=prometheus</code></li><li>配置 Prometheus 拉取指标</li><li>Grafana 可视化展示</li></ul></li></ul><h2 id="四、spring-boot-web-特性解析" tabindex="-1"><a class="header-anchor" href="#四、spring-boot-web-特性解析"><span>四、Spring Boot Web 特性解析</span></a></h2><h3 id="_1、内嵌-web-容器" tabindex="-1"><a class="header-anchor" href="#_1、内嵌-web-容器"><span>1、内嵌 Web 容器</span></a></h3><ul><li><strong>Tomcat、Jetty、Undertow</strong> 原理解析 <ul><li>嵌入式 WebServer 启动流程</li><li><code>ServletWebServerFactory</code> 自定义容器</li></ul></li></ul><h3 id="_2、restful-api-开发" tabindex="-1"><a class="header-anchor" href="#_2、restful-api-开发"><span>2、Restful API 开发</span></a></h3><ul><li><strong><code>@RestController</code> vs <code>@Controller</code> 区别</strong><ul><li><strong>参数绑定</strong>：<code>@RequestParam</code>、<code>@PathVariable</code>、<code>@RequestBody</code></li><li><strong>返回值解析</strong>：<code>ResponseBodyAdvice</code>、<code>HandlerMethodArgumentResolver</code></li></ul></li></ul><h3 id="_3、spring-boot-异常处理" tabindex="-1"><a class="header-anchor" href="#_3、spring-boot-异常处理"><span>3、Spring Boot 异常处理</span></a></h3><ul><li><strong><code>@ExceptionHandler</code> 自定义异常处理</strong><ul><li>统一异常返回封装</li><li><code>ErrorController</code> 自定义错误页面</li></ul></li></ul>',32)]))}const c=o(t,[["render",r],["__file","0_springboot.html.vue"]]),d=JSON.parse('{"path":"/springboot/0_springboot.html","title":"Spring Boot","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、Spring Boot 启动流程","slug":"一、spring-boot-启动流程","link":"#一、spring-boot-启动流程","children":[{"level":3,"title":"1、SpringApplication.run() 启动流程解析","slug":"_1、springapplication-run-启动流程解析","link":"#_1、springapplication-run-启动流程解析","children":[]},{"level":3,"title":"2、SpringFactoriesLoader 自动装配机制","slug":"_2、springfactoriesloader-自动装配机制","link":"#_2、springfactoriesloader-自动装配机制","children":[]},{"level":3,"title":"3、核心注解解析","slug":"_3、核心注解解析","link":"#_3、核心注解解析","children":[]}]},{"level":2,"title":"二、 Spring Boot 自动配置","slug":"二、-spring-boot-自动配置","link":"#二、-spring-boot-自动配置","children":[{"level":3,"title":"1、条件注解原理","slug":"_1、条件注解原理","link":"#_1、条件注解原理","children":[]},{"level":3,"title":"2、 自定义 Starter 模块实现","slug":"_2、-自定义-starter-模块实现","link":"#_2、-自定义-starter-模块实现","children":[]},{"level":3,"title":"3、 自定义配置绑定","slug":"_3、-自定义配置绑定","link":"#_3、-自定义配置绑定","children":[]}]},{"level":2,"title":"三、Spring Boot Actuator 监控","slug":"三、spring-boot-actuator-监控","link":"#三、spring-boot-actuator-监控","children":[{"level":3,"title":"1、Actuator 核心功能介绍","slug":"_1、actuator-核心功能介绍","link":"#_1、actuator-核心功能介绍","children":[]},{"level":3,"title":"2、自定义监控端点","slug":"_2、自定义监控端点","link":"#_2、自定义监控端点","children":[]},{"level":3,"title":"3、 健康检查扩展","slug":"_3、-健康检查扩展","link":"#_3、-健康检查扩展","children":[]},{"level":3,"title":"4、 Prometheus 监控集成","slug":"_4、-prometheus-监控集成","link":"#_4、-prometheus-监控集成","children":[]}]},{"level":2,"title":"四、Spring Boot Web 特性解析","slug":"四、spring-boot-web-特性解析","link":"#四、spring-boot-web-特性解析","children":[{"level":3,"title":"1、内嵌 Web 容器","slug":"_1、内嵌-web-容器","link":"#_1、内嵌-web-容器","children":[]},{"level":3,"title":"2、Restful API 开发","slug":"_2、restful-api-开发","link":"#_2、restful-api-开发","children":[]},{"level":3,"title":"3、Spring Boot 异常处理","slug":"_3、spring-boot-异常处理","link":"#_3、spring-boot-异常处理","children":[]}]}],"git":{"updatedTime":1749437005000,"contributors":[{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hanchen"},{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":2,"url":"https://github.com/Clarence"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hello0709"}]},"filePathRelative":"springboot/0_springboot.md"}');export{c as comp,d as data};
