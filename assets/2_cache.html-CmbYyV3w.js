import{_ as c,c as i,b as s,d as a,e,f as t,a as l,r as o,o as u}from"./app-CL6quLEm.js";const k="/clarence-java-doc/assets/cache-diff-one-Bpb7jqin.png",r="/clarence-java-doc/assets/cache-diff-two-Cl0Q5lfW.png",d={};function v(m,n){const p=o("RouteLink");return u(),i("div",null,[n[7]||(n[7]=s("h1",{id:"java-总结-缓存",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#java-总结-缓存"},[s("span",null,"Java 总结-缓存")])],-1)),n[8]||(n[8]=s("h2",{id:"一、缓存和数据库一致性问题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一、缓存和数据库一致性问题"},[s("span",null,"一、缓存和数据库一致性问题")])],-1)),s("p",null,[n[1]||(n[1]=a("更多深入了解：")),e(p,{to:"/cache/1_redis.html#十一、缓存一致性"},{default:t(()=>n[0]||(n[0]=[a("缓存一致性")])),_:1})]),n[9]||(n[9]=l(`<p><strong>【场景一】</strong> 先操作缓存，再写数据库成功之前，如果有读请求发生，可能导致旧数据入缓存，引发数据不一致。在分布式环境下，数据的读 写都是并发的，一个服务多机器部署，对同一个数据进行读写，在数据库层面并不能保证完成顺序，就有可能后读的操作先完成 （读取到的是脏数据），如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。</p><h3 id="_1、延迟双删-缓存-库-缓存" tabindex="-1"><a class="header-anchor" href="#_1、延迟双删-缓存-库-缓存"><span>1、延迟双删（缓存-库-缓存）</span></a></h3><p><strong>【解决办法】</strong>：<br></p><ul><li>可采用更新前后双删除缓存策略；<br><blockquote><p>参考链接：<a href="https://mp.weixin.qq.com/s/CR7e6pjKd5cPdVnkq5mqbw" target="_blank" rel="noopener noreferrer">延迟双删如此好用，为何大厂从来不用</a></p></blockquote></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 缓存客户端，比如 Redis</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">CacheClient</span> cacheClient<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 数据库服务接口</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">DatabaseService</span> databaseService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CacheService</span><span class="token punctuation">(</span><span class="token class-name">CacheClient</span> cacheClient<span class="token punctuation">,</span> <span class="token class-name">DatabaseService</span> databaseService<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheClient <span class="token operator">=</span> cacheClient<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>databaseService <span class="token operator">=</span> databaseService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDataWithCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 第一次删除缓存</span></span>
<span class="line">        cacheClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2. 更新数据库</span></span>
<span class="line">        databaseService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 3. 延迟删除缓存</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 延迟一段时间（具体时间根据业务实际情况设定，通常是事务提交所需时间）</span></span>
<span class="line">                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                cacheClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;延迟双删任务被中断：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>可以通过“串行化”解决，保证同一个数据的读写落在同一个后端服务上:</p><ul><li><p>核心思路：</p><p>通过<span style="color:red;"><strong>哈希一致性或分布式锁，确保对同一个 key 的读写请求串行执行</strong></span>，从而避免并发冲突。</p></li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheServiceWithSerialization</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 缓存客户端</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">CacheClient</span> cacheClient<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 数据库服务接口</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">DatabaseService</span> databaseService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 本地锁示例</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDataWithSerialization</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取分布式锁，确保同一时刻只有一个线程操作 key</span></span>
<span class="line">        <span class="token keyword">boolean</span> lockAcquired <span class="token operator">=</span> <span class="token class-name">DistributedLock</span><span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lockAcquired<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未能获得锁，操作已被其他线程占用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 1. 写缓存</span></span>
<span class="line">            cacheClient<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 2. 更新数据库</span></span>
<span class="line">            databaseService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 3. 删除缓存</span></span>
<span class="line">            cacheClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">DistributedLock</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放分布式锁</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【场景二】</strong> 先操作数据库，再清除缓存。如果删缓存失败了，就会出现数据不一致问题。</p><h3 id="_2、先改库-后删缓存" tabindex="-1"><a class="header-anchor" href="#_2、先改库-后删缓存"><span>2、先改库，后删缓存</span></a></h3><p><strong>【方案一】</strong> ：将删除失败的 key 值存入队列中重复删除，如下图：</p><p><img src="`+k+'" alt="img.png"></p><p>（1）更新数据库数据。</p><p>（2）缓存因为种种问题删除失败。</p><p>（3）将需要删除的 key 发送至消息队列。</p><p>（4）自己消费消息，获得需要删除的 key。</p><p>（5）继续重试删除操作，直到成功。</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>【缺点】：对业务线代码造成大量的侵入。于是有了方案二。</p></div><p><strong>【方案二】</strong>：通过订阅 binlog 获取需要重新删除的 Key 值数据。在应用程序中，另起一段程序，获得这个订阅程序传来的消息， 进行删除缓存操作。</p><p><img src="'+r+`" alt="img.png"></p><p>（1）更新数据库数据</p><p>（2）数据库会将操作信息写入 binlog 日志当中</p><p>（3）订阅程序提取出所需要的数据以及 key</p><p>（4）另起一段非业务代码，获得该信息</p><p>（5）尝试删除缓存操作，发现删除失败</p><p>（6）将这些信息发送至消息队列</p><p>（7）重新从消息队列中获得该数据，重试操作</p><h2 id="二、redis-内存用完会发生什么" tabindex="-1"><a class="header-anchor" href="#二、redis-内存用完会发生什么"><span>二、Redis 内存用完会发生什么?</span></a></h2><p>Redis 是一个基于内存的数据库，所有数据都存储在内存中。当内存用完时，Redis 的行为取决于配置，可能包括：</p><ul><li><p>默认情况下，新写入操作会失败，Redis 返回错误。</p></li><li><p>如果设置了 maxmemory 和 maxmemory-policy，Redis 会根据指定策略回收内存，比如淘汰最少使用的键（LRU 算法）或即将过期的键。</p></li><li><p><strong>如果没有合理配置，内存压力可能导致操作系统触发 OOM（Out of Memory）机制，将 Redis 进程终止</strong>。</p></li></ul><h2 id="三、redis-过期策略" tabindex="-1"><a class="header-anchor" href="#三、redis-过期策略"><span>三、Redis 过期策略？</span></a></h2><p>Redis 支持为某些键（key）设置过期时间（TTL，Time To Live），当键的生存时间过期后，Redis 会自动删除该键。过期策略是 Redis 保证键值过期自动清除的机制。</p><p>Redis 提供了多种方式来设置键的过期时间：</p><ul><li>使用 EXPIRE 命令设置键的过期时间。</li><li>使用 SET 命令的 EX（秒）和 PX（毫秒）参数来设置过期时间。</li><li>使用 PERSIST 命令来移除过期时间。</li></ul><p>Redis 的过期策略包括：</p><p><strong>惰性删除</strong>：当你访问某个键时，Redis 会检查该键是否已经过期，如果过期则删除它。换句话说，只有当你访问过期的键时，它才会被删除。</p><p><strong>定期删除</strong>：为了避免惰性删除带来的性能问题，Redis 会周期性地检查一些键的过期时间，并删除那些已经过期的键。这个操作是通过定时 任务（默认每 100 毫秒）进行的，检查一部分过期的键。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>但是实际上这还是有问题的，如果定期删除漏掉了很多过期 key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期 key 堆积在内存里，导致 Redis 内存块耗尽了，咋整？</p><p>答案是：<strong>走内存淘汰机制</strong>。</p></div><h2 id="四、redis-内存淘汰机制" tabindex="-1"><a class="header-anchor" href="#四、redis-内存淘汰机制"><span>四、Redis 内存淘汰机制</span></a></h2><h3 id="_1、常见的淘汰机制对比" tabindex="-1"><a class="header-anchor" href="#_1、常见的淘汰机制对比"><span>1、常见的淘汰机制对比</span></a></h3><table><thead><tr><th>策略名称</th><th>描述</th></tr></thead><tbody><tr><td>noeviction</td><td>默认策略，当内存不足时，不会淘汰任何数据，新写操作会失败，返回错误。</td></tr><tr><td>allkeys-lru</td><td>从所有键中移除最近最少使用的键（基于 LRU）。</td></tr><tr><td>volatile-lru</td><td>从设置了过期时间的键中移除最近最少使用的键（基于 LRU）。</td></tr><tr><td>allkeys-random</td><td>从所有键中随机移除一个键。</td></tr><tr><td>volatile-random</td><td>从设置了过期时间的键中随机移除一个键。</td></tr><tr><td>volatile-ttl</td><td>从设置了过期时间的键中移除即将过期（TTL 最小）的键。</td></tr><tr><td>allkeys-lfu</td><td>从所有键中移除最不常使用的键（基于 LFU）。</td></tr><tr><td>volatile-lfu</td><td>从设置了过期时间的键中移除最不常使用的键（基于 LFU）。</td></tr></tbody></table><h3 id="_2、手写一个-lru-算法" tabindex="-1"><a class="header-anchor" href="#_2、手写一个-lru-算法"><span>2、手写一个 LRU 算法</span></a></h3><ul><li>最简单：LinkedHashMap实现</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashMap</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 使用 LinkedHashMap 实现 LRU 缓存</span>
<span class="line"> * 时间复杂度：O(1)</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// true 表示按照访问顺序（access order）而不是插入顺序</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token number">0.75F</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 当元素个数超过容量时，返回 true，自动移除最老的元素</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> capacity<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {1=A, 2=B, 3=C}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 访问 key=1，会让 1 移到队尾</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {2=B, 3=C, 1=A}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 插入新元素，触发淘汰最久未使用的 key=2</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {3=C, 1=A, 4=D}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>次简单：HashMap + LinkedList</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>clarence<span class="token punctuation">.</span>mdm<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 使用 LinkedList + HashMap 实现 LRU 缓存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> * 时间复杂度：O(n)</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> ChenHan</span>
<span class="line"> * <span class="token keyword">@date</span> 2025/10/10</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SimpleLRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> order<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SimpleLRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span></span>
<span class="line">        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        order<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// O(n)</span></span>
<span class="line">        order<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> order<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">K</span> oldest <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>oldest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        order<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> order<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">K</span> key <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> order<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SimpleLRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleLRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {1=A, 2=B, 3=C}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 访问 key=1，会让 1 移到队尾</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {2=B, 3=C, 1=A}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 插入新元素，触发淘汰最久未使用的 key=2</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {3=C, 1=A, 4=D}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>标准写法：HashMap + 双向链表</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 双向链表节点</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">K</span> key<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">V</span> value<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Node</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            key <span class="token operator">=</span> k<span class="token punctuation">;</span></span>
<span class="line">            value <span class="token operator">=</span> v<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Node</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取元素</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Node</span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">moveToTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问后移动到尾部</span></span>
<span class="line">        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 插入或更新元素</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Node</span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">moveToTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">addToTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">removeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将节点移动到尾部</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">moveToTail</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">addToTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 添加节点到尾部</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addToTail</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> tail<span class="token punctuation">;</span></span>
<span class="line">            tail <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            head <span class="token operator">=</span> tail <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 删除链表中的节点</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>prev <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> head <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> tail <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 删除头节点（最久未使用）</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Node</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">            head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            head <span class="token operator">=</span> next<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 打印缓存状态</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Node</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 测试</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">printCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {1=A, 2=B, 3=C}</span></span>
<span class="line"></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 访问 key=1</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">printCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {2=B, 3=C, 1=A}</span></span>
<span class="line"></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 超过容量，淘汰 key=2</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">printCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {3=C, 1=A, 4=D}</span></span>
<span class="line"></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 访问 key=3</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">printCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {1=A, 4=D, 3=C}</span></span>
<span class="line"></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 淘汰 key=1</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">printCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {4=D, 3=C, 5=E}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、缓存穿透、缓存击穿、缓存雪崩和缓存刷新" tabindex="-1"><a class="header-anchor" href="#五、缓存穿透、缓存击穿、缓存雪崩和缓存刷新"><span>五、缓存穿透、缓存击穿、缓存雪崩和缓存刷新</span></a></h2><h3 id="_1、缓存穿透-cache-penetration" tabindex="-1"><a class="header-anchor" href="#_1、缓存穿透-cache-penetration"><span>1、缓存穿透（Cache Penetration）：</span></a></h3><p>缓存穿透是指查询一个数据，如果这个<span style="color:red;"><strong>数据在缓存中不存在并且数据库中也不存在</strong></span> ，那么该请求会直接访问数据库。这种情况会导致每次请求都去查询数据库，从而绕过了缓存机制，影响系统的性能。</p><p><strong>发生原因</strong>：</p><ul><li>用户查询的数据在缓存和数据库中都没有，通常是由于缓存的空数据没有设置好（没有缓存失败的记录）或者数据库中并未存在数据。</li></ul><p><strong>应对方案：</strong></p><ul><li><p><strong>缓存空对象</strong>： 对于查询结果为空的数据，可以将空数据（例如，返回空的 JSON 或者一个特殊的标志值）也缓存一段时间， 避免重复查询数据库。</p></li><li><p><strong>布隆过滤器（Bloom Filter）</strong>：通过布隆过滤器在查询缓存之前先过滤掉那些根本不存在的数据，避免无效查询直接到数据库。</p></li><li><p><strong>全局查询校验</strong>：使用应用层或 API 层的校验来保证访问的数据必须经过有效性验证。</p></li></ul><h3 id="_2、缓存击穿-cache-breakdown" tabindex="-1"><a class="header-anchor" href="#_2、缓存击穿-cache-breakdown"><span>2、缓存击穿（Cache Breakdown）：</span></a></h3><p>缓存击穿是指<span style="color:red;"><strong>某一时刻，大量的请求同时访问某个缓存失效的数据</strong></span> （通常是在数据的缓存过期的瞬间），导致大量请求同时访问数据库，进而产生数据库的压力。</p><p><strong>发生原因</strong>：</p><ul><li>因为缓存过期时间统一，导致缓存过期的瞬间会有多个请求同时访问，造成缓存失效瞬间的流量激增，影响数据库性能。</li></ul><p><strong>应对方案：</strong></p><ul><li><p><strong>设置合理的缓存过期时间</strong>：使用不易过期或者过期时间设置得较为分散，避免同一时刻缓存大量失效。</p></li><li><p><strong>加锁机制（缓存重建时锁）</strong>：当缓存失效时，第一个请求会去数据库查询并更新缓存，其他请求等待缓存更新，避免同一时刻多个请 求同时访问数据库。</p></li><li><p><strong>互斥锁（Mutex Lock）或 Redis 分布式锁</strong>：通过加锁机制，确保只有一个请求去数据库查询数据，缓存中的数据可以在请求期间重建。</p></li></ul><h3 id="_3、缓存雪崩-cache-avalanche" tabindex="-1"><a class="header-anchor" href="#_3、缓存雪崩-cache-avalanche"><span>3、缓存雪崩（Cache Avalanche）:</span></a></h3><p>缓存雪崩是指<span style="color:red;"><strong>在同一时刻大量缓存过期或失效，导致大量请求直接访问数据库</strong></span> ，最终造成数据库的压力过大，无法承载，系统可能出现崩溃。</p><p><strong>发生原因</strong>：</p><ul><li><p>缓存的过期时间过于集中，导致缓存同时过期。</p></li><li><p>配置不当的缓存策略或没有分布式缓存的协调，导致大量请求访问后端数据库。</p></li></ul><p><strong>应对方案</strong>：</p><ul><li><p><strong>避免缓存集中失效</strong>：使用缓存的过期时间设置为随机值（例如，加上一些随机的时间范围），使得缓存过期时间不一致。</p></li><li><p><strong>使用备用缓存（热点数据预热）</strong>：对于重要数据，可以通过定时任务或者主动刷新策略提前预加载缓存，以避免数据库被打爆。</p></li><li><p><strong>限流、降级机制</strong>：使用熔断、限流、降级等策略，防止系统在数据库压力过大的时候还继续请求。</p></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>对于 Redis 挂掉了，请求全部走数据库，也属于缓存雪崩，我们可以有以下思路进行解决：</p><p><strong>事发前</strong>：实现 Redis 的高可用（主从架构+Sentinel 或者 Redis Cluster），尽可能避免 Redis 挂掉这种情况。</p><p><strong>事发中</strong>：万一 Redis 真的挂了，我们可以设置本地缓存（ehcache）+ 限流（hystrix），尽量避免我们的数据库被干掉。</p><p><strong>事发后</strong>：Redis 持久化，重启后自动从磁盘上加载数据，快速恢复缓存数据。</p></div><h3 id="_4、缓存刷新-cache-refresh" tabindex="-1"><a class="header-anchor" href="#_4、缓存刷新-cache-refresh"><span>4、缓存刷新（Cache Refresh）：</span></a></h3><p>缓存刷新是指缓存中的数据保持实时性的问题，需要保证缓存和数据库中的数据一致性或定期更新缓存数据。</p><p><strong>发生原因</strong>：</p><ul><li>缓存的更新和数据库中的数据不一致，可能会导致读取的缓存数据是过时的。</li></ul><p><strong>应对方案</strong>：</p><ul><li><p><strong>主动更新缓存</strong>：在对数据库数据进行写操作时，主动删除缓存或更新缓存中的相关数据，保持一致性。</p></li><li><p><strong>设置合理的缓存过期时间</strong>：定期失效缓存，以促使系统进行数据刷新。</p></li><li><p><strong>双写策略（写缓存与写数据库）</strong>：对于需要更新数据的操作，可以使用 &quot;先更新缓存再更新数据库&quot; 或者 &quot;先更新数据库再更新缓存&quot; 等方式来确保缓存及时刷新。</p></li><li><p><strong>定时刷新</strong>：使用定时任务定期更新缓存数据，避免缓存内容过于陈旧。</p></li></ul><h2 id="六、redis-的常用数据结构有哪些" tabindex="-1"><a class="header-anchor" href="#六、redis-的常用数据结构有哪些"><span>六、Redis 的常用数据结构有哪些？</span></a></h2><h3 id="_1-string-字符串" tabindex="-1"><a class="header-anchor" href="#_1-string-字符串"><span>1. <strong>String（字符串）</strong></span></a></h3><ul><li><p>最基本、最常用的数据结构，支持普通的 <code>set/get</code> 操作。</p></li><li><p>Value 可以是字符串，也可以是数字，适合用来做简单的缓存和计数功能。</p></li><li><p>应用示例：</p><ul><li><p>缓存热点数据，如配置信息、Token、验证码等。</p></li><li><p>实现简单的计数器，比如文章阅读量、点赞数、限流等。</p></li></ul></li></ul><h3 id="_2-hash-哈希表" tabindex="-1"><a class="header-anchor" href="#_2-hash-哈希表"><span>2. <strong>Hash（哈希表）</strong></span></a></h3><ul><li><p>以键值对（field-value）形式存储，适合存放对象类型的数据。</p></li><li><p>可以直接对某个字段进行单独读取或修改，非常灵活。</p></li><li><p>应用示例：</p><ul><li><p>存储用户信息（如：以 CookieId 或 UserId 作为 Key，存储用户登录状态等）。</p></li><li><p>实现轻量级的 Session 机制，结合设置过期时间（如 30 分钟失效），模拟类似 Session 的效果。</p></li></ul></li></ul><h3 id="_3-list-列表" tabindex="-1"><a class="header-anchor" href="#_3-list-列表"><span>3. <strong>List（列表）</strong></span></a></h3><ul><li><p>一个链表结构，可以按照插入顺序排序，支持元素的插入、删除等操作。</p></li><li><p>可以从两端推入或弹出元素（支持队列和栈的应用）。</p></li><li><p>应用示例：</p><ul><li><p>实现简单的消息队列系统（如：生产者-消费者模型）。</p></li><li><p>基于 <code>lrange</code> 命令实现分页查询，提升大数据量场景下的读取效率。</p></li></ul></li></ul><h3 id="_4-set-集合" tabindex="-1"><a class="header-anchor" href="#_4-set-集合"><span>4. <strong>Set（集合）</strong></span></a></h3><ul><li><p>无序集合，元素具有唯一性（去重特性）。</p></li><li><p>支持集合间的交集、并集、差集等操作。</p></li><li><p>应用示例：</p><ul><li><p>全局唯一性校验，比如防止用户重复签到、IP去重等。</p></li><li><p>社交系统中，计算共同好友（交集）、所有好友（并集）、特有好友（差集）等。</p></li></ul></li></ul><h3 id="_5-sorted-set-有序集合" tabindex="-1"><a class="header-anchor" href="#_5-sorted-set-有序集合"><span>5. <strong>Sorted Set（有序集合）</strong></span></a></h3><ul><li><p>类似 Set，但是每个元素都会关联一个权重（Score），元素按 Score 从小到大自动排序。</p></li><li><p>既能去重，又能排序，功能更强大。</p></li><li><p>应用示例：</p><ul><li><p>实现排行榜系统，如游戏积分排行、文章热度排行，支持快速取出 Top N。</p></li><li><p>构建延时队列，使用 Score 作为时间戳，按时间顺序处理任务。</p></li></ul></li></ul>`,84)),s("p",null,[n[3]||(n[3]=s("strong",null,"更多类型",-1)),n[4]||(n[4]=a("： ")),e(p,{to:"/cache/1_redis.md#一、redis数据结构"},{default:t(()=>n[2]||(n[2]=[a("缓存：Redis数据结构")])),_:1})]),n[10]||(n[10]=l('<h2 id="七、本地缓存与分布式缓存" tabindex="-1"><a class="header-anchor" href="#七、本地缓存与分布式缓存"><span>七、本地缓存与分布式缓存</span></a></h2><h3 id="_1、本地缓存-local-cache-如-caffeine" tabindex="-1"><a class="header-anchor" href="#_1、本地缓存-local-cache-如-caffeine"><span>1、本地缓存（Local Cache，如 Caffeine）</span></a></h3><p><strong>优势</strong>：</p><ul><li>无需网络通信，访问速度极快。</li><li>在高并发场景下能显著降低后端压力，提升系统性能。</li></ul><p><strong>劣势</strong>：</p><ul><li>占用应用进程的堆内存，增加 GC 压力。</li><li>容量受限于单机资源，缓存内容无法在多实例间共享。</li></ul><hr><h3 id="_2、分布式缓存-distributed-cache-如-redis" tabindex="-1"><a class="header-anchor" href="#_2、分布式缓存-distributed-cache-如-redis"><span>2、分布式缓存（Distributed Cache，如 Redis）</span></a></h3><p><strong>优势</strong>：</p><ul><li>可横向扩展（通过集群方式），容量几乎无限。</li><li>多个系统/服务可以共享同一份缓存数据。</li></ul><p><strong>劣势</strong>：</p><ul><li>存在网络延迟，访问速度相对本地缓存较慢。</li><li>数据需要序列化/反序列化，增加了额外开销。</li><li>需要独立部署和维护分布式缓存系统（如 Redis 集群）。</li></ul><hr><div class="hint-container tip"><p class="hint-container-title">使用建议</p><ul><li><p><strong>本地缓存</strong> 适合：</p><ul><li>数据量较小</li><li>访问频率高且可预见</li><li>对延迟敏感的数据（例如热点数据）</li><li>特别适合缓存<strong>不变对象</strong></li></ul></li><li><p><strong>分布式缓存</strong> 适合：</p><ul><li>数据量较大</li><li>访问模式不可预测</li></ul></li><li><p>需要跨服务共享缓存的场景</p></li></ul></div><h2 id="八、redis-的线程模型" tabindex="-1"><a class="header-anchor" href="#八、redis-的线程模型"><span>八、Redis 的线程模型</span></a></h2><p>Todo</p><h2 id="九、redis-的并发竞争问题" tabindex="-1"><a class="header-anchor" href="#九、redis-的并发竞争问题"><span>九、Redis 的并发竞争问题?</span></a></h2><p>Todo</p><h2 id="十、了解-redis-的事务吗" tabindex="-1"><a class="header-anchor" href="#十、了解-redis-的事务吗"><span>十、了解 Redis 的事务吗？</span></a></h2><p>Todo</p><h2 id="十一、redis-的选举算法和流程是怎样的" tabindex="-1"><a class="header-anchor" href="#十一、redis-的选举算法和流程是怎样的"><span>十一、Redis 的选举算法和流程是怎样的</span></a></h2><p>Todo</p><h2 id="十二、redis-的持久化机制" tabindex="-1"><a class="header-anchor" href="#十二、redis-的持久化机制"><span>十二、Redis 的持久化机制</span></a></h2><p>Redis 提供了两种主要的持久化方式，用于在服务重启后恢复数据：</p><h3 id="_1、rdb-redis-database-snapshot" tabindex="-1"><a class="header-anchor" href="#_1、rdb-redis-database-snapshot"><span>1、RDB（Redis DataBase Snapshot）</span></a></h3><p><strong>定义</strong>：</p><ul><li>将当前内存中的数据<strong>在某个时间点</strong>保存为一个二进制快照文件（<code>dump.rdb</code>）。</li><li>是一种<strong>周期性保存</strong>的机制，不是实时写盘。</li></ul><p><strong>特点</strong>：</p><ul><li>生成的文件紧凑，适合用于备份、灾难恢复。</li><li>恢复数据速度快，适合大规模数据的冷启动。</li><li>但是如果 Redis 异常宕机，最近一次保存之后的变更会<strong>丢失</strong>。</li></ul><p><strong>使用场景</strong>：</p><ul><li>对数据完整性要求不极端（能接受少量数据丢失）。</li><li>适合做<strong>冷备份</strong>、<strong>主从复制</strong>时初始同步。</li><li>内存数据量大，需要快速恢复时。</li></ul><h3 id="_2、aof-append-only-file" tabindex="-1"><a class="header-anchor" href="#_2、aof-append-only-file"><span>2、AOF（Append Only File）</span></a></h3><p><strong>定义</strong>：</p><ul><li>将所有对 Redis 的写操作（命令）以追加方式记录到日志文件（<code>appendonly.aof</code>）。</li><li>可以通过重新执行这些命令来恢复数据。</li></ul><p><strong>特点</strong>：</p><ul><li>数据更安全，可配置成几乎<strong>每次写操作都落盘</strong>（<code>appendfsync always</code>）。</li><li>文件体积会随着时间增长，但可以通过 AOF 重写（rewrite）机制压缩。</li><li>恢复数据速度慢于 RDB（因为需要逐条 replay 命令）。</li></ul><p><strong>使用场景</strong>：</p><ul><li>对数据一致性要求高（几乎不能丢数据）。</li><li>用于业务系统中<strong>数据敏感场景</strong>（如金融、电商订单系统等）。</li><li>需要实时持久化变化的缓存数据。</li></ul><h3 id="_3、rdb-vs-aof" tabindex="-1"><a class="header-anchor" href="#_3、rdb-vs-aof"><span>3、RDB vs AOF</span></a></h3><table><thead><tr><th style="text-align:left;">项目</th><th style="text-align:left;">RDB</th><th style="text-align:left;">AOF</th></tr></thead><tbody><tr><td style="text-align:left;">持久化时机</td><td style="text-align:left;">周期性快照</td><td style="text-align:left;">实时追加日志</td></tr><tr><td style="text-align:left;">数据安全性</td><td style="text-align:left;">可能丢失最近一次保存后的数据</td><td style="text-align:left;">丢失极少（取决于 fsync 策略）</td></tr><tr><td style="text-align:left;">文件大小</td><td style="text-align:left;">通常较小</td><td style="text-align:left;">通常较大，但可压缩</td></tr><tr><td style="text-align:left;">恢复速度</td><td style="text-align:left;">快</td><td style="text-align:left;">相对慢，需要逐条命令重放</td></tr><tr><td style="text-align:left;">使用场景</td><td style="text-align:left;">备份、快速冷启动</td><td style="text-align:left;">数据一致性要求高的业务场景</td></tr></tbody></table><hr><div class="hint-container tip"><p class="hint-container-title">建议</p><ul><li>如果对数据安全极度敏感 → 推荐使用 <strong>AOF</strong>。</li><li>如果追求恢复速度、且能接受部分数据丢失 → 推荐使用 <strong>RDB</strong>。</li><li><strong>生产环境通常同时开启 RDB + AOF</strong>，以兼顾性能与安全性。</li></ul></div><h2 id="十三、什么是缓存预热" tabindex="-1"><a class="header-anchor" href="#十三、什么是缓存预热"><span>十三、什么是缓存预热？</span></a></h2><p>新的缓存系统没有任何数据，在缓存重建数据的过程中，系统性能和数据负载都不太好，所以最好在系统上线之前就把缓存的热点数据加载到缓存 中，这种缓存预加载手段就是缓存预热。</p><h2 id="十四、什么是缓存热备" tabindex="-1"><a class="header-anchor" href="#十四、什么是缓存热备"><span>十四、什么是缓存热备？</span></a></h2><p>缓存热备既当一个缓存服务器不可用时能实时切换到备用缓存服务器，不影响缓存使用。集群模式下，每个主节点都会有一个或多个从节点备用， 一旦主节点挂掉，从节点会被哨兵提升为主节点使用。</p><h2 id="十五、怎么使用-redis-实现消息队列" tabindex="-1"><a class="header-anchor" href="#十五、怎么使用-redis-实现消息队列"><span>十五、怎么使用 Redis 实现消息队列？</span></a></h2><h2 id="十六、redis-热-key-问题如何解决" tabindex="-1"><a class="header-anchor" href="#十六、redis-热-key-问题如何解决"><span>十六、Redis 热 Key 问题如何解决?</span></a></h2><p>热key 问题是指某些键因高频访问导致 Redis 性能瓶颈或集群压力过高。这类问题通常发生在一些热门数据频繁被访问时，可能导致 Redis 服务器负载过重，甚至导致 Redis 崩溃。</p><h3 id="_1、可预见的热key-处理" tabindex="-1"><a class="header-anchor" href="#_1、可预见的热key-处理"><span>1、可预见的热Key 处理</span></a></h3><ul><li><strong>根据经验，提前预测</strong></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>这种方法在大多数情况下还是比较有效的。比较常见的就是电商系统中，会在秒杀、抢购等业务开始前就能预测出热key。 但是，这种方法局限性也很大，就是有些热key是完全没办法预测的，比如明星什么时候要官宣这种事情就无法预测。</p></div><ul><li><strong>多级缓存处理</strong></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>多级缓存是指在 Redis 前面加入一层本地缓存（如：Guava、Caffeine）。当 Redis 查询不到数据时，先从本地缓存中查找，如果本地缓存 没有，再到 Redis 中查找。多级缓存可以有效减少 Redis 的访问压力，降低热key带来的性能瓶颈。</p></div><ul><li><strong>热key备份</strong></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>通过热key备份的策略，可以减少 Redis 的压力。对于某些重要且高频访问的热key，可以在多个 Redis 实例之间进行备份，从而分担请求压力。 通过设置不同的 Redis 实例对不同的热key进行备份，可以实现负载均衡，避免单点压力过大。</p></div><ul><li><strong>热key拆分</strong></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>热key拆分是通过将一个热key拆分成多个子键进行访问，避免单个键造成 Redis 集群的性能瓶颈。例如，将某个用户的热key拆分成多个 小键（如 user_id:1:part1, user_id:1:part2）来进行访问。这种方式能够减少对单一键的集中访问，分散压力。</p></div><p>原文链接：<a href="https://blog.csdn.net/weixin_45433817/article/details/130814075" target="_blank" rel="noopener noreferrer">CSDN 博客 - Redis 热Key处理方法</a></p><hr><h3 id="_2、不可预见的热key-处理" tabindex="-1"><a class="header-anchor" href="#_2、不可预见的热key-处理"><span>2、不可预见的热Key 处理</span></a></h3><p>有些热key的出现是无法预测的，如突发事件或某些特殊场景下的数据突然暴涨。对于这类热key，可以采用以下方法：</p><ul><li><p><strong>动态监控与预警</strong><br> 可以通过监控 Redis 的访问情况，实时分析是否有单一热key的访问量异常增大。设置监控和报警机制，一旦出现异常流量时及时采取措施， 如快速切换缓存策略、增加 Redis 实例或通过拆分热key等方式进行处理。</p></li><li><p><strong>自动化热key检测与剖析</strong><br> 使用一些自动化工具，定期分析 Redis 的访问模式，并且通过访问日志对热key进行识别。常用的工具可以帮助开发人员发现热点数据并动态 调整策略，以降低 Redis 性能压力。</p></li><li><p><strong>分布式缓存处理</strong><br> 对于不可预见的热key问题，分布式缓存（如 Redis Cluster）能有效分担高频访问带来的压力。合理的分区策略和缓存分布可以帮助避免 单节点压力过大，并提高整体缓存效率。</p></li><li><p><strong>参考代码</strong><br> 参考代码：<a href="https://gitee.com/jd-platform-opensource/hotkey" target="_blank" rel="noopener noreferrer">https://gitee.com/jd-platform-opensource/hotkey</a><br> 该代码库提供了一个自动化检测和处理 Redis 热key的方案，可以根据实际需求进行二次开发和集成。</p></li></ul><h2 id="十七、redis大-key-问题如何解决" tabindex="-1"><a class="header-anchor" href="#十七、redis大-key-问题如何解决"><span>十七、Redis大 Key 问题如何解决?</span></a></h2><h2 id="十八、redis-6-x-为什么要引入多线程" tabindex="-1"><a class="header-anchor" href="#十八、redis-6-x-为什么要引入多线程"><span>十八、Redis 6.x 为什么要引入多线程?</span></a></h2><h2 id="十九、redis-说说分布式锁" tabindex="-1"><a class="header-anchor" href="#十九、redis-说说分布式锁"><span>十九、Redis 说说分布式锁？</span></a></h2>',66)),s("ul",null,[s("li",null,[n[6]||(n[6]=a("点击查看 ")),e(p,{to:"/cache/1_redis#四、Redis分布式锁"},{default:t(()=>n[5]||(n[5]=[a("Redis：Redis分布式锁")])),_:1})])])])}const b=c(d,[["render",v],["__file","2_cache.html.vue"]]),g=JSON.parse('{"path":"/interview/2_cache.html","title":"Java 总结-缓存","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、缓存和数据库一致性问题","slug":"一、缓存和数据库一致性问题","link":"#一、缓存和数据库一致性问题","children":[{"level":3,"title":"1、延迟双删（缓存-库-缓存）","slug":"_1、延迟双删-缓存-库-缓存","link":"#_1、延迟双删-缓存-库-缓存","children":[]},{"level":3,"title":"2、先改库，后删缓存","slug":"_2、先改库-后删缓存","link":"#_2、先改库-后删缓存","children":[]}]},{"level":2,"title":"二、Redis 内存用完会发生什么?","slug":"二、redis-内存用完会发生什么","link":"#二、redis-内存用完会发生什么","children":[]},{"level":2,"title":"三、Redis 过期策略？","slug":"三、redis-过期策略","link":"#三、redis-过期策略","children":[]},{"level":2,"title":"四、Redis 内存淘汰机制","slug":"四、redis-内存淘汰机制","link":"#四、redis-内存淘汰机制","children":[{"level":3,"title":"1、常见的淘汰机制对比","slug":"_1、常见的淘汰机制对比","link":"#_1、常见的淘汰机制对比","children":[]},{"level":3,"title":"2、手写一个 LRU 算法","slug":"_2、手写一个-lru-算法","link":"#_2、手写一个-lru-算法","children":[]}]},{"level":2,"title":"五、缓存穿透、缓存击穿、缓存雪崩和缓存刷新","slug":"五、缓存穿透、缓存击穿、缓存雪崩和缓存刷新","link":"#五、缓存穿透、缓存击穿、缓存雪崩和缓存刷新","children":[{"level":3,"title":"1、缓存穿透（Cache Penetration）：","slug":"_1、缓存穿透-cache-penetration","link":"#_1、缓存穿透-cache-penetration","children":[]},{"level":3,"title":"2、缓存击穿（Cache Breakdown）：","slug":"_2、缓存击穿-cache-breakdown","link":"#_2、缓存击穿-cache-breakdown","children":[]},{"level":3,"title":"3、缓存雪崩（Cache Avalanche）:","slug":"_3、缓存雪崩-cache-avalanche","link":"#_3、缓存雪崩-cache-avalanche","children":[]},{"level":3,"title":"4、缓存刷新（Cache Refresh）：","slug":"_4、缓存刷新-cache-refresh","link":"#_4、缓存刷新-cache-refresh","children":[]}]},{"level":2,"title":"六、Redis 的常用数据结构有哪些？","slug":"六、redis-的常用数据结构有哪些","link":"#六、redis-的常用数据结构有哪些","children":[{"level":3,"title":"1. String（字符串）","slug":"_1-string-字符串","link":"#_1-string-字符串","children":[]},{"level":3,"title":"2. Hash（哈希表）","slug":"_2-hash-哈希表","link":"#_2-hash-哈希表","children":[]},{"level":3,"title":"3. List（列表）","slug":"_3-list-列表","link":"#_3-list-列表","children":[]},{"level":3,"title":"4. Set（集合）","slug":"_4-set-集合","link":"#_4-set-集合","children":[]},{"level":3,"title":"5. Sorted Set（有序集合）","slug":"_5-sorted-set-有序集合","link":"#_5-sorted-set-有序集合","children":[]}]},{"level":2,"title":"七、本地缓存与分布式缓存","slug":"七、本地缓存与分布式缓存","link":"#七、本地缓存与分布式缓存","children":[{"level":3,"title":"1、本地缓存（Local Cache，如 Caffeine）","slug":"_1、本地缓存-local-cache-如-caffeine","link":"#_1、本地缓存-local-cache-如-caffeine","children":[]},{"level":3,"title":"2、分布式缓存（Distributed Cache，如 Redis）","slug":"_2、分布式缓存-distributed-cache-如-redis","link":"#_2、分布式缓存-distributed-cache-如-redis","children":[]}]},{"level":2,"title":"八、Redis 的线程模型","slug":"八、redis-的线程模型","link":"#八、redis-的线程模型","children":[]},{"level":2,"title":"九、Redis 的并发竞争问题?","slug":"九、redis-的并发竞争问题","link":"#九、redis-的并发竞争问题","children":[]},{"level":2,"title":"十、了解 Redis 的事务吗？","slug":"十、了解-redis-的事务吗","link":"#十、了解-redis-的事务吗","children":[]},{"level":2,"title":"十一、Redis 的选举算法和流程是怎样的","slug":"十一、redis-的选举算法和流程是怎样的","link":"#十一、redis-的选举算法和流程是怎样的","children":[]},{"level":2,"title":"十二、Redis 的持久化机制","slug":"十二、redis-的持久化机制","link":"#十二、redis-的持久化机制","children":[{"level":3,"title":"1、RDB（Redis DataBase Snapshot）","slug":"_1、rdb-redis-database-snapshot","link":"#_1、rdb-redis-database-snapshot","children":[]},{"level":3,"title":"2、AOF（Append Only File）","slug":"_2、aof-append-only-file","link":"#_2、aof-append-only-file","children":[]},{"level":3,"title":"3、RDB vs AOF","slug":"_3、rdb-vs-aof","link":"#_3、rdb-vs-aof","children":[]}]},{"level":2,"title":"十三、什么是缓存预热？","slug":"十三、什么是缓存预热","link":"#十三、什么是缓存预热","children":[]},{"level":2,"title":"十四、什么是缓存热备？","slug":"十四、什么是缓存热备","link":"#十四、什么是缓存热备","children":[]},{"level":2,"title":"十五、怎么使用 Redis 实现消息队列？","slug":"十五、怎么使用-redis-实现消息队列","link":"#十五、怎么使用-redis-实现消息队列","children":[]},{"level":2,"title":"十六、Redis 热 Key 问题如何解决?","slug":"十六、redis-热-key-问题如何解决","link":"#十六、redis-热-key-问题如何解决","children":[{"level":3,"title":"1、可预见的热Key 处理","slug":"_1、可预见的热key-处理","link":"#_1、可预见的热key-处理","children":[]},{"level":3,"title":"2、不可预见的热Key 处理","slug":"_2、不可预见的热key-处理","link":"#_2、不可预见的热key-处理","children":[]}]},{"level":2,"title":"十七、Redis大 Key 问题如何解决?","slug":"十七、redis大-key-问题如何解决","link":"#十七、redis大-key-问题如何解决","children":[]},{"level":2,"title":"十八、Redis 6.x 为什么要引入多线程?","slug":"十八、redis-6-x-为什么要引入多线程","link":"#十八、redis-6-x-为什么要引入多线程","children":[]},{"level":2,"title":"十九、Redis 说说分布式锁？","slug":"十九、redis-说说分布式锁","link":"#十九、redis-说说分布式锁","children":[]}],"git":{"updatedTime":1760086933000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":19,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"hanchen@c-sc.cn","commits":4,"url":"https://github.com/hanchen"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":4,"url":"https://github.com/hanchen"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":6,"url":"https://github.com/hello0709"}]},"filePathRelative":"interview/2_cache.md"}');export{b as comp,g as data};
