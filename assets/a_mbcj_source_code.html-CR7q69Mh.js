import{_ as s,c as a,a as e,o as p}from"./app-Bs-LfJfr.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="mysql-binlog-connect-java" tabindex="-1"><a class="header-anchor" href="#mysql-binlog-connect-java"><span>Mysql-binlog-connect-java</span></a></h1><ul><li>Github: <a href="https://github.com/shyiko/mysql-binlog-connector-java" target="_blank" rel="noopener noreferrer">https://github.com/shyiko/mysql-binlog-connector-java</a></li></ul><h2 id="一、核心类-binarylogclient" tabindex="-1"><a class="header-anchor" href="#一、核心类-binarylogclient"><span>一、核心类：BinaryLogClient</span></a></h2><p>BinaryLogClient 是一个功能完整的 MySQL 二进制日志客户端，主要特点包括：</p><h3 id="_1、核心功能" tabindex="-1"><a class="header-anchor" href="#_1、核心功能"><span>1、核心功能</span></a></h3><ul><li>实时数据同步：监听 MySQL binlog 事件，获取数据库变更</li><li>多数据库支持：支持 MySQL 和 MariaDB</li><li>GTID 支持：完整的全局事务标识符支持</li><li>SSL 安全连接：多种 SSL 模式支持</li><li>自动重连：内置保活和重连机制</li></ul><h3 id="_2、架构设计" tabindex="-1"><a class="header-anchor" href="#_2、架构设计"><span>2、架构设计</span></a></h3><ul><li>事件驱动：基于监听器模式处理事件</li><li>线程安全：使用 CopyOnWriteArrayList 和锁机制</li><li>资源管理：完善的连接和线程生命周期管理</li><li>错误处理：全面的异常处理和恢复机制</li></ul><h3 id="_3、使用场景" tabindex="-1"><a class="header-anchor" href="#_3、使用场景"><span>3、使用场景</span></a></h3><ul><li>数据同步和复制</li><li>实时数据变更监控</li><li>数据备份和恢复</li><li>数据分析和审计</li><li>这个客户端库为 Java 应用程序提供了与 MySQL 二进制日志交互的完整解决方案，是构建数据同步、实时监控等系统的重要基础组件。</li></ul><h2 id="二、核心方法-connect" tabindex="-1"><a class="header-anchor" href="#二、核心方法-connect"><span>二、核心方法 connect</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 获取连接锁，防止重复连接</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connectLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;BinaryLogClient is already connected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 2. 建立网络连接</span></span>
<span class="line">        channel <span class="token operator">=</span> <span class="token function">openChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 3. 接收服务器问候包</span></span>
<span class="line">        <span class="token class-name">GreetingPacket</span> greetingPacket <span class="token operator">=</span> <span class="token function">receiveGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 4. 解析数据库版本</span></span>
<span class="line">        <span class="token function">resolveDatabaseVersion</span><span class="token punctuation">(</span>greetingPacket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 5. 尝试升级到 SSL（如果需要）</span></span>
<span class="line">        <span class="token function">tryUpgradeToSSL</span><span class="token punctuation">(</span>greetingPacket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 6. 进行身份认证</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Authenticator</span><span class="token punctuation">(</span>greetingPacket<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> schema<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 7. 设置连接参数</span></span>
<span class="line">        <span class="token function">setupConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 8. 请求二进制日志流</span></span>
<span class="line">        <span class="token function">requestBinaryLogStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 9. 开始监听事件</span></span>
<span class="line">        <span class="token function">listenForEventPackets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        connectLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、listenforeventpackets-方法" tabindex="-1"><a class="header-anchor" href="#三、listenforeventpackets-方法"><span>三、listenForEventPackets 方法</span></a></h2><p><code>listenForEventPackets()</code> 是 <code>BinaryLogClient</code> 的核心方法，负责持续监听 MySQL 服务器发送的二进制日志事件包。</p><h3 id="_1-方法概述" tabindex="-1"><a class="header-anchor" href="#_1-方法概述"><span>1. 方法概述</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">listenForEventPackets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ByteArrayInputStream</span> inputStream <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> completeShutdown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ... 事件监听循环</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>作用</strong>：</p><ul><li>持续读取 MySQL 服务器发送的 binlog 事件包</li><li>解析事件并通知注册的监听器</li><li>处理各种异常情况</li><li>维护连接状态和位置信息</li></ul><h3 id="_2-主要处理流程" tabindex="-1"><a class="header-anchor" href="#_2-主要处理流程"><span>2. 主要处理流程</span></a></h3><h4 id="_2-1-初始化阶段" tabindex="-1"><a class="header-anchor" href="#_2-1-初始化阶段"><span>2.1 初始化阶段</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ByteArrayInputStream</span> inputStream <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> completeShutdown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取网络通道的输入流</li><li>初始化关闭标志</li></ul><h4 id="_2-2-主循环-持续监听事件" tabindex="-1"><a class="header-anchor" href="#_2-2-主循环-持续监听事件"><span>2.2 主循环 - 持续监听事件</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>inputStream<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理每个数据包</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>循环条件</strong>：<code>inputStream.peek() != -1</code> 表示还有数据可读</p><h4 id="_2-3-数据包解析" tabindex="-1"><a class="header-anchor" href="#_2-3-数据包解析"><span>2.3 数据包解析</span></a></h4><p><strong>步骤1：读取数据包头部</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> packetLength <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">readInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取3字节的数据包长度</span></span>
<span class="line">inputStream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 跳过1字节的序列号</span></span>
<span class="line"><span class="token keyword">int</span> marker <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 读取1字节的标记</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MySQL 协议数据包格式</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+------------------+------------------+------------------+------------------+</span>
<span class="line">|     Length       |     Sequence     |     Payload      |     Marker       |</span>
<span class="line">|   (3 bytes)      |    (1 byte)      |   (variable)     |    (1 byte)      |</span>
<span class="line">+------------------+------------------+------------------+------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤2：处理特殊标记</strong></p><p><strong>错误包处理 (0xFF)</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>marker <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ErrorPacket</span> errorPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorPacket</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>packetLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServerException</span><span class="token punctuation">(</span>errorPacket<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorPacket<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        errorPacket<span class="token punctuation">.</span><span class="token function">getSqlState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>EOF 包处理 (0xFE)</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>marker <span class="token operator">==</span> <span class="token number">0xFE</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>blocking<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    completeShutdown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在非阻塞模式下，EOF 包表示服务器主动断开连接</li></ul><h4 id="_2-4-事件反序列化" tabindex="-1"><a class="header-anchor" href="#_2-4-事件反序列化"><span>2.4 事件反序列化</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Event</span> event<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    event <span class="token operator">=</span> eventDeserializer<span class="token punctuation">.</span><span class="token function">nextEvent</span><span class="token punctuation">(</span>packetLength <span class="token operator">==</span> <span class="token constant">MAX_PACKET_LENGTH</span> <span class="token operator">?</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token function">readPacketSplitInChunks</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> packetLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span></span>
<span class="line">        inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EOFException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理反序列化异常</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键逻辑</strong>：</p><ul><li>如果数据包长度等于 <code>MAX_PACKET_LENGTH</code> (16777215)，说明数据被分片</li><li>需要调用 <code>readPacketSplitInChunks()</code> 重新组装数据</li><li>否则直接使用原始输入流</li></ul><h4 id="_2-5-大包分片处理" tabindex="-1"><a class="header-anchor" href="#_2-5-大包分片处理"><span>2.5 大包分片处理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readPacketSplitInChunks</span><span class="token punctuation">(</span><span class="token class-name">ByteArrayInputStream</span> inputStream<span class="token punctuation">,</span> <span class="token keyword">int</span> packetLength<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>packetLength<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> chunkLength<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        chunkLength <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">readInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取下一个分片长度</span></span>
<span class="line">        inputStream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// 跳过序列号</span></span>
<span class="line">        result <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> result<span class="token punctuation">.</span>length <span class="token operator">+</span> chunkLength<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 扩展结果数组</span></span>
<span class="line">        inputStream<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> chunkLength<span class="token punctuation">,</span> chunkLength<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 填充数据</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>chunkLength <span class="token operator">==</span> <span class="token class-name">Packet</span><span class="token punctuation">.</span><span class="token constant">MAX_LENGTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果长度等于最大值，说明还有更多分片</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分片重组逻辑</strong>：</p><ul><li>MySQL 协议限制单个数据包最大 16MB</li><li>超过限制的数据会被分成多个包</li><li>需要重新组装成完整的数据</li></ul><h4 id="_2-6-事件处理" tabindex="-1"><a class="header-anchor" href="#_2-6-事件处理"><span>2.6 事件处理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    eventLastSeen <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 更新最后事件时间</span></span>
<span class="line">    <span class="token function">updateGtidSet</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">// 更新 GTID 信息</span></span>
<span class="line">    <span class="token function">notifyEventListeners</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// 通知事件监听器</span></span>
<span class="line">    <span class="token function">updateClientBinlogFilenameAndPosition</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 更新位置信息</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>处理步骤</strong>：</p><ol><li><strong>时间戳更新</strong>：用于保活机制检测</li><li><strong>GTID 更新</strong>：维护全局事务标识符状态</li><li><strong>事件通知</strong>：调用所有注册的事件监听器</li><li><strong>位置更新</strong>：更新当前 binlog 文件名和位置</li></ol><h3 id="_3-异常处理机制" tabindex="-1"><a class="header-anchor" href="#_3-异常处理机制"><span>3. 异常处理机制</span></a></h3><h4 id="_3-1-反序列化异常" tabindex="-1"><a class="header-anchor" href="#_3-1-反序列化异常"><span>3.1 反序列化异常</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> e <span class="token keyword">instanceof</span> <span class="token class-name">EventDataDeserializationException</span> <span class="token operator">?</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> e<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">EOFException</span> <span class="token operator">||</span> cause <span class="token keyword">instanceof</span> <span class="token class-name">SocketException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>  <span class="token comment">// 重新抛出网络相关异常</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LifecycleListener</span> lifecycleListener <span class="token operator">:</span> lifecycleListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            lifecycleListener<span class="token punctuation">.</span><span class="token function">onEventDeserializationFailure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 跳过当前事件，继续处理下一个</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>处理策略</strong>：</p><ul><li>网络异常：重新抛出，终止连接</li><li>数据异常：通知监听器，跳过当前事件</li><li>继续处理：不中断整个监听循环</li></ul><h4 id="_3-2-通信异常" tabindex="-1"><a class="header-anchor" href="#_3-2-通信异常"><span>3.2 通信异常</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LifecycleListener</span> lifecycleListener <span class="token operator">:</span> lifecycleListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            lifecycleListener<span class="token punctuation">.</span><span class="token function">onCommunicationFailure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-资源清理" tabindex="-1"><a class="header-anchor" href="#_4-资源清理"><span>4. 资源清理</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>completeShutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 完全关闭（包括保活线程）</span></span>
<span class="line">            <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 只关闭网络连接</span></span>
<span class="line">            <span class="token function">disconnectChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>清理策略</strong>：</p><ul><li><strong>完全关闭</strong>：服务器主动断开时，关闭所有资源</li><li><strong>部分关闭</strong>：网络异常时，只关闭网络连接，保活线程会尝试重连</li></ul><h3 id="_5-方法特点" tabindex="-1"><a class="header-anchor" href="#_5-方法特点"><span>5. 方法特点</span></a></h3><h4 id="_5-1-阻塞性" tabindex="-1"><a class="header-anchor" href="#_5-1-阻塞性"><span>5.1 阻塞性</span></a></h4><ul><li>方法会阻塞直到连接断开</li><li>在 <code>connect()</code> 方法中调用，是连接过程的核心</li></ul><h4 id="_5-2-容错性" tabindex="-1"><a class="header-anchor" href="#_5-2-容错性"><span>5.2 容错性</span></a></h4><ul><li>单个事件解析失败不会终止整个监听</li><li>网络异常会触发重连机制</li></ul><h4 id="_5-3-实时性" tabindex="-1"><a class="header-anchor" href="#_5-3-实时性"><span>5.3 实时性</span></a></h4><ul><li>持续监听，实时处理事件</li><li>立即通知监听器，无缓冲延迟</li></ul><h3 id="_6-使用场景" tabindex="-1"><a class="header-anchor" href="#_6-使用场景"><span>6. 使用场景</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 在 connect() 方法中的调用</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ... 连接建立逻辑</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ... 其他初始化</span></span>
<span class="line">        <span class="token function">listenForEventPackets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 开始监听事件（阻塞）</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        connectLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结"><span>7. 总结</span></a></h3><p><code>listenForEventPackets()</code> 方法实现了：</p><ol><li><strong>持续监听</strong>：循环读取 MySQL 事件包</li><li><strong>协议解析</strong>：处理 MySQL 二进制日志协议</li><li><strong>事件分发</strong>：将解析的事件通知给监听器</li><li><strong>状态维护</strong>：更新 GTID、位置等状态信息</li><li><strong>异常处理</strong>：优雅处理各种异常情况</li><li><strong>资源管理</strong>：确保连接和资源正确清理</li></ol><p>这是整个 <code>BinaryLogClient</code> 的核心，负责将 MySQL 的二进制日志事件转换为 Java 对象并分发给应用程序。</p><h2 id="四、完整流程图" tabindex="-1"><a class="header-anchor" href="#四、完整流程图"><span>四、完整流程图</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid" data-title="mermaid"><pre><code><span class="line"><span class="token keyword">graph</span> TD</span>
<span class="line">    A<span class="token text string">[客户端启动]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[注册监听器]</span></span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> C<span class="token text string">[调用 connect]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> D<span class="token text string">[建立网络连接]</span></span>
<span class="line">    D <span class="token arrow operator">--&gt;</span> E<span class="token text string">[身份认证]</span></span>
<span class="line">    E <span class="token arrow operator">--&gt;</span> F<span class="token text string">[触发 onConnect]</span></span>
<span class="line">    F <span class="token arrow operator">--&gt;</span> G<span class="token text string">[开始监听事件]</span></span>
<span class="line">    G <span class="token arrow operator">--&gt;</span> H<span class="token text string">[接收数据包]</span></span>
<span class="line">    H <span class="token arrow operator">--&gt;</span> I<span class="token text string">{解析事件}</span></span>
<span class="line">    I <span class="token arrow operator">--&gt;</span><span class="token label property">|成功|</span> J<span class="token text string">[触发 onEvent]</span></span>
<span class="line">    I <span class="token arrow operator">--&gt;</span><span class="token label property">|失败|</span> K<span class="token text string">[触发 onEventDeserializationFailure]</span></span>
<span class="line">    J <span class="token arrow operator">--&gt;</span> L<span class="token text string">[更新位置信息]</span></span>
<span class="line">    L <span class="token arrow operator">--&gt;</span> H</span>
<span class="line">    K <span class="token arrow operator">--&gt;</span> H</span>
<span class="line">    H <span class="token arrow operator">--&gt;</span> M<span class="token text string">{连接状态}</span></span>
<span class="line">    M <span class="token arrow operator">--&gt;</span><span class="token label property">|正常|</span> H</span>
<span class="line">    M <span class="token arrow operator">--&gt;</span><span class="token label property">|异常|</span> N<span class="token text string">[触发 onCommunicationFailure]</span></span>
<span class="line">    M <span class="token arrow operator">--&gt;</span><span class="token label property">|断开|</span> O<span class="token text string">[触发 onDisconnect]</span></span>
<span class="line">    N <span class="token arrow operator">--&gt;</span> P<span class="token text string">[尝试重连]</span></span>
<span class="line">    P <span class="token arrow operator">--&gt;</span> D</span>
<span class="line">    O <span class="token arrow operator">--&gt;</span> Q<span class="token text string">[结束]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="未完待续" tabindex="-1"><a class="header-anchor" href="#未完待续"><span>未完待续...</span></a></h2>`,75)]))}const o=s(t,[["render",l],["__file","a_mbcj_source_code.html.vue"]]),u=JSON.parse('{"path":"/database/a_mbcj_source_code.html","title":"Mysql-binlog-connect-java","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、核心类：BinaryLogClient","slug":"一、核心类-binarylogclient","link":"#一、核心类-binarylogclient","children":[{"level":3,"title":"1、核心功能","slug":"_1、核心功能","link":"#_1、核心功能","children":[]},{"level":3,"title":"2、架构设计","slug":"_2、架构设计","link":"#_2、架构设计","children":[]},{"level":3,"title":"3、使用场景","slug":"_3、使用场景","link":"#_3、使用场景","children":[]}]},{"level":2,"title":"二、核心方法 connect","slug":"二、核心方法-connect","link":"#二、核心方法-connect","children":[]},{"level":2,"title":"三、listenForEventPackets 方法","slug":"三、listenforeventpackets-方法","link":"#三、listenforeventpackets-方法","children":[{"level":3,"title":"1. 方法概述","slug":"_1-方法概述","link":"#_1-方法概述","children":[]},{"level":3,"title":"2. 主要处理流程","slug":"_2-主要处理流程","link":"#_2-主要处理流程","children":[]},{"level":3,"title":"3. 异常处理机制","slug":"_3-异常处理机制","link":"#_3-异常处理机制","children":[]},{"level":3,"title":"4. 资源清理","slug":"_4-资源清理","link":"#_4-资源清理","children":[]},{"level":3,"title":"5. 方法特点","slug":"_5-方法特点","link":"#_5-方法特点","children":[]},{"level":3,"title":"6. 使用场景","slug":"_6-使用场景","link":"#_6-使用场景","children":[]},{"level":3,"title":"7. 总结","slug":"_7-总结","link":"#_7-总结","children":[]}]},{"level":2,"title":"四、完整流程图","slug":"四、完整流程图","link":"#四、完整流程图","children":[]},{"level":2,"title":"未完待续...","slug":"未完待续","link":"#未完待续","children":[]}],"git":{"updatedTime":1759201659000,"contributors":[{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":4,"url":"https://github.com/hello0709"}]},"filePathRelative":"database/a_mbcj_source_code.md"}');export{o as comp,u as data};
