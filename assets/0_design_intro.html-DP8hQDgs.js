import{_ as t,c as n,a as r,o as i}from"./app-CIL8s_yA.js";const a="/clarence-java-doc/assets/design-pattern-B8qcZSCs.png",l={};function s(p,e){return i(),n("div",null,e[0]||(e[0]=[r('<h1 id="设计模式简介" tabindex="-1"><a class="header-anchor" href="#设计模式简介"><span>设计模式简介</span></a></h1><p>参考链接：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程-设计模式</a></p><h2 id="一、设计模式简介" tabindex="-1"><a class="header-anchor" href="#一、设计模式简介"><span>一、设计模式简介</span></a></h2><p>设计模式是一套被反复使用的、为解决特定问题而总结出的面向对象设计经验。它们有助于构建更可维护、可扩展、可重用的系统结构。 设计模式并不是直接可用的代码模板，而是解决问题的最佳实践。</p><p>设计模式分为三大类：</p><ul><li><strong>创建型模式</strong>：关注对象的创建（如单例、工厂、建造者等）</li><li><strong>结构型模式</strong>：关注类或对象的组合结构（如适配器、桥接、装饰器等）</li><li><strong>行为型模式</strong>：关注对象之间的通信与职责分配（如策略、责任链、状态等）</li></ul><p>三大类共包含 23 种经典设计模式，如下所示：</p><table><thead><tr><th>类型</th><th>模式名称</th></tr></thead><tbody><tr><td><strong>创建型</strong></td><td>1. 单例模式（Singleton Pattern）<br>2. 工厂模式（Factory Pattern）<br>3.建造者模式（Builder Pattern）<br>4. 原型模式（Prototype Pattern）<br>5. 抽象工厂模式（Abstract Factory Pattern）</td></tr><tr><td><strong>结构型</strong></td><td>6. 适配器模式（Adapter Pattern）<br>7. 桥接模式（Bridge Pattern）<br>8. 装饰器模式（Decorator Pattern）<br>9. 组合模式（Composite Pattern）<br>10. 外观模式（Facade Pattern）<br>11. 享元模式（Flyweight Pattern）<br>12. 代理模式（Proxy Pattern）</td></tr><tr><td><strong>行为型</strong></td><td>13. 策略模式（Strategy Pattern）<br>14. 责任链模式（Chain of Responsibility Pattern）<br>15. 模板方法模式（Template Method Pattern）<br>16. 观察者模式（Observer Pattern）<br>17. 命令模式（Command Pattern）<br>18. 状态模式（State Pattern）<br>19. 访问者模式（Visitor Pattern）<br>20. 中介者模式（Mediator Pattern）<br>21. 迭代器模式（Iterator Pattern）<br>22. 备忘录模式（Memento Pattern）<br>23. 解释器模式（Interpreter Pattern）</td></tr></tbody></table><h2 id="二、设计模式的关系" tabindex="-1"><a class="header-anchor" href="#二、设计模式的关系"><span>二、设计模式的关系</span></a></h2><p><img src="'+a+'" alt="img.png"></p><h2 id="三、设计模式的优点" tabindex="-1"><a class="header-anchor" href="#三、设计模式的优点"><span>三、设计模式的优点</span></a></h2><ul><li>提供了一种共享的设计词汇和概念，使开发人员能够更好地沟通和理解彼此的设计意图。</li><li>提供了经过验证的解决方案，可以提高软件的可维护性、可复用性和灵活性。</li><li>促进了代码的重用，避免了重复的设计和实现。</li><li>通过遵循设计模式，可以减少系统中的错误和问题，提高代码质量。</li></ul><h2 id="四、设计模式的六大原则" tabindex="-1"><a class="header-anchor" href="#四、设计模式的六大原则"><span>四、设计模式的六大原则</span></a></h2><h3 id="_1、开闭原则-open-close-principle" tabindex="-1"><a class="header-anchor" href="#_1、开闭原则-open-close-principle"><span>1、开闭原则（Open Close Principle）</span></a></h3><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的 扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h3 id="_2、里氏代换原则-liskov-substitution-principle" tabindex="-1"><a class="header-anchor" href="#_2、里氏代换原则-liskov-substitution-principle"><span>2、里氏代换原则（Liskov Substitution Principle）</span></a></h3><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。 里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现 抽象化的具体步骤的规范。</p><h3 id="_3、依赖倒转原则-dependence-inversion-principle" tabindex="-1"><a class="header-anchor" href="#_3、依赖倒转原则-dependence-inversion-principle"><span>3、依赖倒转原则（Dependence Inversion Principle）</span></a></h3><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><h3 id="_4、接口隔离原则-interface-segregation-principle" tabindex="-1"><a class="header-anchor" href="#_4、接口隔离原则-interface-segregation-principle"><span>4、接口隔离原则（Interface Segregation Principle）</span></a></h3><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从 大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><h3 id="_5、迪米特法则-demeter-principle" tabindex="-1"><a class="header-anchor" href="#_5、迪米特法则-demeter-principle"><span>5、迪米特法则 （Demeter Principle）</span></a></h3><ul><li>又称最少知道原则</li></ul><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h3 id="_6、合成复用原则-composite-reuse-principle" tabindex="-1"><a class="header-anchor" href="#_6、合成复用原则-composite-reuse-principle"><span>6、合成复用原则（Composite Reuse Principle）</span></a></h3><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>',26)]))}const c=t(l,[["render",s],["__file","0_design_intro.html.vue"]]),d=JSON.parse('{"path":"/patterns/0_design_intro.html","title":"设计模式简介","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、设计模式简介","slug":"一、设计模式简介","link":"#一、设计模式简介","children":[]},{"level":2,"title":"二、设计模式的关系","slug":"二、设计模式的关系","link":"#二、设计模式的关系","children":[]},{"level":2,"title":"三、设计模式的优点","slug":"三、设计模式的优点","link":"#三、设计模式的优点","children":[]},{"level":2,"title":"四、设计模式的六大原则","slug":"四、设计模式的六大原则","link":"#四、设计模式的六大原则","children":[{"level":3,"title":"1、开闭原则（Open Close Principle）","slug":"_1、开闭原则-open-close-principle","link":"#_1、开闭原则-open-close-principle","children":[]},{"level":3,"title":"2、里氏代换原则（Liskov Substitution Principle）","slug":"_2、里氏代换原则-liskov-substitution-principle","link":"#_2、里氏代换原则-liskov-substitution-principle","children":[]},{"level":3,"title":"3、依赖倒转原则（Dependence Inversion Principle）","slug":"_3、依赖倒转原则-dependence-inversion-principle","link":"#_3、依赖倒转原则-dependence-inversion-principle","children":[]},{"level":3,"title":"4、接口隔离原则（Interface Segregation Principle）","slug":"_4、接口隔离原则-interface-segregation-principle","link":"#_4、接口隔离原则-interface-segregation-principle","children":[]},{"level":3,"title":"5、迪米特法则 （Demeter Principle）","slug":"_5、迪米特法则-demeter-principle","link":"#_5、迪米特法则-demeter-principle","children":[]},{"level":3,"title":"6、合成复用原则（Composite Reuse Principle）","slug":"_6、合成复用原则-composite-reuse-principle","link":"#_6、合成复用原则-composite-reuse-principle","children":[]}]}],"git":{"updatedTime":1754315390000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":7,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":3,"url":"https://github.com/hanchen"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":4,"url":"https://github.com/hello0709"}]},"filePathRelative":"patterns/0_design_intro.md"}');export{c as comp,d as data};
