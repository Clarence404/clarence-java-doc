import{_ as e,c as l,a as i,o as t}from"./app-CMHLh9E1.js";const n={};function s(r,a){return t(),l("div",null,a[0]||(a[0]=[i('<h1 id="压力测试方案" tabindex="-1"><a class="header-anchor" href="#压力测试方案"><span>压力测试方案</span></a></h1><h2 id="一、jmeter压力测试" tabindex="-1"><a class="header-anchor" href="#一、jmeter压力测试"><span>一、JMeter压力测试</span></a></h2><ul><li>1.1 JMeter在Java项目中的应用场景</li><li>1.2 编写JMeter脚本模拟Java接口调用（REST、RPC等）</li><li>1.3 集成JMeter与Maven/Gradle自动化构建</li><li>1.4 分布式压测与JMeter集群部署</li><li>1.5 性能数据分析与报告生成</li></ul><h2 id="二、gatling压力测试-适用于高性能java服务" tabindex="-1"><a class="header-anchor" href="#二、gatling压力测试-适用于高性能java服务"><span>二、Gatling压力测试（适用于高性能Java服务）</span></a></h2><ul><li>2.1 Gatling与Java系统的兼容性</li><li>2.2 Scala DSL模拟高并发请求</li><li>2.3 场景建模与用户行为设计</li><li>2.4 报告输出与集成CI工具</li></ul><h2 id="三、java应用的k6压测集成-现代化方案" tabindex="-1"><a class="header-anchor" href="#三、java应用的k6压测集成-现代化方案"><span>三、Java应用的k6压测集成（现代化方案）</span></a></h2><ul><li>3.1 使用k6压测Java RESTful接口</li><li>3.2 k6+Docker 在Java环境中的快速部署</li><li>3.3 k6与Java服务日志/监控（Prometheus）联动分析</li></ul><h2 id="四、java微服务架构下的压力测试实践" tabindex="-1"><a class="header-anchor" href="#四、java微服务架构下的压力测试实践"><span>四、Java微服务架构下的压力测试实践</span></a></h2><ul><li>4.1 Spring Boot/Spring Cloud项目压测策略</li><li>4.2 服务限流与熔断机制验证（Resilience4j、Hystrix）</li><li>4.3 使用Zipkin/Sleuth分析调用链性能瓶颈</li><li>4.4 OpenTelemetry与压测结合使用</li></ul><h2 id="五、压测工具与java性能监控集成" tabindex="-1"><a class="header-anchor" href="#五、压测工具与java性能监控集成"><span>五、压测工具与Java性能监控集成</span></a></h2><ul><li>5.1 Java性能指标采集（JMX、VisualVM、Arthas）</li><li>5.2 Prometheus + Grafana 监控Java应用性能</li><li>5.3 JVM调优与GC分析（GCEasy, GCViewer）</li></ul><h2 id="六、压测自动化与java-ci-cd集成" tabindex="-1"><a class="header-anchor" href="#六、压测自动化与java-ci-cd集成"><span>六、压测自动化与Java CI/CD集成</span></a></h2><ul><li>6.1 在Jenkins中自动执行JMeter/Gatling/k6脚本</li><li>6.2 与测试用例管理平台（如Allure TestOps）联动</li><li>6.3 性能基线校验与报警机制设计</li></ul><h2 id="七、总结与最佳实践-java项目" tabindex="-1"><a class="header-anchor" href="#七、总结与最佳实践-java项目"><span>七、总结与最佳实践（Java项目）</span></a></h2><ul><li>7.1 Java服务压测常见瓶颈与排查技巧</li><li>7.2 选择合适的工具与框架</li><li>7.3 压测流程标准化建议</li></ul>',15)]))}const c=e(n,[["render",s],["__file","4_stress_test.html.vue"]]),v=JSON.parse('{"path":"/high-con/4_stress_test.html","title":"压力测试方案","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、JMeter压力测试","slug":"一、jmeter压力测试","link":"#一、jmeter压力测试","children":[]},{"level":2,"title":"二、Gatling压力测试（适用于高性能Java服务）","slug":"二、gatling压力测试-适用于高性能java服务","link":"#二、gatling压力测试-适用于高性能java服务","children":[]},{"level":2,"title":"三、Java应用的k6压测集成（现代化方案）","slug":"三、java应用的k6压测集成-现代化方案","link":"#三、java应用的k6压测集成-现代化方案","children":[]},{"level":2,"title":"四、Java微服务架构下的压力测试实践","slug":"四、java微服务架构下的压力测试实践","link":"#四、java微服务架构下的压力测试实践","children":[]},{"level":2,"title":"五、压测工具与Java性能监控集成","slug":"五、压测工具与java性能监控集成","link":"#五、压测工具与java性能监控集成","children":[]},{"level":2,"title":"六、压测自动化与Java CI/CD集成","slug":"六、压测自动化与java-ci-cd集成","link":"#六、压测自动化与java-ci-cd集成","children":[]},{"level":2,"title":"七、总结与最佳实践（Java项目）","slug":"七、总结与最佳实践-java项目","link":"#七、总结与最佳实践-java项目","children":[]}],"git":{"updatedTime":1752557729000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":5,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hanchen"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hello0709"}]},"filePathRelative":"high-con/4_stress_test.md"}');export{c as comp,v as data};
