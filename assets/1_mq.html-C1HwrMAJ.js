import{_ as a,c as e,a as s,o as d}from"./app-B4nd40cH.js";const n="/clarence-java-doc/assets/mq_model-YXtFTVBE.png",r="/clarence-java-doc/assets/img-bogU4kTN.png",h="/clarence-java-doc/assets/img_1-k0nFcYx-.png",l="/clarence-java-doc/assets/img_2-DRyFMrRS.png",i="/clarence-java-doc/assets/img_3-BtoE6zfc.png",p="/clarence-java-doc/assets/img_4-DugIQ115.png",o="/clarence-java-doc/assets/img_5-DwbULh_A.png",c={};function g(_,t){return d(),e("div",null,t[0]||(t[0]=[s('<h1 id="消息中间件" tabindex="-1"><a class="header-anchor" href="#消息中间件"><span>消息中间件</span></a></h1><h2 id="一、什么是消息中间件" tabindex="-1"><a class="header-anchor" href="#一、什么是消息中间件"><span>一、什么是消息中间件？</span></a></h2><p>消息中间件（Message Middleware）是一种用于在分布式系统中传递消息的中间层软件，提供可靠的异步通信机制。它可以解耦系统之间的依赖，提高系统的可伸缩性和容错性。</p><p>你可以把消息队列理解为一个使用队列来通信的组件。它的本质，就是个转发器，包含发消息、存消息、消费消息的过程。最简单的消息队列模型如下：</p><p><img src="'+n+'" alt="img.png"></p><p>我们通常说的消息队列，简称MQ（Message Queue），它其实就指消息中间件，当前业界比较流行的开源消息中间件包括：RabbitMQ、RocketMQ、Kafka。</p><h2 id="二、消息中间件的核心作用" tabindex="-1"><a class="header-anchor" href="#二、消息中间件的核心作用"><span>二、消息中间件的核心作用</span></a></h2><h3 id="_1、应用解耦" tabindex="-1"><a class="header-anchor" href="#_1、应用解耦"><span>1、应用解耦</span></a></h3><p>举个常见业务场景：下单扣库存，用户下单后，订单系统去通知库存系统扣减。传统的做法就是订单系统直接调用库存系统：</p><p><img src="'+r+'" alt="img.png"></p><ul><li><p>如果库存系统无法访问，下单就会失败，订单和库存系统存在耦合关系</p></li><li><p>如果业务又接入一个营销积分服务，那订单下游系统要扩充，如果未来接入越来越多的下游系统，那订单系统代码需要经常修改</p></li></ul><p><img src="'+h+'" alt="img_1.png"></p><p>如何解决这个问题呢？可以引入消息队列</p><p><img src="'+l+'" alt="img_2.png"></p><ul><li><p>订单系统：用户下单后，消息写入到消息队列，返回下单成功</p></li><li><p>库存系统：订阅下单消息，获取下单信息，进行库存扣减操作。</p></li></ul><h3 id="_2、流量削峰" tabindex="-1"><a class="header-anchor" href="#_2、流量削峰"><span>2、流量削峰</span></a></h3><p>流量削峰也是消息队列的常用场景。我们做秒杀实现的时候，需要避免流量暴涨，打垮应用系统的风险。可以在应用前面加入消息队列。</p><p><img src="'+i+'" alt="img_3.png"></p><p>假设秒杀系统每秒最多可以处理2k个请求，每秒却有5k的请求过来，可以引入消息队列，秒杀系统每秒从消息队列拉2k请求处理得了。</p><p>有些伙伴担心这样会出现<strong>消息积压</strong>的问题，</p><ul><li><p>首先秒杀活动不会每时每刻都那么多请求过来，高峰期过去后，积压的请求可以慢慢处理；</p></li><li><p>其次，如果消息队列长度超过最大数量，可以直接抛弃用户请求或跳转到错误页面；</p></li></ul><h3 id="_3、异步处理" tabindex="-1"><a class="header-anchor" href="#_3、异步处理"><span>3、异步处理</span></a></h3><p>我们经常会遇到这样的业务场景：用户注册成功后，给它发个短信和发个邮件。</p><p>如果注册信息入库是30ms，发短信、邮件也是30ms，三个动作<strong>串行执行</strong>的话，会比较耗时，响应90ms：</p><p><img src="'+p+'" alt="img_4.png"></p><p>如果采用并行执行的方式，可以减少响应时间。注册信息入库后，同时异步发短信和邮件。如何实现异步呢？</p><p>用消息队列即可，就是说，注册信息入库成功后，写入到消息队列（这个一般比较快，如只需要3ms），然后异步读取发邮件和短信。</p><p><img src="'+o+'" alt="img_5.png"></p><h3 id="_4、消息通讯" tabindex="-1"><a class="header-anchor" href="#_4、消息通讯"><span>4、消息通讯</span></a></h3><p>消息队列内置了高效的通信机制，可用于消息通讯。如实现点对点消息队列、聊天室等。</p><h3 id="_5、-远程调用" tabindex="-1"><a class="header-anchor" href="#_5、-远程调用"><span>5、 远程调用</span></a></h3><p>可以基于MQ，自研远程调用框架。</p><h2 id="三、消息中间件消息模型" tabindex="-1"><a class="header-anchor" href="#三、消息中间件消息模型"><span>三、消息中间件消息模型</span></a></h2><h3 id="_1、点对点-p2p-模式" tabindex="-1"><a class="header-anchor" href="#_1、点对点-p2p-模式"><span>1、点对点（P2P）模式</span></a></h3><p>消息由生产者发送到队列，消费者从队列消费，每条消息只能被一个消费者处理。</p><h3 id="_2、发布-订阅-pub-sub-模式" tabindex="-1"><a class="header-anchor" href="#_2、发布-订阅-pub-sub-模式"><span>2、发布/订阅（Pub/Sub）模式</span></a></h3><p>生产者将消息发送到主题，多个订阅者可以同时接收相同的消息。</p><h3 id="_3、其他模型" tabindex="-1"><a class="header-anchor" href="#_3、其他模型"><span>3、其他模型</span></a></h3><p>除了传统的点对点和发布/订阅模式，一些消息中间件还引入了以下模型以满足更复杂的业务需求：</p><h4 id="_1-请求-响应-request-reply-模式" tabindex="-1"><a class="header-anchor" href="#_1-请求-响应-request-reply-模式"><span>（1）请求/响应（Request/Reply）模式</span></a></h4><p>该模式用于服务间通信，生产者发送请求消息后，期待消费者处理完成后返回响应消息，通常通过临时队列或回调机制实现。适用于 RPC 场景，如 gRPC、MQ + 回调队列等组合。</p><h4 id="_2-广播模式-broadcast" tabindex="-1"><a class="header-anchor" href="#_2-广播模式-broadcast"><span>（2）广播模式（Broadcast）</span></a></h4><p>消息发送者将同一条消息广播给所有订阅者，无需事先建立订阅关系。所有消费者都能收到副本，常用于配置更新、通知广播等场景。例如 RocketMQ 的广播消费模式。</p><h4 id="_3-延迟消息-delay-message" tabindex="-1"><a class="header-anchor" href="#_3-延迟消息-delay-message"><span>（3）延迟消息（Delay Message）</span></a></h4><p>消息发送后并不会立即投递，而是等待一段时间后再被消费。适用于订单支付超时处理、定时任务等。例如 RabbitMQ 的 TTL + DLX 机制，或 RocketMQ 的延迟级别。</p><h4 id="_4-顺序消息-ordered-message" tabindex="-1"><a class="header-anchor" href="#_4-顺序消息-ordered-message"><span>（4）顺序消息（Ordered Message）</span></a></h4><p>确保同一业务标识下的消息按照发送顺序被消费。例如用户提交订单、支付、发货等流程必须严格有序。Kafka 提供了分区有序的能力，RocketMQ 支持局部顺序消费。</p><h4 id="_5-事务消息-transactional-message" tabindex="-1"><a class="header-anchor" href="#_5-事务消息-transactional-message"><span>（5）事务消息（Transactional Message）</span></a></h4><p>支持在发送消息的同时绑定本地事务，确保本地操作和消息投递的一致性，防止中间状态。主要用于分布式事务处理，如 RocketMQ 的事务消息机制。</p><h2 id="四、消息中间件的关键特性" tabindex="-1"><a class="header-anchor" href="#四、消息中间件的关键特性"><span>四、消息中间件的关键特性</span></a></h2><h3 id="_1、高可用性" tabindex="-1"><a class="header-anchor" href="#_1、高可用性"><span>1、高可用性</span></a></h3><p>通过主从架构、集群部署、数据持久化等方式保证消息的可靠性。</p><h3 id="_2、-消息可靠性" tabindex="-1"><a class="header-anchor" href="#_2、-消息可靠性"><span>2、 消息可靠性</span></a></h3><p>ACK 机制：消费者确认消息已成功处理，未确认的消息可以重新投递。</p><p>消息重试：对于失败的消息，提供重试机制或死信队列（DLQ）。</p><h3 id="_3、-顺序性" tabindex="-1"><a class="header-anchor" href="#_3、-顺序性"><span>3、 顺序性</span></a></h3><p>全局顺序：保证所有消息按照生产顺序被消费。</p><p>分区顺序：在特定分区内保证顺序，适用于 Kafka。</p><h3 id="_4、-可扩展性" tabindex="-1"><a class="header-anchor" href="#_4、-可扩展性"><span>4、 可扩展性</span></a></h3><p>通过分区、分片等技术提升消息队列的吞吐能力。</p><h3 id="_5、-一致性" tabindex="-1"><a class="header-anchor" href="#_5、-一致性"><span>5、 一致性</span></a></h3><p>最终一致性：消息中间件通常采用最终一致性策略，保证数据在一段时间后同步。</p><p>事务消息：支持分布式事务，如 RocketMQ 提供事务消息。</p><h2 id="五、rabbitmq-vs-rocketmq-vs-kafka" tabindex="-1"><a class="header-anchor" href="#五、rabbitmq-vs-rocketmq-vs-kafka"><span>五、RabbitMQ vs RocketMQ vs Kafka</span></a></h2><h3 id="_1、基本信息对比" tabindex="-1"><a class="header-anchor" href="#_1、基本信息对比"><span>1、<strong>基本信息对比</strong></span></a></h3><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>类型</strong></td><td>消息代理（传统型，使用 AMQP 协议）</td><td>分布式消息中间件</td><td>分布式事件流平台</td></tr><tr><td><strong>协议</strong></td><td>AMQP, MQTT, STOMP</td><td>自定义协议</td><td>自定义协议</td></tr></tbody></table><h3 id="_2、适用场景与架构" tabindex="-1"><a class="header-anchor" href="#_2、适用场景与架构"><span>2、<strong>适用场景与架构</strong></span></a></h3><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>适用场景</strong></td><td>高兼容性，支持多种消息模式（如发布-订阅、请求-响应）</td><td>高吞吐量，支持可靠消息和调度功能</td><td>高吞吐量和可扩展性，优化事件流处理</td></tr><tr><td><strong>架构</strong></td><td>集中式</td><td>分布式，主从架构与代理</td><td>分布式，分区式，领导者-追随者模型</td></tr></tbody></table><h3 id="_3、性能与可靠性" tabindex="-1"><a class="header-anchor" href="#_3、性能与可靠性"><span>3、<strong>性能与可靠性</strong></span></a></h3><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>性能</strong></td><td>中等（适用于中等消息量场景）</td><td>高性能（可处理每秒数百万消息）</td><td>非常高的性能（针对日志型事件处理优化）</td></tr><tr><td><strong>可靠性</strong></td><td>通过消息确认和持久化机制保障可靠性</td><td>提供持久化和事务支持的可靠消息</td><td>基于分布式日志和复制的高可靠性</td></tr></tbody></table><h3 id="_4、可扩展性与延迟" tabindex="-1"><a class="header-anchor" href="#_4、可扩展性与延迟"><span>4、<strong>可扩展性与延迟</strong></span></a></h3><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>可扩展性</strong></td><td>有限（横向扩展较为复杂）</td><td>高可扩展性</td><td>高可扩展性</td></tr><tr><td><strong>延迟</strong></td><td>低到中等</td><td>低到中等</td><td>非常低（接近实时处理）</td></tr></tbody></table><h3 id="_5、复杂度与消息存储" tabindex="-1"><a class="header-anchor" href="#_5、复杂度与消息存储"><span>5、<strong>复杂度与消息存储</strong></span></a></h3><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>复杂度</strong></td><td>简单易用</td><td>复杂度中等（需要理解代理、名称服务等）</td><td>高复杂度（需要配置分区、副本等）</td></tr><tr><td><strong>消息保留</strong></td><td>短期存活（默认消息消费后即删除）</td><td>可配置（支持长期消息存储）</td><td>长期保留（为日志和流存储设计）</td></tr></tbody></table><h3 id="_6、顺序保证与事务支持" tabindex="-1"><a class="header-anchor" href="#_6、顺序保证与事务支持"><span>6、<strong>顺序保证与事务支持</strong></span></a></h3><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>顺序保证</strong></td><td>支持队列内消息顺序</td><td>支持每个消息组的顺序</td><td>分区内提供强顺序保证</td></tr><tr><td><strong>事务支持</strong></td><td>支持</td><td>支持（支持分布式事务）</td><td>有限支持（通过 Kafka Streams 实现精确一次语义）</td></tr></tbody></table><h3 id="_7、社区支持与行业应用" tabindex="-1"><a class="header-anchor" href="#_7、社区支持与行业应用"><span>7、<strong>社区支持与行业应用</strong></span></a></h3><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>社区与支持</strong></td><td>拥有庞大的社区和众多集成支持</td><td>社区增长迅速，在中国拥有良好支持</td><td>社区非常活跃，工具支持优良</td></tr><tr><td><strong>行业应用</strong></td><td>传统企业应用</td><td>金融和电子商务行业，尤其在中国和亚洲广泛应用</td><td>各行业广泛应用，尤其是大数据管道场景</td></tr></tbody></table><h3 id="_8、依赖性与云支持" tabindex="-1"><a class="header-anchor" href="#_8、依赖性与云支持"><span>8、<strong>依赖性与云支持</strong></span></a></h3><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>依赖性</strong></td><td>复杂场景需要外部数据库</td><td>可单独运行，或依赖外部存储</td><td>需要 Apache ZooKeeper（Kafka 2.8+ 可用 Kafka Raft）</td></tr><tr><td><strong>主流云支持</strong></td><td>支持 AWS、Azure、Google Cloud</td><td>主要支持亚洲的云服务</td><td>广泛支持（AWS MSK、Confluent Cloud 等）</td></tr></tbody></table>',80)]))}const m=a(c,[["render",g],["__file","1_mq.html.vue"]]),k=JSON.parse('{"path":"/messaging/1_mq.html","title":"消息中间件","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、什么是消息中间件？","slug":"一、什么是消息中间件","link":"#一、什么是消息中间件","children":[]},{"level":2,"title":"二、消息中间件的核心作用","slug":"二、消息中间件的核心作用","link":"#二、消息中间件的核心作用","children":[{"level":3,"title":"1、应用解耦","slug":"_1、应用解耦","link":"#_1、应用解耦","children":[]},{"level":3,"title":"2、流量削峰","slug":"_2、流量削峰","link":"#_2、流量削峰","children":[]},{"level":3,"title":"3、异步处理","slug":"_3、异步处理","link":"#_3、异步处理","children":[]},{"level":3,"title":"4、消息通讯","slug":"_4、消息通讯","link":"#_4、消息通讯","children":[]},{"level":3,"title":"5、 远程调用","slug":"_5、-远程调用","link":"#_5、-远程调用","children":[]}]},{"level":2,"title":"三、消息中间件消息模型","slug":"三、消息中间件消息模型","link":"#三、消息中间件消息模型","children":[{"level":3,"title":"1、点对点（P2P）模式","slug":"_1、点对点-p2p-模式","link":"#_1、点对点-p2p-模式","children":[]},{"level":3,"title":"2、发布/订阅（Pub/Sub）模式","slug":"_2、发布-订阅-pub-sub-模式","link":"#_2、发布-订阅-pub-sub-模式","children":[]},{"level":3,"title":"3、其他模型","slug":"_3、其他模型","link":"#_3、其他模型","children":[]}]},{"level":2,"title":"四、消息中间件的关键特性","slug":"四、消息中间件的关键特性","link":"#四、消息中间件的关键特性","children":[{"level":3,"title":"1、高可用性","slug":"_1、高可用性","link":"#_1、高可用性","children":[]},{"level":3,"title":"2、 消息可靠性","slug":"_2、-消息可靠性","link":"#_2、-消息可靠性","children":[]},{"level":3,"title":"3、 顺序性","slug":"_3、-顺序性","link":"#_3、-顺序性","children":[]},{"level":3,"title":"4、 可扩展性","slug":"_4、-可扩展性","link":"#_4、-可扩展性","children":[]},{"level":3,"title":"5、 一致性","slug":"_5、-一致性","link":"#_5、-一致性","children":[]}]},{"level":2,"title":"五、RabbitMQ vs RocketMQ vs Kafka","slug":"五、rabbitmq-vs-rocketmq-vs-kafka","link":"#五、rabbitmq-vs-rocketmq-vs-kafka","children":[{"level":3,"title":"1、基本信息对比","slug":"_1、基本信息对比","link":"#_1、基本信息对比","children":[]},{"level":3,"title":"2、适用场景与架构","slug":"_2、适用场景与架构","link":"#_2、适用场景与架构","children":[]},{"level":3,"title":"3、性能与可靠性","slug":"_3、性能与可靠性","link":"#_3、性能与可靠性","children":[]},{"level":3,"title":"4、可扩展性与延迟","slug":"_4、可扩展性与延迟","link":"#_4、可扩展性与延迟","children":[]},{"level":3,"title":"5、复杂度与消息存储","slug":"_5、复杂度与消息存储","link":"#_5、复杂度与消息存储","children":[]},{"level":3,"title":"6、顺序保证与事务支持","slug":"_6、顺序保证与事务支持","link":"#_6、顺序保证与事务支持","children":[]},{"level":3,"title":"7、社区支持与行业应用","slug":"_7、社区支持与行业应用","link":"#_7、社区支持与行业应用","children":[]},{"level":3,"title":"8、依赖性与云支持","slug":"_8、依赖性与云支持","link":"#_8、依赖性与云支持","children":[]}]}],"git":{"updatedTime":1749002648000,"contributors":[{"name":"Clarence","username":"Clarence","email":"1154937362@qq.com","commits":4,"url":"https://github.com/Clarence"},{"name":"hanchen","username":"hanchen","email":"1154937362@qq.com","commits":1,"url":"https://github.com/hanchen"},{"name":"hello0709","username":"hello0709","email":"1154937362@qq.com","commits":2,"url":"https://github.com/hello0709"}]},"filePathRelative":"messaging/1_mq.md"}');export{m as comp,k as data};
